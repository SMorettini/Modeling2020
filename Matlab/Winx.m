classdef Winx < ODEbaseClass_P
  properties (SetAccess = protected, Hidden = true)
    gravity=-9.81;
    npos;
    nvel;
    L1 = 1.5*195-25; 
    L2 = 1.5*266-25;
    L3 = 1.5*130; 
    L4 = 1.5*59.3; 
    L5 = 1.5*175; 
    L6 = 1.5*207; 
    L7 = 1.5*64.9; 
    L8 = 1.5*64.9; 
    L9 = 120;  
    L10=40; 
    phi1=-pi/5;
    phi2=pi/4;

    m1 = 3000;
    m2 = 500;
    m3 = 500;
    m4 = 4000;
    m5 = 750;
    m6 = 150;
    IX2 = 0;     
    IX3 =0; 
    IX4 = 0;       
    IX5 = 0;      
    IZ1 =0;  
    IZ6 = 0;      


    c1;
    c5;
    c6;
    prism;
    with_profiles;

  end
  methods
    function self = Winx( with_profiles)
      self@ODEbaseClass_P('Winx',12,4);     % 12 equation 4 invariant

      self.IX2 = ((self.L3/2)^2)*self.m2; 
      self.IX3 = ((self.L4/2)^2)*self.m3;
      self.IX4 = ((self.L5)^2)*self.m4; 
      self.IX5 = ((self.L7)^2)*self.m5;
      self.IZ1 = ((self.L2/2)^2)*self.m1; 
      self.IZ6 = ((self.L9)^2)*self.m6;
      self.npos=6;
      self.nvel=6;

      self.with_profiles= with_profiles;
      if(self.with_profiles)
        self.c1 = c1_p();          
        self.c5 = c5_p();
        self.c6 = c6_p();
        self.prism = prism_p();
      else
        self.c1 = 0;      %1000000000;      
        self.c5 = 0;
        self.c6 = 0;
        self.prism = 0;   %-0.253095034823202062e6;
      end    
    end

    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__Mass = Mass( self, t,vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      % evaluate function
      jac__1_1 = m3;
      t1 = 2 * phi2;
      t2 = cos(t1);
      t3 = L9 ^ 2;
      t4 = m6 * t3;
      t5 = 4 * IZ6;
      t6 = t4 - t5;
      t8 = 2 * theta6;
      t9 = cos(t8);
      t10 = t9 * t6 * t2;
      t11 = sin(theta6);
      t12 = t11 * m6;
      t14 = L8 * L9 * t12;
      t15 = 8 * t14;
      t16 = L8 ^ 2;
      t17 = 8 * t16;
      t18 = t17 + t3;
      t20 = m6 * t18 - t15 - t5;
      t22 = L9 * L7;
      t23 = cos(phi2);
      t27 = 8 * m6 * t11 * t23 * t22;
      t28 = m6 * L7;
      t29 = t23 * L8;
      t30 = t29 * t28;
      t31 = 16 * t30;
      t32 = L7 ^ 2;
      t33 = t32 * m5;
      t34 = 8 * t33;
      t35 = t32 * m6;
      t36 = 8 * t35;
      t37 = 8 * IX5;
      t39 = 2 * theta5;
      t40 = cos(t39);
      t42 = sin(t1);
      t44 = t9 * t6 * t42;
      t47 = -m6 * t18 + t15 + t5;
      t49 = sin(phi2);
      t50 = t49 * m6;
      t51 = L9 * t11;
      t53 = t51 - 2 * L8;
      t56 = 8 * t53 * L7 * t50;
      t58 = sin(t39);
      t64 = L6 ^ 2;
      t65 = m5 + m6;
      t66 = t65 * t64;
      t67 = 2 * phi1;
      t68 = cos(t67);
      t71 = t23 * m6;
      t75 = t65 * L7;
      t77 = cos(phi1);
      t78 = L6 * t77;
      t79 = t78 + L5;
      t81 = cos(theta5);
      t82 = t81 * t79 * (-t51 * t71 / 2 + L8 * t71 + t75);
      t85 = sin(theta5);
      t87 = L6 * t85 * t49 * t77;
      t88 = t85 * t49;
      t89 = L5 * t88;
      t90 = L7 * t23;
      t98 = t49 * L8;
      t103 = t77 * (-t98 * t85 * m6 + t65 * L5) * L6;
      t105 = L5 * L8;
      t107 = m6 * t88 * t105;
      t109 = L6 * L9;
      t110 = sin(phi1);
      t111 = cos(theta6);
      t112 = t111 * t110;
      t114 = m6 * t112 * t109;
      t116 = L5 ^ 2;
      t117 = 16 * t116;
      t118 = 8 * t32;
      t124 = t116 * (64 * m4 + 16 * m5);
      t126 = t40 * (t2 * t20 - t10 - t27 + t31 + t34 + t36 - t37) + t58 * (t42 * t47 + t44 + t56) + t9 * (-3 * t4 + 12 * IZ6) + 16 * t68 * t66 + 32 * t82 + 16 * t51 * (t87 + t89 - t90 / 2 - L8 / 2) * m6 + t31 + 32 * t103 - 32 * t107 + 16 * t114 + m6 * (t117 + t118 + t17 - t3) + t34 + t124 - 16 * IX4 - t37 + t5;
      t127 = 2 * theta4;
      t128 = cos(t127);
      t136 = t81 * t23 - t88;
      t138 = sin(t8);
      t141 = sin(t67);
      t149 = L8 * m6;
      t150 = L6 * t110;
      t151 = L9 * t111;
      t153 = t150 - t151 / 2;
      t157 = t111 * m6;
      t161 = -L9 * t157 / 2 + t65 * t150;
      t162 = L7 * t161;
      t182 = sin(t127);
      t189 = -t6;
      t194 = (s + L3 + L4 / 2) ^ 2;
      t197 = L3 ^ 2;
      t198 = t197 * m2;
      t204 = cos(2 * theta2);
      t207 = L9 * m6;
      t216 = t128 * t126 / 32 + t40 * (t2 * t47 + t10 + t27 - t31 - t34 - t36 + t37) / 32 + t182 * (-4 * t138 * t6 * t136 - 16 * t141 * t66 + t81 * (16 * L9 * L6 * t11 * t110 * t71 - 32 * t23 * t153 * t149 - 32 * t162) - 16 * t12 * t85 * t110 * t49 * t109 + 16 * m6 * t111 * t77 * t109 + 32 * t49 * t85 * t153 * t149 - 32 * L5 * t161) / 32 + t58 * (t42 * t20 - t44 - t56) / 32 + t9 * t189 / 32 + t204 * (16 * m3 * t194 - 16 * IX2 - 16 * IX3 + 4 * t198) / 32 + t82 + t11 * (t87 + t89 - 0.3e1 / 0.2e1 * t90 - 0.3e1 / 0.2e1 * L8) * t207 / 2 + 0.3e1 / 0.2e1 * t30 + t103 - t107 - t114 / 2;
      t224 = m5 * t64;
      t234 = s ^ 2;
      t236 = s * L4;
      t238 = L4 ^ 2;
      t248 = m6 * (t117 + 16 * t64 + 24 * t32 + 24 * t16 + 5 * t3) / 32 + t224 / 2 + 0.3e1 / 0.4e1 * t33 + t124 / 32 + 0.3e1 / 0.8e1 * IZ6 + m3 * (16 * t197 + (32 * s + 16 * L4) * L3 + 16 * t234 + 16 * t236 + 4 * t238) / 32 + t198 / 8 + IX2 / 2 + IX3 / 2 + IX4 / 2 + IX5 / 4 + IZ1;
      jac__2_2 = t216 + t248;
      t249 = L6 * L7;
      t251 = cos(phi1 + theta4 - theta5);
      t256 = sin(theta4 + t39 + phi2 - theta6);
      t258 = t256 * m6 * t22;
      t261 = sin(-theta4 + t39 + phi2 - theta6);
      t263 = t261 * m6 * t22;
      t266 = sin(theta4 + t39 + phi2 + theta6);
      t268 = t266 * m6 * t22;
      t271 = sin(-theta4 + t39 + phi2 + theta6);
      t273 = t271 * m6 * t22;
      t276 = sin(theta4 + theta6 + t39 + t1);
      t278 = t276 * L9 * t149;
      t281 = sin(-theta4 + theta6 + t39 + t1);
      t283 = t281 * L9 * t149;
      t286 = sin(theta4 - theta6 + t39 + t1);
      t288 = t286 * L9 * t149;
      t291 = sin(-theta4 - theta6 + t39 + t1);
      t293 = t291 * L9 * t149;
      t296 = cos(-theta4 + t39 + phi2);
      t298 = t296 * L8 * t28;
      t301 = cos(theta4 + t39 + phi2);
      t303 = t301 * L8 * t28;
      t305 = L6 * L8;
      t307 = cos(theta4 + phi1 - theta5 - phi2);
      t309 = t307 * m6 * t305;
      t312 = cos(theta4 + phi1 + theta5 + phi2);
      t314 = t312 * m6 * t305;
      t316 = m6 * L5;
      t318 = cos(phi2 - theta4 + theta5);
      t320 = t318 * L8 * t316;
      t323 = sin(phi2 + theta6 + phi1 + theta4 + theta5);
      t325 = t323 * m6 * t109;
      t328 = sin(-phi2 + theta6 + phi1 + theta4 - theta5);
      t330 = t328 * m6 * t109;
      t333 = sin(phi2 - theta6 + phi1 + theta4 + theta5);
      t335 = t333 * m6 * t109;
      t338 = sin(-phi2 - theta6 + phi1 + theta4 - theta5);
      t340 = t338 * m6 * t109;
      t343 = sin(theta6 + theta4 + theta5);
      t345 = t343 * m6 * t22;
      t348 = sin(-theta6 + theta4 - theta5);
      t350 = t348 * m6 * t22;
      t352 = t251 * t65 * t249 / 2 - t258 / 8 + t263 / 8 + t268 / 8 - t273 / 8 + t278 / 8 - t283 / 8 - t288 / 8 + t293 / 8 + t298 / 2 - t303 / 2 + t309 / 2 - t314 / 2 + t320 / 2 + t325 / 8 - t330 / 8 - t335 / 8 + t340 / 8 - t345 / 8 + t350 / 8;
      t354 = sin(-theta6 + theta4 + theta5);
      t356 = t354 * m6 * t22;
      t359 = sin(theta6 + theta4 - theta5);
      t361 = t359 * m6 * t22;
      t364 = cos(phi1 + theta4 + theta5);
      t368 = L5 - L8;
      t370 = sin(theta4 + theta5 + phi2 + theta6);
      t374 = L5 + L8;
      t376 = sin(-theta4 + theta5 + phi2 + theta6);
      t381 = sin(theta4 + theta5 + phi2 - theta6);
      t385 = L5 * L7;
      t387 = cos(theta4 - theta5);
      t392 = sin(-theta4 + theta5 + phi2 - theta6);
      t397 = cos(-theta4 + t39 + t1 - t8);
      t401 = cos(t1 + t8 + t39 - theta4);
      t406 = cos(phi2 + theta4 + theta5);
      t409 = cos(theta4 + theta5);
      t416 = -16 * t33 - 16 * t35 + 16 * IX5;
      t418 = cos(theta4 + t39);
      t423 = cos(theta4 - t39);
      t427 = 8 * IZ6;
      t428 = -2 * t4 + t427;
      t430 = cos(t8 + theta4 + theta5 + phi2);
      t433 = -t428;
      t435 = cos(-t8 + theta4 + theta5 + phi2);
      t440 = -16 * t16 - 2 * t3;
      t444 = cos(theta4 + t39 + t1);
      t448 = cos(-theta4 + t8 + theta5 + phi2);
      t452 = cos(-t8 - theta4 + theta5 + phi2);
      t459 = cos(-theta4 + t39 + t1);
      t463 = cos(theta4 + t39 + t1 + t8);
      t467 = cos(theta4 + t39 + t1 - t8);
      t470 = -L5 * (t65 * t409 * L7 + t406 * t149) / 2 + t418 * t416 / 64 - t423 * t416 / 64 + t430 * t428 / 64 + t435 * t433 / 64 + t444 * (m6 * t440 + t427) / 64 + t448 * t428 / 64 + t452 * t433 / 64 + t459 * (-m6 * t440 - t427) / 64 + t463 * t6 / 64 + t467 * t6 / 64;
      jac__2_4 = t352 - t356 / 8 + t361 / 8 - t364 * t65 * t249 / 2 + t370 * t368 * t207 / 8 - t376 * t374 * t207 / 8 - t381 * t374 * t207 / 8 + t387 * t65 * t385 / 2 + t392 * t368 * t207 / 8 + t397 * t189 / 64 + t401 * t189 / 64 + t470;
      t472 = sin(theta4);
      t477 = cos(theta4);
      t507 = (L9 * L8 * t111 + t109 * t11 * t110 - 2 * L8 * t150) * m6;
      jac__2_5 = -t138 * t136 * t6 * t472 / 8 - t9 * t6 * t477 / 8 + t477 * (-4 * t81 * t79 * (t23 * t53 * m6 - 2 * t75) - 8 * t23 * t53 * t28 + 4 * t85 * t79 * t53 * t50 - t15 + m6 * (t118 + t17 + t3) + t34 + t5) / 8 + (t81 * (t23 * t507 - 2 * t162) - t507 * t88) * t472 / 2;
      t516 = t338 * L6;
      t517 = t328 * L6;
      t518 = t392 * t374;
      t519 = t333 * L6;
      t520 = t348 * L7;
      t522 = sin(-theta4 + phi2 - theta6);
      t523 = t522 * L7;
      t526 = t323 * L6;
      t527 = t354 * L7;
      t528 = t359 * L7;
      t529 = t318 * L9;
      t531 = sin(-theta4 + phi2 + theta6);
      t532 = t531 * L7;
      t534 = sin(theta4 + phi2 - theta6);
      t535 = t534 * L7;
      t536 = t370 * t374;
      t537 = t406 * L9;
      t539 = sin(theta6 + phi2 + theta4);
      t540 = t539 * L7;
      t541 = t343 * L7;
      t542 = t376 * t368 + t381 * t368 - t516 - t517 + t518 + t519 + t520 + t523 + t526 - t527 - t528 + t529 + t532 + t535 + t536 - t537 + t540 + t541;
      jac__2_6 = -m6 * t542 * L9 / 8;
      jac__3_3 = m3 * (t197 + (L4 + 0.2e1 * s) * L3 + 0.2500000000e0 * t238 + t234 + t236) + 0.2500000000e0 * t198;
      t575 = 0.5000000000e0 * t309 - 0.5000000000e0 * t314 + 0.5000000000e0 * t320 + 0.1250000000e0 * t325 - 0.1250000000e0 * t330 - 0.1250000000e0 * t335 + 0.1250000000e0 * t340 - 0.1250000000e0 * t345 + 0.1250000000e0 * t350 - 0.1250000000e0 * t356 + 0.1250000000e0 * t361;
      t579 = 0.2500000000e0 * t16 + 0.3125000000e-1 * t3;
      t581 = 0.1250000000e0 * IZ6;
      t586 = -0.6250000000e-1 * IZ6 + 0.1562500000e-1 * t4;
      t589 = -t586;
      t596 = -t581 + 0.3125000000e-1 * t4;
      t598 = -t596;
      t601 = m6 * t385;
      t603 = m5 * t385;
      t605 = -0.5000000000e0 * t601 - 0.5000000000e0 * t603;
      t607 = m5 * t249;
      t609 = L6 * m6;
      t610 = L7 * t609;
      t612 = -0.5000000000e0 * t607 - 0.5000000000e0 * t610;
      t620 = 0.2500000000e0 * IX5 - 0.2500000000e0 * t33 - 0.2500000000e0 * t35;
      t631 = 0.1250000000e0 * L8;
      t632 = 0.1250000000e0 * L5;
      t634 = L9 * (-t631 - t632);
      t640 = L9 * (-t631 + t632);
      t645 = -t387 * t605 + t418 * t620 - t423 * t620 - t251 * t612 + t430 * t598 + t435 * t596 - 0.5000000000e0 * t406 * L8 * t316 + t376 * m6 * t634 + t381 * m6 * t634 + t392 * m6 * t640 + t370 * m6 * t640;
      jac__4_2 = -0.1250000000e0 * t258 + 0.1250000000e0 * t263 + 0.1250000000e0 * t268 - 0.1250000000e0 * t273 + 0.1250000000e0 * t278 - 0.1250000000e0 * t283 - 0.1250000000e0 * t288 + 0.1250000000e0 * t293 + 0.5000000000e0 * t298 - 0.5000000000e0 * t303 + t575 + t459 * (m6 * t579 - t581) + t463 * t586 + t467 * t586 + t397 * t589 + t444 * (-m6 * t579 + t581) + t452 * t596 + t448 * t598 + t401 * t589 + t409 * t605 + t364 * t612 + t645;
      t647 = 0.2500000000e0 * IZ6;
      t657 = L5 * L6;
      t672 = 0.5000000000e0 * t33;
      t673 = 0.5000000000e0 * IX5;
      t681 = theta5 + phi2;
      t683 = cos(2 * t681);
      t685 = phi2 + theta6 + theta5;
      t687 = cos(2 * t685);
      t689 = phi2 - theta6 + theta5;
      t691 = cos(2 * t689);
      t694 = sin(t39 + phi2 + theta6);
      t699 = sin(t39 + phi2 - theta6);
      t703 = t224 + t647 - 0.5000000000e0 * t14 + t30 + t116 * (0.4e1 * m4 + m5) + m6 * (0.1875e0 * t3 + t64 + 0.5e0 * t16 + t116 + 0.5000000000e0 * t32) + t77 * (0.2e1 * m6 * t657 + 0.2e1 * m5 * t657) + t81 * (0.2e1 * t601 + 0.2e1 * t603) + t9 * (0.6250000000e-1 * t4 - t647) + t40 * (0.5000000000e0 * t35 + t672 - t673) + t683 * (m6 * (0.5000000000e0 * t16 + 0.6250000000e-1 * t3) - t647) + t687 * t598 + t691 * t598 + t672 + t673 - 0.2500000000e0 * t694 * m6 * t22 + 0.2500000000e0 * t699 * m6 * t22;
      t705 = sin(theta6 + t39 + t1);
      t710 = sin(-theta6 + t39 + t1);
      t714 = sin(t689);
      t715 = t714 * L9;
      t718 = cos(t681);
      t722 = sin(t685);
      t723 = t722 * L9;
      t727 = cos(t39 + phi2);
      t731 = sin(theta6 + phi1);
      t736 = sin(-theta6 + phi1);
      t741 = cos(phi1 - theta5 - phi2);
      t743 = t741 * m6 * t305;
      t745 = cos(phi1 + theta5 + phi2);
      t747 = t745 * m6 * t305;
      t749 = sin(phi2 + theta6);
      t754 = sin(phi2 - theta6);
      t759 = sin(theta5 + phi2 + theta6 + phi1);
      t761 = t759 * m6 * t109;
      t764 = sin(theta5 + phi2 - theta6 + phi1);
      t766 = t764 * m6 * t109;
      t769 = sin(-theta5 - phi2 + theta6 + phi1);
      t771 = t769 * m6 * t109;
      t774 = sin(-theta5 - phi2 - theta6 + phi1);
      t776 = t774 * m6 * t109;
      t779 = cos(theta5 + phi1);
      t783 = cos(-theta5 + phi1);
      t786 = -0.2500000000e0 * t705 * L9 * t149 + 0.2500000000e0 * t710 * L9 * t149 + 0.5000000000e0 * t715 * t316 + 0.2000000000e1 * t718 * L8 * t316 - 0.5000000000e0 * t723 * t316 + t727 * L8 * t28 - 0.5000000000e0 * t731 * m6 * t109 - 0.5000000000e0 * t736 * m6 * t109 + t743 + t747 - 0.2500000000e0 * t749 * m6 * t22 + 0.2500000000e0 * t754 * m6 * t22 - 0.2500000000e0 * t761 + 0.2500000000e0 * t766 - 0.2500000000e0 * t771 + 0.2500000000e0 * t776 + t779 * t65 * t249 + t783 * t65 * t249;
      jac__4_4 = t703 + t786;
      t788 = cos(-t8 + theta5 + phi2);
      t792 = cos(t8 + theta5 + phi2);
      t796 = sin(theta5 + theta6);
      t801 = sin(theta5 - theta6);
      t811 = t783 * L7;
      jac__4_5 = -0.2500000000e0 * IZ6 * t788 + 0.2500000000e0 * IZ6 * t792 - 0.2500000000e0 * t796 * m6 * t22 - 0.2500000000e0 * t801 * m6 * t22 + 0.1250000000e0 * t776 + t743 / 2 - t747 / 2 - t779 * m5 * t249 / 2 + t811 * t609 / 2 - t779 * L7 * t609 / 2 + t811 * L6 * m5 / 2 - 0.2500000000e0 * t723 * t149 - 0.2500000000e0 * t715 * t149 - 0.1250000000e0 * t766 - 0.1250000000e0 * t771 + 0.1250000000e0 * t761 + 0.6250000000e-1 * t788 * t4 - 0.6250000000e-1 * t792 * t4;
      t837 = L6 * t112;
      t838 = 0.5e0 * L9;
      jac__4_6 = 0.5e0 * m6 * L9 * (t11 * (t81 * (L7 + t29) + L5 - 0.1e1 * t85 * t98 + t78) + t81 * t23 * (t837 - t838) + t85 * t49 * (-0.1e1 * t837 + t838));
      t850 = 0.5000000000e0 * IZ6;
      t851 = -0.1250000000e0 * t4 + t850;
      t857 = t472 * t85;
      t867 = -0.5000000000e0 * L9 * t316 - 0.5000000000e0 * t207 * t78;
      t898 = 0.5000000000e0 * t149 * t151;
      t900 = m6 * t110 * t305;
      t904 = 0.5000000000e0 * m6 * t51 * t150;
      jac__5_2 = t138 * (t81 * t472 * t23 * t851 - t857 * t49 * t851) + t9 * t477 * t851 + t477 * (t81 * (t23 * (t11 * t867 + t79 * t149) + t79 * t75) + t23 * (-0.1e1 * t207 * L7 * t11 + 0.2000000000e1 * L8 * t28) + t85 * t49 * (-t11 * t867 - 0.1e1 * t149 * t78 - 0.1e1 * m6 * t105) - 0.1e1 * t14 + m6 * (t32 + t16 + 0.1250000000e0 * t3) + t850 + t33) + t81 * t472 * (t23 * (t898 - 0.1e1 * t900 + t904) + t110 * (-0.1e1 * t607 - 0.1e1 * t610) + 0.5000000000e0 * t157 * t22) + t857 * t49 * (-t898 + t900 - t904);
      jac__5_4 = jac__4_5;
      jac__5_5 = t9 * t851 + t11 * (-0.1e1 * L9 * t149 - 0.1e1 * t71 * t22) + 0.2e1 * t30 + m6 * (t32 + t16 + 0.125e0 * t3) + t33 + t850;
      jac__5_6 = -0.25e0 * (t749 + t754) * m6 * t22;
      t937 = L5 - 0.1e1 * L8;
      t943 = -0.1e1 * t516 - 0.1e1 * t517 + t518 + t519 + t520 + t523 + t376 * t937 + t381 * t937 + t526 - 0.1e1 * t527 - 0.1e1 * t528 + t529 + t532 + t535 + t536 - 0.1e1 * t537 + t540 + t541;
      jac__6_2 = -0.125e0 * m6 * L9 * t943;
      jac__6_4 = jac__4_6;
      jac__6_5 = jac__5_6;
      jac__6_6 = 0.25e0 * t4;
      
      % store on output
      jac__Mass = zeros(6,6);
      jac__Mass(1,1) = jac__1_1;
      jac__Mass(2,2) = jac__2_2;
      jac__Mass(2,4) = jac__2_4;
      jac__Mass(2,5) = jac__2_5;
      jac__Mass(2,6) = jac__2_6;
      jac__Mass(3,3) = jac__3_3;
      jac__Mass(4,2) = jac__4_2;
      jac__Mass(4,4) = jac__4_4;
      jac__Mass(4,5) = jac__4_5;
      jac__Mass(4,6) = jac__4_6;
      jac__Mass(5,2) = jac__5_2;
      jac__Mass(5,4) = jac__5_4;
      jac__Mass(5,5) = jac__5_5;
      jac__Mass(5,6) = jac__5_6;
      jac__Mass(6,2) = jac__6_2;
      jac__Mass(6,4) = jac__6_4;
      jac__Mass(6,5) = jac__6_5;
      jac__Mass(6,6) = jac__6_6;
    end


   
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res__Phi = Phi( self, t,vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = -s - L3 - L4;
      t2 = cos(theta2);
      t4 = cos(theta4);
      res__1 = t4 * L5 + t2 * t1;
      t6 = sin(theta2);
      t8 = sin(theta4);
      res__2 = L5 * t8 + t6 * t1 - L1 + L2;
      
      % store on output
      res__Phi = zeros(2,1);
      res__Phi(1) = res__1;
      res__Phi(2) = res__2;
    end


    
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__DPhiDp = DPhiDp(self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      % evaluate function
      t1 = cos(theta2);
      jac__1_1 = -t1;
      t2 = L3 + L4 + s;
      t3 = sin(theta2);
      jac__1_3 = t3 * t2;
      t4 = sin(theta4);
      jac__1_4 = -L5 * t4;
      jac__2_1 = -t3;
      jac__2_3 = -t2 * t1;
      t7 = cos(theta4);
      jac__2_4 = t7 * L5;
      
      % store on output
      jac__DPhiDp = zeros(2,6);
      jac__DPhiDp(1,1) = jac__1_1;
      jac__DPhiDp(1,3) = jac__1_3;
      jac__DPhiDp(1,4) = jac__1_4;
      jac__DPhiDp(2,1) = jac__2_1;
      jac__DPhiDp(2,3) = jac__2_3;
      jac__DPhiDp(2,4) = jac__2_4;
    end


    
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__DPhiDt = DPhiDt( self, t,vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      % evaluate function

      % store on output
      jac__DPhiDt = zeros(2,1);
    end
    
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res__A = A(self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = sin(theta2);
      t3 = L3 + L4 + s;
      t5 = cos(theta2);
      t8 = sin(theta4);
      res__1 = -t8 * theta4__dot * L5 + t3 * t1 * theta2__dot - s__dot * t5;
      t13 = cos(theta4);
      res__2 = L5 * t13 * theta4__dot - t5 * theta2__dot * t3 - t1 * s__dot;
      
      % store on output
      res__A = zeros(2,1);
      res__A(1) = res__1;
      res__A(2) = res__2;
    end

  
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__DADp = DADp( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = sin(theta2);
      jac__1_1 = t1 * theta2__dot;
      t2 = L3 + L4 + s;
      t4 = cos(theta2);
      jac__1_3 = t4 * theta2__dot * t2 + t1 * s__dot;
      t7 = cos(theta4);
      jac__1_4 = -L5 * t7 * theta4__dot;
      jac__2_1 = -t4 * theta2__dot;
      jac__2_3 = t2 * t1 * theta2__dot - s__dot * t4;
      t15 = sin(theta4);
      jac__2_4 = -t15 * theta4__dot * L5;
      
      % store on output
      jac__DADp = zeros(2,6);
      jac__DADp(1,1) = jac__1_1;
      jac__DADp(1,3) = jac__1_3;
      jac__DADp(1,4) = jac__1_4;
      jac__DADp(2,1) = jac__2_1;
      jac__DADp(2,3) = jac__2_3;
      jac__DADp(2,4) = jac__2_4;
    end

    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__DADt = DADt( self, t, vars__ )
      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      
      % store on output
      jac__DADt = zeros(2,1);
    end

    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res__B = B( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = theta2__dot ^ 2;
      t2 = cos(theta2);
      t4 = L3 + L4 + s;
      t6 = sin(theta2);
      t10 = theta4__dot ^ 2;
      t12 = cos(theta4);
      res__1 = t12 * t10 * L5 - 2 * s__dot * t6 * theta2__dot - t4 * t2 * t1;
      t19 = sin(theta4);
      res__2 = L5 * t19 * t10 + 2 * t2 * theta2__dot * s__dot - t6 * t1 * t4;
      
      % store on output
      res__B = zeros(2,1);
      res__B(1) = res__1;
      res__B(2) = res__2;
    end



    function res__gfun = gfun( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      if(self.with_profiles)
        c1 = self.c1(round(t*10000)+1);          
        c5 = self.c5(round(t*10000)+1);
        c6 = self.c6(round(t*10000)+1);
        prism = self.prism(round(t*10000)+1);
      else
        c1 = self.c1;        
        c5 = self.c5;
        c6 = self.c6;
        prism = self.prism;
      end

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t3 = theta1__dot ^ 2;
      t5 = cos(theta2);
      t6 = t5 ^ 2;
      t9 = sin(theta2);
      t14 = theta2__dot ^ 2;
      res__1 = t6 * m3 * t3 * (s + L3 + 0.5000000000e0 * L4) - 0.9810000000e1 * m3 * t9 + m3 * t14 * (s + L3 + 0.5e0 * L4) + prism;
      t17 = L9 ^ 2;
      t18 = t17 * m6;
      t20 = IZ6 / 2;
      t21 = t18 / 8 - t20;
      t22 = 2 * theta6;
      t23 = cos(t22);
      t25 = sin(theta6);
      t26 = t25 * m6;
      t27 = L8 * L9;
      t28 = t27 * t26;
      t29 = L8 ^ 2;
      t30 = t17 / 8;
      t31 = -t29 - t30;
      t32 = m6 * t31;
      t33 = t23 * t21 + t20 + t28 + t32;
      t34 = 2 * phi2;
      t35 = sin(t34);
      t37 = sin(phi2);
      t38 = t37 * m6;
      t39 = L9 * t25;
      t41 = t39 - 2 * L8;
      t42 = t41 * L7;
      t46 = 2 * theta5;
      t47 = sin(t46);
      t55 = cos(t34);
      t57 = m6 * L7;
      t58 = cos(phi2);
      t61 = L7 ^ 2;
      t62 = t61 * m5;
      t63 = m6 * t61;
      t66 = cos(t46);
      t70 = t18 - 4 * IZ6;
      t71 = t58 * theta6__dot;
      t72 = cos(theta5);
      t75 = t37 * theta6__dot;
      t76 = sin(theta5);
      t84 = t37 * t72;
      t87 = sin(t22);
      t88 = t87 * t70;
      t91 = L6 ^ 2;
      t92 = t91 * theta4__dot;
      t93 = m5 + m6;
      t94 = 2 * phi1;
      t95 = cos(t94);
      t99 = m6 * theta5__dot;
      t100 = sin(phi1);
      t101 = t25 * t100;
      t102 = L6 * L9;
      t104 = L6 * t100;
      t105 = L8 * t104;
      t107 = cos(theta6);
      t109 = L9 * L8 * t107;
      t110 = t102 * t101 - 2 * t105 + t109;
      t114 = cos(phi1);
      t116 = L6 * t114 * theta4__dot;
      t117 = theta4__dot * L5;
      t118 = theta6__dot * L8;
      t125 = L9 * L6 * t107;
      t128 = theta4__dot * L8;
      t130 = L6 * t114 + L5;
      t133 = t25 * (t116 + t117 - t118 / 2) * L9 + t125 * t100 * theta6__dot / 2 - 2 * t130 * t128;
      t137 = t107 * m6;
      t138 = L9 * t137;
      t141 = -t138 / 2 + t93 * t104;
      t149 = t41 * L7 * theta4__dot;
      t159 = m6 * theta6__dot;
      t168 = m6 * L9;
      t170 = L6 * t114 * theta6__dot;
      t171 = theta6__dot * L5;
      t176 = t100 * m6;
      t179 = L6 * L5;
      t183 = L5 ^ 2;
      t199 = t47 * (t35 * t33 + t42 * t38) * theta4__dot / 8 + t66 * (t55 * (-m6 * t31 - t23 * t21 - t20 - t28) - t58 * t41 * t57 + t62 + t63 - IX5) * theta4__dot / 8 - 0.3e1 / 0.64e2 * t23 * (-0.4e1 / 0.3e1 * t72 * t71 + 0.4e1 / 0.3e1 * t76 * t75 + theta4__dot) * t70 - t88 * (t58 * t76 + t84) * theta5__dot / 32 + t95 * t93 * t92 / 4 + t76 * (t58 * t110 * t99 / 8 + t37 * t133 * m6 / 4 - L7 * t141 * theta5__dot / 4) - t58 * (t72 * t133 + t149 / 2) * m6 / 4 + t37 * t110 * t72 * t99 / 8 + t72 * L7 * (t39 * t159 / 4 + t93 * t130 * theta4__dot) / 2 - t25 * (-t170 + t128 - t171) * t168 / 8 + (t125 * t176 / 4 + t114 * t93 * t179 / 2 + m6 * (t183 / 4 + t61 / 8 + t29 / 8 - t17 / 64) + t62 / 8 + IZ6 / 16 + t183 * (m4 + m5 / 4) - IX4 / 4 - IX5 / 8) * theta4__dot;
      t201 = 2 * theta4;
      t202 = sin(t201);
      t205 = theta5__dot * t33;
      t213 = theta6__dot * (t87 * (-t18 / 4 + IZ6) + t137 * t27);
      t220 = L9 * t107;
      t221 = L7 * t220;
      t222 = t221 * t37 * t159;
      t224 = t62 + t63 - IX5;
      t225 = t224 * theta5__dot;
      t235 = t37 * theta5__dot;
      t243 = t58 * theta4__dot;
      t252 = sin(t94);
      t256 = t130 * t41;
      t260 = t100 * theta4__dot;
      t262 = L9 * L6 * t25;
      t269 = L6 * L8;
      t272 = t262 * t260 + t107 * (-t170 / 2 + t128 - t171 / 2) * L9 - 2 * t269 * t260;
      t283 = t107 * theta6__dot;
      t284 = L9 * L7;
      t308 = t47 * (-t55 * t205 / 4 - t35 * t213 / 8 - t58 * t42 * t99 / 4 - t222 / 8 + t225 / 4) + t66 * (t55 * t213 / 8 - t35 * t205 / 4 - L7 * m6 * (-t220 * t71 / 2 + t41 * t235) / 4) + t87 * (t72 * t243 - t76 * t37 * theta4__dot - 0.3e1 / 0.4e1 * theta6__dot) * t70 / 8 + t252 * t93 * t92 / 2 + t76 * (-t58 * t256 * t99 / 4 + t37 * t272 * m6 / 2 + t93 * t130 * theta5__dot * L7 / 2) - t58 * (t72 * t272 - t284 * t283 / 4) * m6 / 2 - t37 * t256 * t72 * t99 / 4 + t72 * L7 * t141 * theta4__dot + t262 * t100 * t159 / 4 - t107 * (t116 + t117 - t118 / 4) * t168 / 2 + t93 * t179 * t260;
      t310 = cos(t201);
      t313 = theta4__dot ^ 2;
      t314 = cos(theta4);
      t316 = theta1__dot * theta5__dot;
      t317 = t314 * t313 + t316;
      t320 = theta4__dot * theta6__dot;
      t321 = sin(theta4);
      t322 = t70 * t321;
      t326 = theta4__dot * m6;
      t327 = theta6__dot * t326;
      t332 = t28 + t32 + t20;
      t335 = 8 * t27 * t321 * t107 * t327 + t23 * t70 * t317 - 2 * t87 * t322 * t320 + 8 * t317 * t332;
      t337 = theta4__dot * theta5__dot;
      t341 = theta1__dot * theta6__dot;
      t346 = t107 * t341;
      t347 = L8 * m6;
      t348 = L9 * t347;
      t349 = t348 * t346;
      t351 = -2 * t23 * t322 * t337 - 16 * t321 * t332 * t337 - t88 * t341 + 4 * t349;
      t358 = t58 * L7;
      t361 = theta5__dot * t326;
      t363 = t321 * t41;
      t368 = t341 * t38 * t221;
      t402 = theta5__dot * theta6__dot;
      t407 = t72 * t314;
      t420 = (theta4__dot - theta5__dot) * (theta4__dot + theta5__dot);
      t427 = t314 * theta5__dot;
      t436 = s + L3 + L4 / 2;
      t437 = t436 ^ 2;
      t439 = L3 ^ 2;
      t440 = t439 * m2;
      t444 = 2 * theta2;
      t445 = sin(t444);
      t448 = theta1__dot * t436;
      t449 = s__dot * m3;
      t450 = cos(t444);
      t453 = theta5__dot ^ 2;
      t454 = theta6__dot ^ 2;
      t455 = t313 - t453 - t454;
      t459 = t313 - t453 + t454;
      t467 = t25 * t455 * L9 * t104 - 2 * (-t107 * t459 * L9 / 2 + t420 * t104) * L8;
      t471 = L5 * t313;
      t472 = L8 * t320;
      t481 = t25 * (t314 * (-t114 * t455 * L6 - t471 + 2 * t472 + (t453 + t454) * L5) + t130 * t316) * L9;
      t482 = t313 * t269;
      t487 = L8 * t471;
      t489 = t17 * t320;
      t495 = t314 * (t114 * (-2 * t453 * t269 + 2 * t482) + 2 * t487 - t489 / 2 - 2 * L8 * L5 * t453);
      t498 = 2 * t130 * L8 * t316;
      t508 = L6 * t107 * t100 - L9 / 4;
      t525 = 2 * t427 + theta1__dot;
      t530 = L9 * t314;
      t583 = L9 * L7 * t25;
      t592 = t314 * t27;
      res__2 = 4 * t202 * theta1__dot * t199 + 2 * t310 * t308 * theta1__dot + t47 * (t55 * t335 + t35 * t351 + 8 * t358 * (t321 * t220 * t320 + t317 * t41) * m6 - 16 * t363 * L7 * t37 * t361 + 4 * t368 - 8 * t224 * t317) / 16 + t66 * (-t55 * t351 + t35 * t335 - 4 * t358 * m6 * (t220 * t341 - 4 * t363 * t337) - 16 * t321 * (-t222 / 2 + t225) * theta4__dot + 8 * t317 * t42 * t38) / 16 - t23 * t70 * (2 * t76 * (t321 * t235 + t314 * t243) * theta6__dot - 2 * t58 * t321 * t72 * t402 + (t321 * theta5__dot + 2 * t407 * t75) * theta4__dot) / 8 - t87 * (-2 * t76 * t420 * t321 * t58 - 2 * t321 * t420 * t84 + (4 * t427 + theta1__dot) * theta6__dot) * t70 / 16 + t445 * theta1__dot * (m3 * t437 + t440 / 4 - IX2 - IX3) * theta2__dot - t450 * t449 * t448 + t76 * (-8 * t58 * m6 * (t321 * t467 + t481 + t495 - t498) + t321 * (16 * t37 * t508 * theta6__dot * L9 * theta5__dot * m6 + 16 * L7 * (-t107 * t459 * t168 / 2 + t93 * t420 * t104)) - 8 * t37 * t525 * t130 * L9 * t107 * t159 + 16 * L7 * (-t25 * t530 * t327 + t93 * (t314 * (-t313 + t453) + t316) * t130)) / 16 + t58 * (-2 * t321 * theta5__dot * (t72 * t508 * theta6__dot * L9 + t149) + t283 * (t72 * t525 * t130 + 0.3e1 / 0.2e1 * L7 * (0.4e1 / 0.3e1 * t427 + theta1__dot)) * L9) * m6 / 2 + t321 * (-8 * t37 * m6 * (t221 * t320 + t72 * t467) + 16 * theta5__dot * theta4__dot * (-t28 + m6 * (t61 + t29 + t30) + t62 + t20)) / 16 - t37 * (t72 * (t481 + t495 - t498) + t583 * t314 * t454) * m6 / 2 - t341 * t176 * t262 / 2 + t402 * t137 * t592 + 0.3e1 / 0.4e1 * t349 - t449 * t448 + c1;
      t602 = s ^ 2;
      t604 = L4 ^ 2;
      res__3 = t5 * (t9 * (m3 * t3 * (-0.1e1 * t439 + (-0.1e1 * L4 - 0.2e1 * s) * L3 - 0.1e1 * t602 - 0.2500000000e0 * t604 - 0.1e1 * s * L4) + t3 * (-0.2500000000e0 * t440 + IX2 + IX3)) + (-0.4905e1 * L4 - 0.9810000000e1 * s - 0.981e1 * L3) * m3 - 0.4905000000e1 * L3 * m2) + (-0.1e1 * L4 * s__dot * theta2__dot - 0.2e1 * s * s__dot * theta2__dot - 0.2e1 * L3 * s__dot * theta2__dot) * m3;
      t636 = m6 * t3;
      t637 = t17 * t636;
      t639 = IZ6 * t3;
      t640 = 0.1250000000e0 * t639;
      t641 = 0.3125000000e-1 * t637 - t640;
      t642 = t55 * t641;
      t644 = t3 * t26;
      t646 = 0.2500000000e0 * t644 * t27;
      t647 = 0.3125000000e-1 * t17;
      t648 = 0.2500000000e0 * t29;
      t649 = -t647 - t648;
      t652 = m6 * t3 * t649 + t640 + t646;
      t654 = L7 * L8;
      t659 = -0.5000000000e0 * t654 * t636 + 0.2500000000e0 * t644 * t284;
      t660 = t58 * t659;
      t661 = t61 * t3;
      t664 = 0.2500000000e0 * t62;
      t665 = 0.2500000000e0 * IX5;
      t666 = -t664 + t665;
      t668 = t23 * t642 + t55 * t652 + t660 - 0.2500000000e0 * m6 * t661 + t3 * t666;
      t671 = -t35 * t641;
      t674 = -t3 * t649;
      t682 = 0.9375000000e-1 * t637;
      t683 = 0.3750000000e0 * t639;
      t691 = -0.5000000000e0 * t91 * m5 * t3 - 0.5000000000e0 * t91 * t636;
      t693 = m6 * t114;
      t694 = t3 * t693;
      t695 = t694 * t102;
      t697 = L5 * L9;
      t698 = t697 * t636;
      t700 = 0.5000000000e0 * t695 + 0.5000000000e0 * t698;
      t702 = L5 * L8;
      t703 = t702 * t636;
      t705 = t694 * t269;
      t709 = L6 * L7;
      t710 = t709 * t636;
      t712 = t3 * L6;
      t713 = L7 * m5;
      t714 = t713 * t712;
      t716 = -0.1e1 * t710 - 0.1e1 * t714;
      t718 = t3 * L5;
      t719 = t713 * t718;
      t721 = L5 * L7;
      t722 = t721 * t636;
      t733 = t3 * t176;
      t738 = L6 * m5;
      t741 = -0.1e1 * t179 * t636 - 0.1e1 * t738 * t718;
      t756 = t66 * t668 + t47 * (t23 * t671 + t35 * (m6 * t674 - t640 - t646) - t37 * t659) + t23 * (t682 - t683) + t95 * t691 + t72 * (t58 * (t25 * t700 - 0.1e1 * t703 - 0.1e1 * t705) + t114 * t716 - 0.1e1 * t719 - 0.1e1 * t722) + t660 + t37 * t76 * (t130 * t3 * t347 - t25 * t700) - 0.5000000000e0 * t733 * t125 + t646 + t114 * t741 + m6 * t3 * (-0.2500000000e0 * t61 - t648 + t647 - 0.5000000000e0 * t183) + t3 * (-t664 + t183 * (-0.2000000000e1 * m4 - 0.5000000000e0 * m5) + t665 + 0.5000000000e0 * IX4 - 0.1250000000e0 * IZ6);
      t758 = t316 * t18;
      t760 = theta1__dot * IZ6;
      t761 = theta5__dot * t760;
      t762 = 0.5000000000e0 * t761;
      t763 = 0.1250000000e0 * t758 - t762;
      t764 = t321 * t763;
      t766 = t337 * t18;
      t768 = theta4__dot * IZ6;
      t769 = theta5__dot * t768;
      t770 = 0.5000000000e0 * t769;
      t771 = -0.1250000000e0 * t766 + t770;
      t775 = t320 * t18;
      t776 = 0.1250000000e0 * t775;
      t777 = theta6__dot * t768;
      t778 = 0.5000000000e0 * t777;
      t779 = -t776 + t778;
      t781 = t25 * t27;
      t782 = theta1__dot * m6;
      t783 = theta5__dot * t782;
      t784 = t783 * t781;
      t785 = theta5__dot * t17;
      t786 = 0.1250000000e0 * t785;
      t787 = theta5__dot * t29;
      t795 = 0.5000000000e0 * t327 * t109;
      t798 = t341 * t18;
      t800 = theta6__dot * t760;
      t805 = m6 * t321;
      t809 = t361 * t781;
      t818 = t87 * t321 * (-0.1250000000e0 * t798 + 0.5000000000e0 * t800) + 0.5000000000e0 * t341 * t805 * t109 - 0.1e1 * t809 + m6 * (theta5__dot * theta4__dot * t29 + 0.1250000000e0 * theta5__dot * theta4__dot * t17) - t770;
      t821 = 0.2000000000e1 * t783 * t654;
      t822 = t783 * t583;
      t828 = 0.1e1 * t62;
      t834 = m6 * t58;
      t842 = -0.1e1 * t361 * t583 + 0.2000000000e1 * t361 * t654;
      t855 = 0.1e1 * t784;
      t884 = 0.2500000000e0 * t798;
      t885 = t800 - t884;
      t886 = t314 * t885;
      t888 = 0.2500000000e0 * t402 * t18;
      t890 = IZ6 * theta5__dot * theta6__dot;
      t891 = t886 - t888 + t890;
      t900 = -0.1250000000e0 * t637 + 0.5000000000e0 * t639;
      t906 = -t37 * t76 * t900 + t72 * t58 * t900;
      t908 = 0.2500000000e0 * t758;
      t909 = t761 - t908;
      t912 = 0.5000000000e0 * t453 * IZ6;
      t914 = 0.1250000000e0 * t453 * t18;
      t919 = -0.1e1 * t761 + t908;
      t920 = t314 * t919;
      t927 = t733 * t262;
      t928 = 0.5000000000e0 * t927;
      t929 = t733 * t269;
      t932 = t348 * t107 * t3;
      t933 = 0.5000000000e0 * t932;
      t936 = t3 * t137;
      t937 = t936 * t284;
      t954 = 0.2000000000e1 * t783 * t702;
      t955 = t114 * t269;
      t957 = 0.2000000000e1 * t783 * t955;
      t963 = theta1__dot * m5;
      t969 = -0.2000000000e1 * theta5__dot * t963 * t709 - 0.2000000000e1 * t783 * t709;
      t974 = m6 * L5;
      t980 = t783 * t592;
      t981 = t114 * t102;
      t982 = t327 * t981;
      t984 = 0.5000000000e0 * t453 * L8;
      t986 = 0.5000000000e0 * t454 * L8;
      t987 = theta6__dot * t117;
      t994 = t783 * t100 * t102;
      t995 = 0.4905000000e1 * t168;
      t1002 = 0.5000000000e0 * t454 * L6 + 0.5000000000e0 * t453 * L6;
      t1007 = 0.9810000000e1 * t347;
      t1010 = -t1007 - 0.2000000000e1 * t783 * t105;
      t1013 = t453 * t176 * t269;
      t1020 = t314 * theta1__dot + theta5__dot;
      t1031 = t314 * t17;
      t1032 = theta6__dot * t782;
      t1043 = t107 * t1020 * t168 * t100 * theta6__dot * L6 + t25 * (-0.1e1 * L9 * t974 * t337 - 0.1e1 * t361 * t981) - 0.2500000000e0 * t1032 * t1031 + 0.2000000000e1 * t361 * t955 + m6 * (0.2000000000e1 * t337 * t702 - 0.2500000000e0 * theta6__dot * t785);
      t1046 = t783 * t314 * t284;
      t1048 = 0.5000000000e0 * t453 * L7;
      t1057 = 0.9810000000e1 * t713;
      t1058 = 0.9810000000e1 * t57;
      t1090 = m6 * L6;
      t1092 = 0.9810000000e1 * t738 + 0.9810000000e1 * t1090;
      t1095 = 0.1e1 * t29;
      t1112 = 0.1e1 * t980;
      res__4 = t202 * t756 + t66 * (t23 * (t35 * t771 + t55 * t764) + t55 * (t87 * t779 + t321 * (t784 + m6 * theta1__dot * (-t786 - 0.1e1 * t787) + t762) + t795) + t35 * t818 + t321 * (t58 * (-t821 + t822) + 0.5000000000e0 * t368 - 0.1e1 * t316 * t63 + theta1__dot * theta5__dot * (IX5 - t828)) + 0.5000000000e0 * t320 * t834 * t221 + t37 * t842) + t47 * (t23 * (-t35 * t321 * t763 + t55 * t771) + t55 * t818 + t35 * (-t87 * t779 + t321 * (-t855 + m6 * theta1__dot * (t787 + t786) - t762) - t795) + t321 * (0.5000000000e0 * t341 * t834 * t221 + t37 * (-0.1e1 * t822 + t821)) + t58 * t842 - 0.5000000000e0 * t320 * t38 * t221 + t337 * t63 + theta5__dot * (t61 * m5 * theta4__dot - 0.1e1 * theta4__dot * IX5)) + t23 * (t72 * t37 * t891 + t58 * t76 * t891 + t764) + t87 * (t310 * t906 + t72 * t58 * (t314 * t909 + t912 - t914) + t37 * t76 * (t920 - t912 + t914) + t776 - t778) + t310 * (t252 * t691 + t72 * (t58 * (t928 - 0.1e1 * t929 + t933) + 0.5000000000e0 * t937 + t100 * t716) + t37 * t76 * (-t928 + t929 - t933) + t107 * t700 + t100 * t741) + t72 * (t321 * (t58 * (t25 * t130 * m6 * L9 * t316 - t954 - t957) + t37 * t130 * t168 * t346 + t114 * t969 - 0.2000000000e1 * m5 * t721 * t316 - 0.2000000000e1 * L7 * t974 * t316) + t58 * (t107 * (t980 + t982 + m6 * L9 * (t984 - t986 + t987)) + t25 * (t314 * (t994 + t995) + t176 * L9 * t1002) + t314 * t1010 - 0.1e1 * t1013) + t37 * t1043 + t107 * (t1046 + m6 * L9 * (t1048 - 0.5000000000e0 * t454 * L7)) + t314 * (t100 * t969 - t1057 - t1058) + t100 * (-0.1e1 * t453 * m5 * t709 - 0.1e1 * t453 * m6 * t709)) + t321 * (t58 * (t76 * t130 * t168 * t346 - t821 + t822) + t37 * (t76 * (t25 * (-0.1e1 * t783 * t981 - 0.1e1 * t783 * t697) + t957 + t954) + 0.5000000000e0 * t1032 * t221) - 0.4905000000e1 * t138 + t784 + t100 * t1092 + m6 * theta1__dot * (-t786 + theta5__dot * (-0.1e1 * t61 - t1095)) + theta1__dot * theta5__dot * (-0.500000000e0 * IZ6 - t828)) + t58 * (t76 * t1043 + 0.5000000000e0 * t327 * t221) + t37 * t76 * (t107 * (-t1112 - 0.1e1 * t982 + m6 * L9 * (-t984 + t986 - 0.1e1 * t987)) + t25 * (t314 * (-0.1e1 * t994 - t995) - t176 * L9 * t1002) - t314 * t1010 + t1013) + t76 * (t114 * (0.2000000000e1 * m5 * t709 * t337 + 0.2000000000e1 * L7 * t1090 * t337) + 0.2e1 * m5 * t337 * t721 + 0.2e1 * t361 * t721) + t107 * (-0.5000000000e0 * t454 * t693 * t102 + m6 * L9 * (-0.5000000000e0 * L5 * t454 + 0.5000000000e0 * t472)) - 0.1e1 * t320 * t176 * t262 + t314 * (-t114 * t1092 - 0.9810000000e1 * t974 + (-0.9810e1 * m5 - 0.1962e2 * m4) * L5);
      t1179 = 0.2500000000e0 * IZ6 * t313;
      t1180 = m6 * (-0.3125000000e-1 * t3 * t17 + 0.6250000000e-1 * t17 * t313) - t1179 + t640;
      t1182 = theta4__dot * theta1__dot;
      t1183 = t1182 * t18;
      t1184 = 0.1250000000e0 * t1183;
      t1185 = theta1__dot * t768;
      t1186 = 0.5000000000e0 * t1185;
      t1187 = t1184 - t1186;
      t1188 = t321 * t1187;
      t1189 = t35 * t1188;
      t1205 = t25 * m6 * (-0.2500000000e0 * t3 * t27 + 0.5000000000e0 * t313 * t27) + m6 * (t674 + t313 * (-0.5000000000e0 * t29 - 0.6250000000e-1 * t17)) + t1179 - t640;
      t1207 = theta4__dot * t782;
      t1208 = t1207 * t781;
      t1209 = 0.1250000000e0 * t17;
      t1219 = t1182 * t38;
      t1228 = m6 * (-0.2500000000e0 * t3 * t284 + 0.5000000000e0 * t313 * t284);
      t1235 = m6 * (-0.1e1 * t313 * t654 + 0.5000000000e0 * t3 * t654);
      t1254 = t3 * t38;
      t1278 = 0.2000000000e1 * t1207 * t654;
      t1288 = t25 * t37;
      t1295 = 0.2500000000e0 * t698 + 0.2500000000e0 * t695;
      t1297 = 0.5000000000e0 * t705;
      t1298 = 0.5000000000e0 * t703;
      t1302 = 0.5000000000e0 * t714;
      t1303 = -0.5000000000e0 * t710 - t1302;
      t1305 = 0.5000000000e0 * t719;
      t1325 = t777 - 0.2500000000e0 * t775;
      t1334 = -0.2500000000e0 * t639 + 0.6250000000e-1 * t637;
      t1341 = 0.5000000000e0 * t929;
      t1342 = 0.2500000000e0 * t927;
      t1343 = 0.2500000000e0 * t932;
      t1351 = t25 * t72;
      t1354 = t636 * t100 * t37;
      t1362 = 0.2500000000e0 * t1183;
      t1369 = t314 * (t1362 - 0.1e1 * t1185);
      t1378 = t1207 * t981;
      t1379 = theta6__dot * t27;
      t1381 = theta4__dot * t697;
      t1389 = 0.2000000000e1 * t1207 * t955;
      t1394 = -0.2000000000e1 * theta4__dot * t702 + 0.2500000000e0 * theta6__dot * t17;
      t1401 = 0.1e1 * t1378;
      t1419 = t72 * t284;
      t1431 = theta4__dot * t963;
      t1436 = 0.2000000000e1 * t1431 * t709 + 0.2000000000e1 * t1207 * t709;
      t1468 = t114 * m6 * (0.2500000000e0 * t3 * t102 + 0.5000000000e0 * t313 * t102) + m6 * (-0.1e1 * t320 * t27 + 0.5000000000e0 * t313 * t697 + 0.2500000000e0 * t3 * t697);
      t1475 = t114 * m6 * (-0.1e1 * t482 - 0.5000000000e0 * t3 * t269);
      t1481 = m6 * (-0.5000000000e0 * t3 * t702 - 0.1e1 * t487 + 0.2500000000e0 * t489);
      t1486 = t1182 * t176;
      t1492 = t1207 * t109;
      t1494 = 0.2000000000e1 * t1207 * t105;
      t1504 = t313 * m5;
      res__5 = t47 * (t310 * t668 + t23 * (t55 * t1180 + t1189) + t55 * t1205 + t35 * t321 * (t1208 + t782 * theta4__dot * (-t1095 - t1209) + t1186) + t321 * (-0.2000000000e1 * t1207 * t37 * t654 + t1219 * t583) + t58 * (t25 * t1228 + t1235) + m6 * (0.2500000000e0 * t661 - 0.5000000000e0 * t61 * t313) - t3 * t666 + t313 * (0.5000000000e0 * IX5 - 0.5000000000e0 * t62)) + t66 * (t310 * (t23 * t35 * t641 + t35 * t652 + 0.2500000000e0 * t1254 * t583 - 0.5000000000e0 * t1254 * t654) + t23 * (-t55 * t321 * t1187 + t35 * t1180) + t55 * t321 * (-0.1e1 * t1208 + t782 * theta4__dot * (t29 + t1209) - t1186) + t35 * t1205 + t321 * (t58 * (-0.1e1 * t1207 * t583 + t1278) + t1182 * t63 + theta1__dot * theta4__dot * (t62 - 0.1e1 * IX5)) + t1288 * t1228 + t37 * t1235) + t310 * (t76 * (t58 * (t25 * t1295 - t1297 - t1298) + t114 * t1303 - t1305 - 0.5000000000e0 * t722) + t1288 * t72 * t1295 + t37 * t72 * (-t1297 - t1298)) + t23 * (t321 * (t76 * t37 * t885 + t58 * t72 * (t884 - 0.1e1 * t800) - t1184 + t1186) + t76 * t58 * t1325 + t37 * t72 * t1325) + t202 * (t87 * (t37 * t72 * t1334 + t76 * t58 * t1334) + t76 * (t58 * (t1341 - t1342 - t1343) - t100 * t1303 - 0.2500000000e0 * t937) - 0.2500000000e0 * t1354 * t1351 * t102 + t37 * t72 * (t1341 - t1343)) + t87 * (t76 * t37 * t314 * (-t1362 + t1185) + t58 * t72 * t1369 + t886 - t888 + t890) + t321 * (t76 * (t58 * (t1007 - 0.4905000000e1 * m6 * t39) + t25 * t37 * (t1378 + m6 * theta1__dot * (-0.1e1 * t1379 + t1381)) + t37 * (m6 * theta1__dot * t1394 - t1389) + t1057 + t1058) + t58 * (t25 * (t72 * (-t1401 + m6 * theta1__dot * (t1379 - 0.1e1 * t1381)) - 0.1e1 * t1207 * t284) + t72 * (-m6 * theta1__dot * t1394 + t1389) + t1278) + t25 * (t1032 * t1419 - 0.4905000000e1 * t38 * t72 * L9 - 0.1e1 * t1207 * t27) + 0.9810000000e1 * t38 * t72 * L8 + t72 * (t114 * t1436 + 0.2000000000e1 * t1431 * t721 + 0.2000000000e1 * t1207 * t721) + t782 * theta4__dot * (t29 + t1209 + t61) + theta1__dot * theta4__dot * (t62 + 0.5000000000e0 * IZ6)) + t76 * (t58 * (t25 * t1468 + t1475 + t1481) + t25 * (t1486 * t37 * t314 * t102 - 0.1e1 * t327 * t284) + t37 * t314 * (t1492 - t1494) + t114 * (m6 * (-0.5000000000e0 * t3 * t709 - 0.1e1 * t313 * t709) - t1302 - 0.1e1 * t1504 * t709) + m6 * (-0.1e1 * t313 * t721 - 0.5000000000e0 * L7 * t718) - 0.1e1 * t1504 * t721 - t1305) + t58 * (-0.1e1 * t1207 * t101 * t407 * t102 + t72 * t314 * (-0.1e1 * t1492 + t1494) + t1020 * t168 * L7 * t283) + t25 * t37 * (t72 * t1468 - 0.5000000000e0 * t454 * m6 * t284) + t37 * t72 * (t1475 + t1481) + t72 * t314 * (t100 * t1436 - 0.1e1 * t1207 * t221) + t341 * t137 * t592 + m6 * t402 * t109 + c5;
      t1556 = 0.3125000000e-1 * t3;
      t1557 = 0.6250000000e-1 * t313;
      t1558 = -t1556 + t1557;
      t1594 = -t1295;
      t1596 = t3 * L7;
      t1609 = L8 * t3;
      t1612 = 0.2500000000e0 * t313 * L8;
      t1613 = 0.1250000000e0 * t1609 - t1612;
      t1619 = t1182 * t805;
      t1624 = 0.2500000000e0 * t313 * L7;
      t1625 = 0.1250000000e0 * t1596 - t1624;
      t1629 = t321 * t284;
      t1640 = 0.2500000000e0 * t766;
      t1641 = t1369 - 0.1e1 * t769 + t1640;
      t1697 = 0.4905000000e1 * m6 * t321 * L9;
      t1701 = -0.5000000000e0 * t313 * L6 - 0.2500000000e0 * t712;
      t1703 = t114 * L9;
      t1707 = -0.5000000000e0 * t471 - 0.2500000000e0 * t718;
      t1719 = t321 * (-0.1e1 * t1381 * t782 - t1401) - 0.1e1 * t1486 * t314 * t102;
      t1730 = -m6 * t1701;
      t1752 = -t1640 + t809 + 0.2500000000e0 * t1207 * t1031;
      res__6 = t87 * (t310 * (t47 * t671 + t66 * t642 + t682 - t683) + t66 * (t55 * (t17 * m6 * t1558 - t1179 + t640) + t1189) + t47 * (t55 * t1188 + t35 * (-t17 * m6 * t1558 + t1179 - t640)) + t920 + t17 * m6 * (t1556 - t1557 + 0.1250000000e0 * t453) - t912 + t1179 - t640) + t310 * (t66 * (-0.1250000000e0 * t3 * t834 * t221 - 0.1250000000e0 * t936 * t55 * t27) + t47 * (0.1250000000e0 * t936 * t35 * t27 + 0.1250000000e0 * t1254 * t221) + t107 * (t58 * (t72 * t1594 - 0.1250000000e0 * t168 * t1596) + t37 * t76 * t1295 - 0.1250000000e0 * t27 * t636) - t1342) + t66 * (t55 * t220 * m6 * t1613 - 0.5000000000e0 * t1619 * t107 * t35 * t27 + t107 * (t58 * L9 * m6 * t1625 - 0.5000000000e0 * t1219 * t1629)) + t23 * (t202 * t906 + t58 * (t72 * t321 * t909 + t76 * t1641) + t37 * (t76 * t321 * t919 + t72 * t1641)) + t47 * (-0.5000000000e0 * t1619 * t107 * t55 * t27 - t35 * t220 * m6 * t1613 + t107 * (-0.5000000000e0 * t1182 * t834 * t1629 - t37 * L9 * m6 * t1625)) + t202 * (t107 * (0.2500000000e0 * t636 * t100 * t58 * t72 * t102 - 0.2500000000e0 * t1354 * t76 * t102) - 0.2500000000e0 * t636 * t58 * t25 * t72 * t27 + 0.2500000000e0 * t636 * t1288 * t76 * t27 - 0.2500000000e0 * t644 * t1419 + t25 * t1594) + t107 * (t58 * (t72 * (L9 * m6 * t1707 + t1703 * m6 * t1701 + t1697) + t76 * t1719 - 0.1e1 * t1046 + L9 * m6 * (-t1048 - t1624 - 0.3750000000e0 * t1596)) + t37 * (t72 * t1719 + t76 * (-L9 * m6 * t1707 + t1703 * t1730 - t1697) - 0.5000000000e0 * t1207 * t1629) - t1112 + L9 * m6 * (-t1612 - 0.3750000000e0 * t1609 - t984)) + t58 * (t72 * t321 * (-t855 + t908) + t76 * t1752) + t37 * (t72 * t1752 + t76 * t321 * (t784 - t908)) - 0.1e1 * t316 * t805 * t1351 * t284 + t337 * t26 * t76 * t284 + t25 * (-0.4905000000e1 * m6 * t530 + t100 * L9 * t1730) + c6;
      
      % store on output
      res__gfun = zeros(6,1);
      res__gfun(1) = res__1;
      res__gfun(2) = res__2;
      res__gfun(3) = res__3;
      res__gfun(4) = res__4;
      res__gfun(5) = res__5;
      res__gfun(6) = res__6;
    end



    function jac__Hx = Hx( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      c1 = self.c1;   
      c5 = self.c5;
      c6 = self.c6;
      prism = self.prism;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = theta1__dot ^ 2;
      t2 = 2 * theta2;
      t3 = cos(t2);
      t7 = theta2__dot ^ 2;
      jac__1_1 = (0.5e0 * t3 * t1 + 0.5e0 * t1 + t7) * m3;
      t9 = 0.2e1 * s;
      t10 = 0.2e1 * L3;
      t12 = -t9 - t10 - 0.1e1 * L4;
      t14 = sin(theta2);
      t19 = cos(theta2);
      t20 = t19 * (t14 * m3 * t1 * t12 - 0.9810000000e1 * m3 + lambda2);
      t22 = 0.1e1 * lambda1 * t14;
      jac__1_3 = t20 - t22;
      t23 = 0.5e0 * L4;
      jac__1_8 = theta1__dot * m3 * (t3 * (s + L3 + t23) + s + L3 + t23);
      t29 = t9 + t10 + L4;
      jac__1_9 = t29 * m3 * theta2__dot;
      t31 = s + L3 + L4 / 2;
      t32 = theta1__dot__dot * t31;
      t33 = theta1__dot * s__dot;
      t37 = sin(t2);
      jac__2_1 = -m3 * (t3 * (t32 + t33) - 2 * t37 * theta1__dot * t31 * theta2__dot + t32 + t33);
      t48 = L3 ^ 2;
      t49 = t48 * m2;
      t57 = t31 ^ 2;
      t60 = m3 * t57 + t49 / 4 - IX2 - IX3;
      jac__2_3 = t37 * (4 * m3 * t31 * (2 * t33 + t32) + (t49 - 4 * IX2 - 4 * IX3) * theta1__dot__dot) / 4 + 2 * t3 * theta2__dot * theta1__dot * t60;
      t65 = L9 ^ 2;
      t66 = t65 * m6;
      t68 = -t66 / 4 + IZ6;
      t69 = theta1__dot * theta5__dot;
      t70 = 2 * phi2;
      t71 = sin(t70);
      t73 = cos(t70);
      t76 = t71 * t69 - t73 * theta1__dot__dot / 2;
      t78 = 2 * theta6;
      t79 = cos(t78);
      t82 = theta1__dot * t68;
      t83 = sin(t78);
      t84 = t83 * theta6__dot;
      t87 = theta1__dot__dot * L8;
      t88 = sin(theta6);
      t89 = t88 * L9;
      t90 = m6 * t89;
      t91 = t90 * t87;
      t92 = 8 * t91;
      t93 = theta6__dot * theta1__dot;
      t94 = cos(theta6);
      t96 = L8 * m6;
      t97 = L9 * t96;
      t98 = t97 * t94 * t93;
      t99 = 8 * t98;
      t100 = L8 ^ 2;
      t101 = 2 * t100;
      t102 = t65 / 4;
      t103 = -t101 - t102;
      t104 = m6 * t103;
      t105 = t104 + IZ6;
      t108 = -4 * theta1__dot__dot * t105 - 8 * t84 * t82 - t92 - t99;
      t110 = t88 * m6;
      t111 = L8 * L9;
      t112 = t111 * t110;
      t113 = 2 * t112;
      t114 = t113 + t104 + IZ6;
      t118 = L7 * m6;
      t119 = L9 * t94;
      t120 = t119 * t93;
      t121 = L9 * theta1__dot__dot;
      t123 = 2 * t87;
      t124 = t88 * t121 + t120 - t123;
      t125 = cos(phi2);
      t128 = 8 * t125 * t124 * t118;
      t129 = L7 * t69;
      t131 = t89 - 2 * L8;
      t132 = t131 * m6;
      t133 = sin(phi2);
      t134 = t133 * t132;
      t136 = 16 * t134 * t129;
      t137 = L7 ^ 2;
      t138 = t137 * m5;
      t139 = m6 * t137;
      t140 = -t138 - t139 + IX5;
      t144 = 2 * theta5;
      t145 = cos(t144);
      t150 = t73 * t69 + t71 * theta1__dot__dot / 2;
      t159 = t125 * t132;
      t161 = 16 * t159 * t129;
      t164 = 8 * t133 * t124 * t118;
      t168 = sin(t144);
      t173 = t125 * theta4__dot;
      t174 = cos(theta5);
      t175 = t174 * t173;
      t176 = t133 * theta4__dot;
      t177 = sin(theta5);
      t178 = t177 * t176;
      t179 = 0.3e1 / 0.4e1 * theta6__dot;
      t180 = t175 - t178 - t179;
      t184 = L6 ^ 2;
      t185 = theta1__dot__dot * t184;
      t186 = m5 + m6;
      t187 = 2 * phi1;
      t188 = cos(t187);
      t189 = t188 * t186;
      t192 = theta1__dot * theta4__dot;
      t193 = t186 * t184;
      t194 = sin(t187);
      t195 = t194 * t193;
      t198 = m6 * t69;
      t199 = cos(phi1);
      t200 = L6 * t199;
      t201 = t200 + L5;
      t202 = t201 * t131;
      t204 = t125 * t202 * t198;
      t206 = sin(phi1);
      t207 = L6 * t206;
      t208 = t207 * t192;
      t209 = 2 * t208;
      t210 = theta1__dot__dot * L6;
      t211 = t199 * t210;
      t212 = L5 * theta1__dot__dot;
      t213 = -t209 + t211 + t212;
      t215 = t88 * t213 * L9;
      t216 = theta1__dot * L9;
      t218 = L6 * t199 * theta6__dot;
      t219 = theta6__dot * L5;
      t220 = theta4__dot * L8;
      t221 = 2 * t220;
      t222 = t218 + t219 - t221;
      t227 = t94 * t222 * t216 - 2 * t213 * L8 + t215;
      t231 = L7 * theta1__dot;
      t234 = t201 * t186 * theta5__dot * t231;
      t245 = t133 * t202;
      t246 = t245 * t198;
      t248 = t94 * m6;
      t249 = L9 * t248;
      t250 = t249 * t192;
      t257 = L9 * m6;
      t258 = theta1__dot * L6;
      t259 = t206 * theta6__dot;
      t260 = t259 * t258;
      t266 = t200 * t192;
      t267 = theta1__dot__dot * t207;
      t268 = t267 / 2;
      t269 = theta4__dot * L5;
      t270 = theta6__dot * L8;
      t271 = t270 / 4;
      t273 = (t269 - t271) * theta1__dot;
      t278 = L5 * L6;
      t279 = t186 * theta1__dot__dot;
      t283 = theta1__dot * L5;
      t284 = theta4__dot * t283;
      t285 = t186 * t207;
      t288 = L5 ^ 2;
      t291 = t100 / 8;
      t292 = t65 / 64;
      t294 = m6 * (t288 / 4 + t137 / 8 + t291 - t292);
      t295 = t138 / 8;
      t298 = t288 * (m4 + m5 / 4);
      t299 = IX5 / 8;
      t300 = IZ6 / 16;
      t301 = IX4 / 4;
      t302 = t294 + t295 + t298 - t299 + t300 - t301;
      t305 = t145 * (8 * t71 * t114 * t69 - 8 * t79 * t76 * t68 + t73 * t108 - 8 * t140 * theta1__dot__dot - t128 + t136) + t168 * (8 * t73 * t114 * t69 - 8 * t79 * t150 * t68 - t71 * t108 + 16 * t140 * t69 + t161 + t164) + 12 * t79 * theta1__dot__dot * t68 + 32 * t83 * t180 * t82 + 16 * t189 * t185 - 32 * t195 * t192 + t177 * (16 * t133 * t227 * m6 + 16 * t204 - 32 * t234) - 16 * t125 * (t174 * t227 + t124 * L7 / 2) * m6 + t174 * (16 * t246 + 32 * L7 * (t213 * t186 + t250)) - 16 * t88 * (t260 + t87 / 2) * t257 + 32 * t119 * (t266 + t268 + t273) * m6 + 32 * t199 * t279 * t278 - 64 * t285 * t284 + 64 * theta1__dot__dot * t302;
      t306 = 2 * theta4;
      t307 = sin(t306);
      t313 = t65 / 8;
      t314 = -t100 - t313;
      t315 = m6 * t314;
      t316 = IZ6 / 2;
      t317 = t112 + t315 + t316;
      t320 = t125 * t131 * t118;
      t329 = -m6 * t103;
      t332 = t133 * m6;
      t333 = t131 * L7;
      t334 = t333 * t332;
      t341 = t125 * theta6__dot;
      t342 = t174 * t341;
      t345 = t177 * t133 * theta6__dot;
      t347 = -0.4e1 / 0.3e1 * t342 + 0.4e1 / 0.3e1 * t345 + theta4__dot;
      t351 = t125 * t69;
      t352 = theta1__dot__dot * t133;
      t353 = t351 + t352;
      t355 = t133 * t69;
      t356 = t125 * theta1__dot__dot;
      t357 = t355 - t356;
      t363 = t188 * t193;
      t366 = t194 * t186;
      t369 = t88 * t206;
      t370 = L6 * L9;
      t372 = L8 * t207;
      t374 = L8 * t94;
      t375 = L9 * t374;
      t376 = t370 * t369 - 2 * t372 + t375;
      t377 = t376 * m6;
      t379 = t125 * t377 * t69;
      t381 = t270 / 2;
      t384 = t266 + t268 + (t269 - t381) * theta1__dot;
      t386 = t88 * t384 * L9;
      t387 = t260 + t87;
      t390 = t94 * t387 * L9 / 2;
      t391 = t266 + t284 + t268;
      t394 = -2 * L8 * t391 + t386 + t390;
      t399 = -t249 / 2 + t285;
      t400 = t399 * L7;
      t401 = t400 * t69;
      t413 = t133 * t377 * t69;
      t416 = t90 * t93 / 4;
      t417 = theta1__dot__dot * t94;
      t419 = t257 * t417 / 4;
      t426 = t218 + t219 - t220;
      t435 = t199 * t186 * L6;
      t444 = -16 * t145 * theta4__dot * (-t79 * t73 * t68 / 2 + t73 * t317 + t320 - t138 - t139 + IX5) * theta1__dot - 8 * t168 * theta4__dot * (t79 * t68 * t71 + t71 * (-t113 + t329 - IZ6) - 2 * t334) * theta1__dot + 24 * t79 * t347 * t82 + 16 * t83 * (t357 * t174 + t177 * t353) * t68 + 32 * t363 * t192 + 16 * t366 * t185 + t177 * (32 * t133 * t394 * m6 + 16 * t379 - 32 * t401) - 32 * t125 * (t174 * t394 + t333 * t192 / 2) * m6 + t174 * (16 * t413 + 64 * (t186 * t391 + t416 - t419) * L7) + 16 * t88 * t426 * m6 * t216 - 16 * t94 * t213 * t257 + 64 * t435 * t284 + 32 * t206 * t279 * t278 + 128 * theta4__dot * t302 * theta1__dot;
      t445 = cos(t306);
      t448 = cos(theta4);
      t449 = t448 * theta4__dot;
      t453 = sin(theta4);
      t454 = theta4__dot ^ 2;
      t455 = t454 * t453;
      t456 = t448 * theta4__dot__dot;
      t457 = t455 - t456;
      t463 = t448 * theta5__dot;
      t464 = t114 * theta4__dot;
      t468 = t448 * t68;
      t469 = theta6__dot * theta4__dot;
      t474 = t97 * theta4__dot__dot * t88;
      t476 = m6 * t469;
      t477 = t476 * t375;
      t485 = 8 * t83 * t469 * t468 + t448 * (4 * t105 * theta4__dot__dot + 8 * t474 + 8 * t477) - 4 * t114 * t455;
      t487 = theta5__dot * theta4__dot;
      t488 = L7 * t487;
      t489 = t159 * t488;
      t492 = L9 * theta4__dot__dot;
      t494 = theta4__dot__dot * L8;
      t496 = t119 * t469 + t88 * t492 - 2 * t494;
      t498 = t133 * t496 * t118;
      t506 = t131 * t118;
      t525 = t125 * t496 * t118;
      t527 = t134 * t488;
      t533 = t320 - t138 - t139 + IX5;
      t545 = t125 * t177;
      t547 = t133 * t174;
      t557 = theta5__dot ^ 2;
      t558 = t454 - t557;
      t561 = t125 * t558 - theta5__dot__dot * t133;
      t565 = t125 * theta5__dot__dot + t558 * t133;
      t573 = theta5__dot * theta6__dot;
      t581 = theta4__dot__dot * L6;
      t582 = t199 * t581;
      t583 = theta6__dot ^ 2;
      t585 = (t454 - t557 - t583) * L6;
      t587 = L5 * theta4__dot__dot;
      t588 = theta6__dot__dot * L8;
      t589 = -t206 * t585 + t582 + t587 - t588;
      t592 = theta6__dot__dot * L6;
      t594 = t454 - t557 + t583;
      t596 = t594 * L8 + t206 * t592;
      t601 = L8 * L6;
      t602 = t454 * t601;
      t605 = -2 * t557 * t601 + 2 * t602;
      t607 = L8 * t587;
      t609 = t65 * theta6__dot__dot;
      t612 = (t88 * L9 * t589 - t94 * t596 * L9 - 2 * t494 * t200 + t206 * t605 - 2 * t607 + t609 / 2) * m6;
      t614 = 8 * t125 * t612;
      t616 = L9 * theta5__dot__dot * t88;
      t619 = theta5__dot * L6;
      t620 = t259 * t619;
      t621 = theta5__dot__dot * L8;
      t623 = t620 + t621 / 2;
      t626 = theta5__dot * t65;
      t627 = theta6__dot * t626;
      t630 = t616 * t207 / 2 + t94 * t623 * L9 - t627 / 4 - t621 * t207;
      t631 = t630 * m6;
      t633 = 16 * t133 * t631;
      t636 = t257 * theta6__dot__dot * t88 / 2;
      t639 = t94 * t594 * t257 / 2;
      t640 = t454 * L6;
      t641 = t557 * L6;
      t642 = -t640 + t641;
      t643 = t206 * t642;
      t657 = t133 * t612;
      t659 = theta5__dot__dot * t400;
      t663 = m6 * theta6__dot;
      t664 = t133 * t663;
      t665 = L7 * t119;
      t666 = t665 * t664;
      t669 = m6 * (2 * t137 + t101 + t102);
      t670 = 2 * t138;
      t679 = t199 * t585;
      t680 = t206 * t581;
      t681 = L5 * t454;
      t682 = L8 * t469;
      t683 = 2 * t682;
      t690 = L5 * theta6__dot__dot;
      t691 = t199 * t592 + t494 + t690;
      t697 = 2 * t494 * t207;
      t698 = L8 * t681;
      t699 = 2 * t698;
      t700 = L5 * t557;
      t702 = 2 * L8 * t700;
      t703 = t65 * t469;
      t704 = t703 / 2;
      t706 = (t88 * L9 * (t679 + t680 + t681 - t683 - (t557 + t583) * L5) + t94 * t691 * L9 - t199 * t605 - t697 - t699 + t702 + t704) * m6;
      t708 = t119 * t573;
      t710 = t708 + t616 / 2 - t621;
      t712 = t133 * t201;
      t718 = t257 * theta4__dot__dot * t94 / 2;
      t738 = L7 * theta5__dot__dot;
      t739 = t201 * t186;
      t744 = L7 * L9;
      t746 = theta6__dot__dot * t94;
      t754 = m6 * t573;
      t757 = t669 + t670 + IZ6;
      jac__2_4 = t307 * t305 / 16 + t445 * t444 / 16 + t145 * (4 * t79 * (-2 * t73 * theta5__dot * t449 + t457 * t71) * t68 + 8 * t73 * t464 * t463 + t71 * t485 + t448 * (16 * t140 * t487 + 16 * t489 + 8 * t498) - 8 * t506 * t453 * t133 * t454) / 16 + t168 * (4 * t79 * (2 * t71 * t448 * t487 + t73 * t457) * t68 + t73 * t485 - 8 * t71 * t464 * t463 + t448 * (8 * t140 * theta4__dot__dot + 8 * t525 - 16 * t527) - 8 * t454 * t533 * t453) / 16 + t79 * (t448 * (-2 * t342 + 2 * t345 + theta4__dot) * theta5__dot - 2 * (t545 * t469 + t547 * t469 - theta5__dot__dot / 2) * t453) * t68 / 2 - t83 * (t448 * (t565 * t174 + t177 * t561) + 2 * (theta4__dot__dot * t545 / 2 + theta4__dot__dot * t547 / 2 + t573) * t453) * t68 / 2 + t448 * (t177 * (t614 + t633 - 16 * (t636 + t639 + (t582 + t643 + t587) * t186) * L7) - 16 * t125 * (t174 * t630 + t333 * t487) * m6 + t174 * (8 * t657 + 16 * t659) + 8 * (-t666 + (-t113 + t669 + t670 + IZ6) * theta5__dot) * theta4__dot) / 16 - (t177 * (t125 * t706 - 2 * t712 * t710 * m6 - 2 * (t90 * t469 - t718 + t186 * (-t199 * t642 + t680 + t681 - t700)) * L7) + 2 * t125 * (t174 * t201 * t710 + (t708 + t616 - 2 * t621) * L7) * m6 + t174 * (t133 * t706 - 2 * t739 * t738) - t133 * (t88 * t583 - t746) * m6 * t744 + 2 * theta5__dot__dot * t111 * t110 + 2 * t754 * t375 - theta5__dot__dot * t757) * t453 / 2;
      t763 = t66 / 8 - t316;
      t765 = t79 * t763 + t112 + t315 + t316;
      t766 = t765 * theta5__dot;
      t767 = t73 * theta1__dot;
      t771 = t66 - 4 * IZ6;
      t774 = t83 * t771;
      t776 = 2 * t774 * t93;
      t778 = -m6 * t314;
      t779 = t778 - t316;
      t781 = 8 * t779 * theta1__dot__dot;
      t782 = -t79 * t771 * theta1__dot__dot + t776 + t781 - t92 - t99;
      t784 = -t140;
      t791 = theta4__dot * (t71 * t765 + t334);
      t792 = t307 * theta1__dot;
      t795 = t454 * t448;
      t797 = t453 * theta4__dot__dot + t69 + t795;
      t800 = 2 * t79 * t797 * t771;
      t801 = theta4__dot * t453;
      t803 = t83 * t771 * theta6__dot;
      t805 = 4 * t803 * t801;
      t808 = -16 * t779 * theta4__dot__dot + 16 * t474 + 16 * t477;
      t810 = t795 + t69;
      t812 = 16 * t317 * t810;
      t815 = theta5__dot * t801;
      t817 = t815 - theta1__dot__dot / 4;
      t824 = -32 * t801 * t317 * theta5__dot - 4 * t79 * t771 * t817 - t776 - t781 + t92 + t99;
      t832 = t810 * t131;
      t842 = t71 * theta1__dot;
      t846 = 8 * t784 * theta1__dot__dot;
      t871 = t545 + t547;
      t872 = t871 * t771;
      t883 = -t209 + t212;
      t887 = (t215 + t199 * (t120 - t123) * L6 + t94 * (t219 - t221) * t216 - 2 * t883 * L8) * m6;
      t894 = t199 * t186;
      t916 = L8 * t200;
      t919 = t284 + t268;
      t923 = (-2 * L8 * t919 - 2 * t916 * t192 + t386 + t390) * m6;
      t943 = t133 * theta5__dot;
      t947 = t448 * t176;
      t979 = t583 * L5;
      t981 = t448 * (-t679 - t681 + t700 + t979 + t683 - t680);
      t982 = t201 * t69;
      t983 = t981 + t982;
      t986 = t454 * L8;
      t987 = L8 * t557;
      t999 = t201 * L8;
      t1003 = (t88 * t983 * L9 + t448 * (2 * t199 * L6 * (t986 - t987 - L9 * t746 / 2) - t94 * (t690 + t494) * L9 + t699 - t702 - t704 + t697) - 2 * t999 * t69) * m6;
      t1006 = theta5__dot__dot * t448;
      t1007 = t1006 + theta1__dot__dot;
      t1014 = m6 * (t88 * t1007 * L9 + t448 * (2 * t708 - 2 * t621) + t120 - t123);
      t1044 = t186 * L7;
      t1045 = t201 * t1007;
      jac__2_5 = t145 * (t445 * (16 * t784 * t69 + t71 * t782 - 16 * t767 * t766 - t161 - t164) + 16 * t792 * t791 + t73 * (t453 * t808 + t800 - t805 + t812) + t71 * t824 + t453 * (-16 * t784 * theta4__dot__dot + 16 * t525 - 32 * t527) + 16 * t125 * t832 * t118 + t164 - 16 * t810 * t784) / 16 + t168 * (t445 * (t73 * t782 + 16 * t842 * t766 - t128 + t136 + t846) + 16 * t792 * theta4__dot * (t73 * t765 + IX5 - t138 - t139 + t320) + t73 * t824 + t71 * (-t453 * t808 - t800 + t805 - t812) + t453 * (32 * t784 * t487 - 32 * t489 - 16 * t498) + t128 - 16 * t133 * t832 * t118 - t846) / 16 + t445 * (-4 * t83 * t872 * t192 + t174 * (-8 * t133 * t887 - 8 * t204 + 16 * t234) + 8 * t177 * (-t125 * t887 + t246 + 2 * (t883 * t186 + t894 * t210 + t250) * L7)) / 16 + t307 * (-4 * t79 * t872 * t93 - 2 * t83 * (t174 * t353 - t357 * t177) * t771 + t174 * (16 * t133 * t923 + 8 * t379 - 16 * t401) + 16 * t177 * (t125 * t923 - t413 / 2 - 2 * (t186 * t919 + t435 * t192 + t416 - t419) * L7)) / 16 - t79 * t771 * (t174 * (t448 * t173 + t453 * t943) - (-t453 * t125 * theta5__dot + t947) * t177) * theta6__dot / 4 + t83 * t771 * (t174 * (-theta4__dot__dot * t448 * t125 + t453 * t561) - t177 * (-theta4__dot__dot * t448 * t133 + t453 * t565)) / 8 + t174 * (t453 * (t614 + t633 - 16 * (t636 + t894 * t581 + t639 + t186 * (t643 + t587)) * L7) - 8 * t125 * t1003 - 8 * t712 * t1014 + 16 * (-t90 * t448 * t469 + t448 * (-t199 * t186 * (theta4__dot + theta5__dot) * L6 * (theta4__dot - theta5__dot) + t718 - (t681 - t700 + t680) * t186) + t739 * t69) * L7) / 16 + t177 * (t453 * (2 * t125 * t631 - t657 - 2 * t659) - t125 * t201 * t1014 + t133 * t1003 + 2 * t1045 * t1044) / 2;
      t1069 = t88 * t93;
      t1071 = (t1069 - t417) * L8;
      t1074 = t71 * t94;
      t1081 = t88 * t125;
      t1089 = t73 * t94;
      t1098 = t88 * t133;
      t1106 = t177 * t201;
      t1111 = -t208 + t212 / 2 + t211 / 2;
      t1113 = theta1__dot__dot * L7;
      t1119 = t174 * t201;
      t1129 = theta6__dot * L7;
      t1139 = t174 * L7;
      t1160 = 2 * t815;
      t1161 = theta1__dot__dot / 2;
      t1162 = -t1160 + t1161;
      t1174 = t174 * theta5__dot;
      t1176 = -t453 * t1174 + t177 * t449;
      t1181 = theta5__dot * t453;
      t1183 = t177 * t1181 + t174 * t449;
      t1193 = theta1__dot__dot * t174;
      t1204 = L7 * t125;
      t1205 = L8 * t73;
      t1208 = t145 * (t1204 + t1205) * t94;
      t1212 = L8 * t71;
      t1215 = t168 * (L7 * t133 + t1212) * t94;
      t1222 = L7 * t192;
      t1240 = L8 * t177;
      t1247 = L8 * t174;
      t1251 = L7 * t177;
      t1266 = -2 * t71 * t801 + t767;
      t1271 = 2 * t73 * t801 + t842;
      t1279 = t453 * t174;
      t1292 = 4 * t463;
      t1303 = L8 * (t94 * (4 * t815 - theta1__dot__dot) + t1069);
      t1307 = t88 * t453;
      t1310 = L8 * (-t1307 * t469 + t94 * t797);
      t1317 = t88 * theta6__dot;
      t1321 = t125 * theta1__dot - 2 * t453 * t176;
      t1338 = t133 * theta1__dot;
      t1339 = 2 * t453 * t173 + t1338;
      t1362 = L6 * theta5__dot__dot;
      t1389 = -t596;
      t1398 = 2 * t463 + theta1__dot;
      t1402 = 0.4e1 / 0.3e1 * t463 + theta1__dot;
      t1404 = 0.3e1 / 0.2e1 * t1402 * L7;
      t1421 = L7 * theta6__dot__dot;
      jac__2_6 = t445 * (2 * t83 * (t145 * t76 + t168 * t150 - 0.3e1 / 0.2e1 * theta1__dot__dot) * t771 + 8 * t79 * theta1__dot * (t175 - t178 - t145 * t73 * theta6__dot / 4 + t168 * t71 * theta6__dot / 4 - t179) * t771 + 16 * m6 * (t145 * (-t73 * t1071 / 4 - L8 * t1074 * t69 / 2 - (t94 * (t355 - t356 / 2) + t1081 * t93 / 2) * L7 / 2) + t168 * (-L8 * t1089 * t69 / 2 + t71 * t1071 / 4 - (t94 * (t351 + t352 / 2) - t1098 * t93 / 2) * L7 / 2) + t94 * (t125 * (-t1106 * t69 / 2 + t174 * t1111 + t1113 / 4) + t133 * (-t177 * t1111 - t1119 * t69 / 2) + t260 / 2 + t87 / 4) + (-t125 * (t174 * t222 + t1129 / 2) * theta1__dot / 2 + t133 * t222 * t177 * theta1__dot / 2 + t1139 * t192 + t266 + t268 + t273) * t88) * L9) / 16 + t83 * (t307 * (t145 * t73 * theta4__dot - t168 * t71 * theta4__dot - 4 * t342 + 4 * t345 + 3 * theta4__dot) * theta1__dot + t145 * (t73 * t1162 - t797 * t71) + t168 * (2 * t817 * t71 - t73 * t797) + 4 * t125 * t1176 * theta6__dot + 4 * t133 * t1183 * theta6__dot + t1160 - 2 * t1006 - t1161) * t771 / 8 + t307 * (-4 * t79 * (t125 * (t177 * t69 - t1193) + (t174 * t69 + theta1__dot__dot * t177) * t133) * t771 - 16 * m6 * (t1208 * t192 / 2 - t1215 * t192 / 2 + t94 * (t125 * (-t177 * t207 * t69 / 2 + t174 * t384 + t1222 / 2) + t133 * (-t177 * t384 - t174 * t207 * t69 / 2) - (L7 * t174 * theta6__dot + t218 + t219 - t220) * theta1__dot / 2) - t88 * (t125 * (-t1240 * t69 + t387 * t174) + t133 * (-t1247 * t69 - t177 * t387) - t209 - t1251 * t69 + t211 + L7 * t1193 + t212) / 2) * L9) / 16 + t79 * (t145 * t1266 * theta6__dot - t168 * t1271 * theta6__dot + t125 * (t177 * (2 * t453 * t558 - 2 * t456) + 2 * theta5__dot__dot * t1279) + t133 * (-2 * t177 * theta5__dot__dot * t453 + 2 * t174 * (t453 * t558 - t456)) - (t1292 + theta1__dot) * theta6__dot) * t771 / 8 - m6 * L9 * (t145 * (-t73 * t1303 / 2 - t71 * t1310 - (t94 * (-t125 * t1162 + t797 * t133) + t1321 * t1317 / 2) * L7) + t168 * (-t73 * t1310 + t71 * t1303 / 2 - L7 * (t94 * (t125 * t797 - 2 * t817 * t133) - t1339 * t1317 / 2)) + t94 * (t125 * (t177 * (-t453 * t589 + t981 + t982) + t453 * (theta5__dot__dot * t174 * t207 + 2 * t488) - t174 * t1045 - 2 * (t1006 + 0.3e1 / 0.4e1 * theta1__dot__dot) * L7) + t133 * (t177 * (-t453 * t206 * t1362 + t1045) - t453 * t174 * t589 + t174 * t983 + L7 * t448 * t583) + t177 * (2 * L7 * t448 * t469 + theta6__dot__dot * L7 * t453) - 2 * L8 * t1006 - 0.3e1 / 0.2e1 * t87 + t260 + 2 * L8 * t453 * t487) + (t125 * (t177 * (t453 * t1389 + t691 * t448) - 2 * t453 * t174 * t623 + theta6__dot * (t174 * t201 * t1398 + t1404)) + t133 * (t177 * (t453 * (2 * t620 + t621) - t201 * t1398 * theta6__dot) + t453 * (-L7 * t469 + t174 * t1389) + (t174 * t691 + t1421) * t448) - t177 * L7 * (t453 * t594 - t456) + 2 * L8 * t448 * t573 - t738 * t1279 + 0.3e1 / 0.2e1 * L8 * t93 + t267) * t88) / 2;
      jac__2_7 = -m3 * theta1__dot * t31 * (t3 + 1);
      t1462 = t184 * theta4__dot;
      t1469 = L6 * t199 * theta4__dot;
      t1474 = L9 * L6 * t94;
      t1479 = t88 * (t1469 + t269 - t381) * L9 + t1474 * t259 / 2 - 2 * t201 * t220;
      t1481 = theta4__dot * L7;
      t1495 = m6 * theta5__dot;
      t1512 = t206 * m6;
      t1514 = t1474 * t1512 / 4;
      t1516 = t894 * t278 / 2;
      t1528 = (t248 * t111 + t83 * t68) * theta6__dot;
      t1532 = t125 * t333 * t1495;
      t1537 = -4 * t71 * t1528 - 8 * t73 * t766 + 8 * t784 * theta5__dot - 8 * t1532 - 4 * t666;
      t1546 = -t119 * t341 / 2 + t131 * t943;
      t1550 = -8 * L7 * m6 * t1546 + 4 * t73 * t1528 - 8 * t71 * t766;
      t1558 = t1106 * t131 * theta5__dot;
      t1560 = t206 * theta4__dot;
      t1562 = L9 * L6 * t88;
      t1571 = t1562 * t1560 + t94 * (-t218 / 2 + t220 - t219 / 2) * L9 - 2 * t601 * t1560;
      t1573 = t94 * theta6__dot;
      t1575 = t744 * t1573 / 4;
      t1582 = theta5__dot * L7;
      t1594 = theta6__dot * t1512;
      t1595 = t1594 * t1562;
      t1616 = t31 * m3;
      t1628 = t94 * t133;
      t1641 = t97 * t1573;
      jac__2_8 = t307 * (8 * t168 * t791 + 8 * t145 * theta4__dot * (t73 * (-t79 * t763 - t112 - t316 + t778) - t320 + t138 + t139 - IX5) - 2 * t774 * t871 * theta5__dot - 3 * t79 * t771 * t347 + 16 * t189 * t1462 - 16 * t125 * m6 * (-t177 * t376 * theta5__dot / 2 + t174 * t1479 + t131 * t1481 / 2) + t177 * (-16 * L7 * t399 * theta5__dot + 16 * t133 * m6 * t1479) + t174 * (8 * t133 * t376 * t1495 + 32 * L7 * (t89 * t663 / 4 + t186 * t201 * theta4__dot)) + 8 * t88 * t426 * t257 + 64 * theta4__dot * (t1514 + t1516 + t294 + t295 + t298 - t301 - t299 + t300)) / 16 + t445 * (t168 * t1537 + t145 * t1550 + 4 * t83 * t180 * t771 + 16 * t366 * t1462 - 16 * t125 * m6 * (t1558 / 2 + t174 * t1571 - t1575) + t177 * (16 * t133 * m6 * t1571 + 16 * t739 * t1582) + t174 * (32 * L7 * t399 * theta4__dot - 8 * t245 * t1495) + 8 * t1595 - 16 * t248 * (t1469 + t269 - t271) * L9 + 32 * t186 * t278 * t1560) / 16 - t168 * t1537 / 16 - t145 * t1550 / 16 - t803 / 16 + t37 * t60 * theta2__dot - t3 * s__dot * t1616 - t125 * m6 * (t1558 - (t1119 + 0.3e1 / 0.2e1 * L7) * t94 * L9 * theta6__dot) / 2 + t177 * (-L9 * t1628 * t663 / 2 + t186 * t1582) * t201 - t174 * t712 * t131 * t1495 / 2 - t1595 / 2 + 0.3e1 / 0.4e1 * t1641 - s__dot * t1616;
      jac__2_9 = theta1__dot * t60 * t37;
      t1646 = -t66 / 64 + t300;
      t1648 = t112 / 8;
      t1649 = t291 + t292;
      t1673 = t125 * (t1119 + L7 / 2);
      t1676 = t177 * t712;
      t1677 = L8 / 2;
      t1687 = t145 * (t73 * (m6 * t1649 + t79 * t1646 - t1648 - t300) - t320 / 8 + t295 + t139 / 8 - t299) + t168 * (t71 * (-m6 * t1649 - t79 * t1646 + t1648 + t300) + t334 / 8) + t79 * (-0.3e1 / 0.64e2 * t66 + 0.3e1 / 0.16e2 * IZ6) + t363 / 4 - t1673 * t132 / 4 + t88 * (t1676 - t1677) * t257 / 4 - t177 * t999 * t332 / 2 + t1119 * t1044 / 2 + t1516 + t1514 + t294 + t295 + t300 + t298 - t301 - t299;
      t1692 = t79 * t68 - IZ6 - t113 + t329;
      t1701 = t97 * t453 * t1573;
      t1704 = 8 * t84 * t68 * t453 - 8 * t79 * theta4__dot * t468 + 8 * t114 * t449 + 8 * t1701;
      t1730 = t448 * theta6__dot;
      t1737 = t125 * t174;
      t1738 = t133 * t177;
      t1739 = t1737 - t1738;
      t1744 = m6 * t174;
      t1749 = t88 * t177;
      t1754 = t207 - t119 / 2;
      t1770 = theta4__dot * L6;
      t1771 = t177 * t206;
      t1785 = t133 * t206;
      t1788 = theta5__dot * L8;
      t1807 = t177 * m6;
      t1808 = t1469 + t269 - t270;
      t1811 = L8 * t199;
      t1812 = t1811 * t1770;
      t1814 = L8 * L5;
      t1815 = theta4__dot * t1814;
      t1817 = t65 * theta6__dot;
      jac__2_10 = 4 * t307 * t1687 * theta1__dot + t145 * (-8 * t73 * t1692 * t1181 + t71 * t1704 + t453 * (16 * t140 * theta5__dot + 16 * t1532 + 8 * t666) + 16 * t506 * t947) / 16 + t168 * (-16 * t453 * t1546 * t118 + 8 * t71 * t1692 * t1181 + 16 * theta4__dot * t448 * t533 + t73 * t1704) / 16 + t79 * t68 * (2 * t871 * t1730 + t1181) / 2 + 2 * t445 * (-t83 * t1739 * t68 / 2 + t195 / 2 - t125 * t376 * t1744 / 2 + t257 * t1749 * t133 * t207 / 2 - t177 * L8 * t1754 * t332 + t174 * t400 - t249 * t200 / 2 + L5 * t399) * theta1__dot - t83 * theta4__dot * t68 * t871 * t453 + t453 * (-16 * t125 * (t88 * (t1771 * t1770 + t1582) * L9 - 2 * L8 * (t177 * t1754 * theta4__dot + t1582)) * m6 - 16 * t88 * (t174 * t1785 * t1770 + t1788) * t257 + 32 * t177 * theta4__dot * t400 + 32 * t133 * (t174 * t1754 * t220 - t1575) * m6 + 8 * theta5__dot * t757) / 16 + t448 * (t125 * (t88 * t1808 * L9 - 2 * t1812 - 2 * t1815 + t1817 / 4) * t1807 + t88 * (-t177 * t1129 + t1808 * t547) * t257 - 2 * t177 * t739 * t1481 - 2 * (t1812 + t1815 - t1817 / 8) * t133 * t1744);
      t1837 = theta1__dot * m6;
      t1838 = L9 * L5;
      t1839 = phi2 + theta6 + theta5;
      t1840 = cos(t1839);
      t1841 = t1840 * t1838;
      t1842 = t1841 * t1837;
      t1844 = L8 * L7;
      t1846 = sin(t144 + phi2);
      t1847 = t1846 * t1844;
      t1848 = t1847 * t1837;
      t1849 = -theta6 + t70 + t144;
      t1850 = cos(t1849);
      t1851 = t1850 * t111;
      t1852 = t1851 * t1837;
      t1854 = phi2 - theta6 + t144;
      t1855 = cos(t1854);
      t1856 = t1855 * t257;
      t1857 = t1856 * t231;
      t1859 = phi2 + theta6 + t144;
      t1860 = cos(t1859);
      t1861 = t1860 * t257;
      t1862 = t1861 * t231;
      t1864 = theta6 + t70 + t144;
      t1865 = cos(t1864);
      t1866 = t1865 * t111;
      t1867 = t1866 * t1837;
      t1869 = theta5__dot + theta6__dot;
      t1870 = t1869 * m6;
      t1871 = -phi2 - theta6 + phi1 + theta4 - theta5;
      t1872 = cos(t1871);
      t1877 = (theta4__dot - theta6__dot) * m6;
      t1878 = -theta4 + phi2 + theta6;
      t1879 = cos(t1878);
      t1883 = theta4 - theta6;
      t1884 = cos(t1883);
      t1888 = L5 * theta5__dot;
      t1889 = theta4 - theta5;
      t1890 = sin(t1889);
      t1894 = sin(theta5 + t306);
      t1899 = (L5 + L8) * m6;
      t1900 = theta5 + phi2 + t306 - theta6;
      t1901 = cos(t1900);
      t1906 = (L5 - L8) * m6;
      t1907 = theta5 + phi2 + t306 + theta6;
      t1908 = cos(t1907);
      t1912 = theta4 + phi2 - theta6;
      t1913 = cos(t1912);
      t1917 = t1842 / 4 - t1848 + t1852 / 4 + t1857 / 4 - t1862 / 4 - t1867 / 4 + t1872 * t1870 * t370 / 4 - t1879 * t1877 * t744 / 4 - t1884 * t1877 * t111 / 2 - t1890 * t1044 * t1888 + t1894 * t1044 * t283 / 2 - t1901 * t1899 * t216 / 8 + t1908 * t1906 * t216 / 8 - t1913 * t1877 * t744 / 4;
      t1919 = sin(phi1 + theta4 - theta5);
      t1922 = theta5 + phi2 - t306 - theta6;
      t1923 = cos(t1922);
      t1928 = sin(-theta5 + phi1);
      t1932 = theta5 + phi2 + theta6 + phi1;
      t1933 = cos(t1932);
      t1934 = t1933 * t257;
      t1935 = t1934 * t258;
      t1937 = -theta5 - phi2 - theta6 + phi1;
      t1938 = cos(t1937);
      t1939 = t1938 * t257;
      t1940 = t1939 * t258;
      t1942 = -theta5 - phi2 + theta6 + phi1;
      t1943 = cos(t1942);
      t1944 = t1943 * t257;
      t1945 = t1944 * t258;
      t1947 = theta5 + phi2 - theta6 + phi1;
      t1948 = cos(t1947);
      t1949 = t1948 * t257;
      t1950 = t1949 * t258;
      t1953 = sin(theta4 + phi1 + theta5 + phi2);
      t1954 = t1953 * t96;
      t1956 = theta6 + theta4 - theta5;
      t1957 = cos(t1956);
      t1958 = t1957 * t257;
      t1961 = -theta6 + theta4 + theta5;
      t1962 = cos(t1961);
      t1963 = t1962 * t257;
      t1966 = -theta6 + theta4 - theta5;
      t1967 = cos(t1966);
      t1968 = t1967 * t257;
      t1971 = theta6 + theta4 + theta5;
      t1972 = cos(t1971);
      t1973 = t1972 * t257;
      t1977 = sin(theta4 + phi1 - theta5 - phi2);
      t1978 = t1977 * t96;
      t1981 = sin(phi2 + theta4);
      t1983 = t1981 * t96 * t1481;
      t1985 = sin(t306 + theta5 + phi2);
      t1987 = t1985 * t1814 * t1837;
      t1989 = -t1919 * t1044 * t619 - t1923 * t1906 * t216 / 8 - t1928 * t1044 * t258 / 2 + t1935 / 8 + t1940 / 8 - t1945 / 8 - t1950 / 8 + t1954 * t619 + t1958 * t1582 / 4 - t1963 * t1582 / 4 + t1968 * t1582 / 4 - t1973 * t1582 / 4 - t1978 * t619 + t1983 + t1987 / 2;
      t1992 = sin(-t306 + theta5 + phi2);
      t1994 = t1992 * t1814 * t1837;
      t1996 = -t306 + t144 + theta6 + t70;
      t1997 = cos(t1996);
      t1999 = t1997 * t111 * t1837;
      t2001 = t306 + t144 + theta6 + t70;
      t2002 = cos(t2001);
      t2004 = t2002 * t111 * t1837;
      t2006 = -t306 + t144 - theta6 + t70;
      t2007 = cos(t2006);
      t2009 = t2007 * t111 * t1837;
      t2011 = t306 + t144 - theta6 + t70;
      t2012 = cos(t2011);
      t2014 = t2012 * t111 * t1837;
      t2016 = phi2 - theta6 + t144 - t306;
      t2017 = cos(t2016);
      t2019 = t2017 * t257 * t231;
      t2021 = phi2 - theta6 + t144 + t306;
      t2022 = cos(t2021);
      t2024 = t2022 * t257 * t231;
      t2027 = sin(t144 + phi2 + t306);
      t2029 = t2027 * t1844 * t1837;
      t2032 = sin(t144 + phi2 - t306);
      t2034 = t2032 * t1844 * t1837;
      t2036 = phi2 + theta6 + t144 - t306;
      t2037 = cos(t2036);
      t2039 = t2037 * t257 * t231;
      t2041 = phi2 + theta6 + t144 + t306;
      t2042 = cos(t2041);
      t2044 = t2042 * t257 * t231;
      t2046 = t306 + theta5 - theta6;
      t2047 = cos(t2046);
      t2049 = t2047 * t257 * t231;
      t2051 = t306 - theta5 - theta6;
      t2052 = cos(t2051);
      t2054 = t2052 * t257 * t231;
      t2056 = t306 + theta5 + theta6;
      t2057 = cos(t2056);
      t2059 = t2057 * t257 * t231;
      t2061 = t1994 / 2 + t1999 / 8 + t2004 / 8 - t2009 / 8 - t2014 / 8 - t2019 / 8 - t2024 / 8 + t2029 / 2 + t2034 / 2 + t2039 / 8 + t2044 / 8 - t2049 / 8 + t2054 / 8 - t2059 / 8;
      t2062 = theta5 + phi2 + theta6 + phi1 + t306;
      t2063 = cos(t2062);
      t2065 = t2063 * t257 * t258;
      t2067 = -theta5 - phi2 + theta6 + phi1 + t306;
      t2068 = cos(t2067);
      t2070 = t2068 * t257 * t258;
      t2072 = theta5 + phi2 - theta6 + phi1 + t306;
      t2073 = cos(t2072);
      t2075 = t2073 * t257 * t258;
      t2077 = -theta5 - phi2 - theta6 + phi1 + t306;
      t2078 = cos(t2077);
      t2080 = t2078 * t257 * t258;
      t2083 = sin(phi1 + theta5 + phi2 + t306);
      t2085 = t2083 * t96 * t258;
      t2088 = sin(phi1 - theta5 - phi2 + t306);
      t2090 = t2088 * t96 * t258;
      t2092 = t306 - theta5 + theta6;
      t2093 = cos(t2092);
      t2095 = t2093 * t257 * t231;
      t2097 = theta4__dot * m6;
      t2098 = -theta4 - theta6 + t144 + t70;
      t2099 = cos(t2098);
      t2101 = t2099 * t111 * t2097;
      t2103 = theta4 - theta6 + t144 + t70;
      t2104 = cos(t2103);
      t2106 = t2104 * t111 * t2097;
      t2108 = -theta4 + theta6 + t70 + t144;
      t2109 = cos(t2108);
      t2111 = t2109 * t111 * t2097;
      t2113 = theta4 + theta6 + t70 + t144;
      t2114 = cos(t2113);
      t2116 = t2114 * t111 * t2097;
      t2118 = phi2 - theta4 + t144 - theta6;
      t2119 = cos(t2118);
      t2121 = t2119 * t257 * t1481;
      t2123 = theta4 + phi2 - theta6 + t144;
      t2124 = cos(t2123);
      t2126 = t2124 * t257 * t1481;
      t2128 = phi2 - theta4 + t144 + theta6;
      t2129 = cos(t2128);
      t2131 = t2129 * t257 * t1481;
      t2133 = theta4 + phi2 + theta6 + t144;
      t2134 = cos(t2133);
      t2136 = t2134 * t257 * t1481;
      t2138 = t2065 / 8 - t2070 / 8 - t2075 / 8 + t2080 / 8 + t2085 / 2 - t2090 / 2 + t2095 / 8 - t2101 / 4 + t2106 / 4 + t2111 / 4 - t2116 / 4 - t2121 / 4 + t2126 / 4 + t2131 / 4 - t2136 / 4;
      t2142 = sin(theta4 + t144 + phi2);
      t2144 = t2142 * t1844 * t2097;
      t2146 = sin(-theta4 + t144 + phi2);
      t2148 = t2146 * t1844 * t2097;
      t2149 = t771 * theta1__dot;
      t2150 = phi2 - theta6 + theta5;
      t2151 = 2 * t2150;
      t2152 = sin(t2151);
      t2155 = 2 * t1839;
      t2156 = sin(t2155);
      t2159 = theta5__dot - theta6__dot;
      t2160 = t2159 * t771;
      t2161 = phi2 - t78 + theta5 - theta4;
      t2162 = sin(t2161);
      t2165 = t1869 * t771;
      t2166 = phi2 + t78 + theta5 - theta4;
      t2167 = sin(t2166);
      t2170 = t306 + t78 + theta5 + phi2;
      t2171 = sin(t2170);
      t2174 = t306 - t78 + theta5 + phi2;
      t2175 = sin(t2174);
      t2178 = -t306 + t78 + theta5 + phi2;
      t2179 = sin(t2178);
      t2182 = -t306 - t78 + theta5 + phi2;
      t2183 = sin(t2182);
      t2186 = theta4__dot * t779;
      t2188 = sin(theta4 + t144 + t70);
      t2191 = t771 * theta4__dot;
      t2192 = theta4 + t78 + t70 + t144;
      t2193 = sin(t2192);
      t2196 = t70 - t78 + t144 - theta4;
      t2197 = sin(t2196);
      t2200 = t70 - t78 + t144 + theta4;
      t2201 = sin(t2200);
      t2204 = -t2144 + t2148 + t2152 * t2149 / 32 + t2156 * t2149 / 32 + t2162 * t2160 / 16 - t2167 * t2165 / 16 + t2171 * t2149 / 32 - t2175 * t2149 / 32 - t2179 * t2149 / 32 + t2183 * t2149 / 32 - t2188 * t2186 / 2 + t2193 * t2191 / 32 - t2197 * t2191 / 32 + t2201 * t2191 / 32;
      t2206 = 64 * theta5__dot * t1814;
      t2207 = 8 * t1817;
      t2210 = phi2 - theta4 + theta5;
      t2211 = sin(t2210);
      t2215 = sin(t70 + t144 - theta4);
      t2223 = t784 * theta1__dot;
      t2228 = phi2 + theta4 + theta5;
      t2229 = sin(t2228);
      t2232 = t784 * theta4__dot;
      t2234 = sin(theta4 - t144);
      t2238 = sin(theta4 + t144);
      t2241 = 2 * theta6__dot;
      t2244 = t78 + theta4;
      t2245 = sin(t2244);
      t2250 = -t78 + theta4;
      t2251 = sin(t2250);
      t2254 = theta1__dot * t779;
      t2255 = theta5 + phi2;
      t2257 = sin(2 * t2255);
      t2260 = theta4 + theta5;
      t2262 = sin(2 * t2260);
      t2266 = sin(2 * t1889);
      t2269 = phi2 + t78 + theta5 + theta4;
      t2270 = sin(t2269);
      t2273 = phi2 - t78 + theta5 + theta4;
      t2274 = sin(t2273);
      t2277 = theta4 + theta5 + phi2 + theta6;
      t2278 = 2 * t2277;
      t2279 = sin(t2278);
      t2282 = t2211 * m6 * (t2206 - t2207) / 64 + t2215 * t2186 / 2 + t453 * (m6 * (t137 + t100 + t313) + t138 + t316) * theta4__dot - t168 * t2223 / 2 + t2229 * m6 * (t2206 + t2207) / 64 - t2234 * t2232 / 2 - t2238 * t2232 / 2 - t2245 * (theta4__dot + t2241) * t771 / 16 - t2251 * (theta4__dot - t2241) * t771 / 16 - t2257 * t2254 / 2 + t2262 * t2223 / 4 - t2266 * t2223 / 4 + t2270 * t2165 / 16 - t2274 * t2160 / 16 - t2279 * t2149 / 64;
      t2284 = theta4 + theta5 + phi2 - theta6;
      t2285 = 2 * t2284;
      t2286 = sin(t2285);
      t2289 = -theta4 + t78 + t70 + t144;
      t2290 = sin(t2289);
      t2293 = -theta4 + theta5 + phi2 + theta6;
      t2294 = 2 * t2293;
      t2295 = sin(t2294);
      t2298 = -theta4 + theta5 + phi2 - theta6;
      t2299 = 2 * t2298;
      t2300 = sin(t2299);
      t2304 = sin(2 * t2210);
      t2308 = sin(2 * t2228);
      t2311 = t2159 * L5;
      t2313 = cos(t2284);
      t2317 = t1869 * L5;
      t2319 = cos(t2293);
      t2324 = cos(t2277);
      t2330 = cos(t2298);
      t2331 = t2330 * m6;
      t2337 = (theta4__dot + theta6__dot) * m6;
      t2338 = theta4 + phi2 + theta6;
      t2339 = cos(t2338);
      t2344 = sin(theta5 + phi1 + t306);
      t2348 = theta4 + theta6;
      t2349 = cos(t2348);
      t2353 = -t2286 * t2149 / 64 - t2290 * t2191 / 32 - t2295 * t2149 / 64 - t2300 * t2149 / 64 + t2304 * t2254 / 4 + t2308 * t2254 / 4 - t2313 * (t1788 + t2311) * t257 / 4 + t2319 * (t1788 + t2317) * t257 / 4 + t2324 * (-t1788 + t2317) * t257 / 4 - t2331 * L9 * (-t1788 + t2311) / 4 + t186 * t1251 * t283 + t2339 * t2337 * t744 / 4 + t2344 * t1044 * t258 / 2 + t2349 * t2337 * t111 / 2;
      t2354 = sin(t2260);
      t2358 = sin(theta5 + phi1);
      t2363 = sin(-theta5 + t306);
      t2367 = t2159 * m6;
      t2368 = -phi2 + theta6 + phi1 + theta4 - theta5;
      t2369 = cos(t2368);
      t2373 = phi2 + theta6 + phi1 + theta4 + theta5;
      t2374 = cos(t2373);
      t2378 = phi2 - theta6 + phi1 + theta4 + theta5;
      t2379 = cos(t2378);
      t2384 = sin(phi1 + theta4 + theta5);
      t2387 = -theta4 + phi2 - theta6;
      t2388 = cos(t2387);
      t2393 = sin(-theta5 + phi1 + t306);
      t2397 = theta5 + phi2 - t306 + theta6;
      t2398 = cos(t2397);
      t2403 = sin(phi2 - theta4);
      t2405 = t2403 * t96 * t1481;
      t2407 = sin(phi1 + theta5 + phi2);
      t2408 = t2407 * t96;
      t2409 = t2408 * t258;
      t2412 = sin(phi1 - theta5 - phi2);
      t2413 = t2412 * t96;
      t2414 = t2413 * t258;
      t2416 = sin(t2255);
      t2417 = t2416 * t1814;
      t2418 = t2417 * t1837;
      t2419 = cos(t2150);
      t2420 = t2419 * t1838;
      t2421 = t2420 * t1837;
      t2423 = t2354 * t1044 * t1888 + t2358 * t1044 * t258 / 2 - t2363 * t1044 * t283 / 2 - t2369 * t2367 * t370 / 4 + t2374 * t1870 * t370 / 4 - t2379 * t2367 * t370 / 4 + t2384 * t1044 * t619 + t2388 * t2337 * t744 / 4 - t2393 * t1044 * t258 / 2 + t2398 * t1899 * t216 / 8 - t2405 + t2409 / 2 - t2414 / 2 + t2418 - t2421 / 4;
      jac__2_11 = t1917 + t1989 + t2061 + t2138 + t2204 + t2282 + t2353 + t2423;
      t2484 = t453 * theta6__dot;
      t2491 = t453 * L6;
      t2494 = t201 * theta1__dot;
      t2495 = 2 * t448 * t201 * theta5__dot - 2 * t2491 * t206 * theta5__dot + t2494;
      t2523 = t448 * (t88 * (-2 * t218 - 2 * t219 - 2 * t220) + theta4__dot * L9 / 2) + 2 * t88 * t2491 * t259;
      t2525 = L9 * t453;
      jac__2_12 = -t83 * t771 * (t445 * (t73 * t145 - t71 * t168 + 3) * theta1__dot - t145 * t1266 + t168 * t1271 + t1292 + theta1__dot) / 16 + t445 * t1837 * L9 * (t1208 / 2 - t1215 / 2 + t94 * (t1673 - t1676 + t1677) + t88 * t207) / 2 - t145 * t248 * (t73 * L8 * theta1__dot + t1321 * L7 - 2 * t1212 * t801) * L9 / 4 + t79 * (t307 * t1739 * theta1__dot - t125 * t1176 - t1183 * t133) * t771 / 4 + m6 * L9 * (t168 * (t1339 * L7 + L8 * t842 + 2 * t1205 * t801) * t94 / 2 + t307 * theta1__dot * (-t94 * t1739 * t207 + (-L8 * t1738 + t125 * t1247 + L5 + t1139 + t200) * t88) + t94 * (t125 * (-2 * t1240 * t2484 + t174 * t2495 + t1404) + t133 * (-t177 * t2495 - (2 * t174 * t270 + t1481) * t453) - 2 * t1251 * t2484 + 0.3e1 / 0.2e1 * L8 * t1402) + t125 * (t177 * t2523 + t2525 * t1174 / 2) + t133 * (-L9 * t177 * t1181 / 2 + t174 * t2523 - 2 * L7 * t88 * t1730) - (L6 * t206 * theta1__dot + 2 * t1251 * t449) * t88) / 2;
      jac__3_1 = t20 - t22 + m3 * (theta2__dot__dot * t12 - 0.2e1 * s__dot * theta2__dot);
      t2559 = L4 ^ 2;
      t2561 = s ^ 2;
      t2563 = s * L4;
      t2572 = t19 ^ 2;
      t2604 = 0.1e1 * IX2;
      t2605 = 0.1e1 * IX3;
      jac__3_3 = t2572 * t1 * (m3 * (-0.2e1 * t48 + (-0.2e1 * L4 - 0.4000000000e1 * s) * L3 - 0.5000000000e0 * t2559 - 0.2e1 * t2561 - 0.2e1 * t2563) - 0.5000000000e0 * t49 + 0.2e1 * IX2 + 0.2e1 * IX3) + t19 * (-0.1e1 * lambda1 * L3 - 0.1e1 * lambda1 * L4 - 0.1e1 * lambda1 * s) + t14 * ((0.4905e1 * L4 + 0.9810000000e1 * s + 0.981e1 * L3) * m3 + (0.4905000000e1 * m2 - 0.1e1 * lambda2) * L3 - 0.1e1 * lambda2 * L4 - 0.1e1 * lambda2 * s) + t1 * (m3 * (t48 + (0.2000000000e1 * s + L4) * L3 + t2563 + t2561 + 0.2500000000e0 * t2559) + 0.2500000000e0 * t49 - t2604 - t2605);
      jac__3_7 = -jac__1_9;
      jac__3_8 = -theta1__dot * (m3 * (t48 + L3 * (t9 + L4) + t2561 + 0.25e0 * t2559 + t2563) + 0.25e0 * t49 - t2604 - t2605) * t37;
      jac__3_9 = -t29 * s__dot * m3;
      t2619 = IZ6 * t1;
      t2620 = 0.2500000000e0 * t2619;
      t2621 = m6 * t1;
      t2622 = t65 * t2621;
      t2624 = -t2620 + 0.6250000000e-1 * t2622;
      t2626 = t1 * t110;
      t2628 = 0.5000000000e0 * t2626 * t111;
      t2629 = 0.5000000000e0 * t100;
      t2630 = 0.6250000000e-1 * t65;
      t2631 = -t2629 - t2630;
      t2632 = t1 * t2631;
      t2633 = m6 * t2632;
      t2637 = 0.5000000000e0 * t2626 * t744;
      t2638 = t2621 * t1844;
      t2641 = t125 * (t2637 - 0.1e1 * t2638);
      t2642 = t137 * t1;
      t2644 = 0.5000000000e0 * m6 * t2642;
      t2645 = 0.5000000000e0 * t138;
      t2646 = 0.5000000000e0 * IX5;
      t2647 = -t2645 + t2646;
      t2648 = t1 * t2647;
      t2651 = -t2624;
      t2652 = t79 * t2651;
      t2653 = -t2631;
      t2654 = t1 * t2653;
      t2655 = m6 * t2654;
      t2658 = -t2637 + t2638;
      t2659 = t133 * t2658;
      t2662 = 0.1875000000e0 * t2622;
      t2663 = 0.7500000000e0 * t2619;
      t2664 = t2662 - t2663;
      t2666 = m5 * t184;
      t2669 = m6 * t184;
      t2675 = t201 * m6;
      t2676 = t88 * t2675;
      t2678 = m6 * t199;
      t2679 = t1 * t2678;
      t2680 = t2679 * t601;
      t2681 = 0.2000000000e1 * t2680;
      t2682 = t2621 * t1814;
      t2683 = 0.2000000000e1 * t2682;
      t2686 = L6 * L7;
      t2687 = t1 * m5;
      t2688 = t2687 * t2686;
      t2690 = t2621 * t2686;
      t2692 = -0.2000000000e1 * t2688 - 0.2000000000e1 * t2690;
      t2694 = L5 * L7;
      t2695 = t2687 * t2694;
      t2697 = t2621 * t2694;
      t2701 = t2621 * t1838;
      t2703 = t2679 * t370;
      t2714 = -0.2000000000e1 * t2687 * t278 - 0.2000000000e1 * t2621 * t278;
      t2716 = t1 * t1512;
      t2717 = t2716 * t1474;
      t2721 = -t2629 + t2630 - 0.1e1 * t288 - 0.5000000000e0 * t137;
      t2729 = -t2645 + t288 * (-0.1e1 * m5 - 0.4000000000e1 * m4) + t2646 + IX4 - 0.2500000000e0 * IZ6;
      t2731 = t145 * (t73 * (t79 * t2624 + t2620 + t2628 + t2633) + t2641 - t2644 + t2648) + t168 * (t71 * (t2652 - t2628 + t2655 - t2620) + t2659) + t79 * t2664 + t188 * (-0.1e1 * t1 * t2666 - 0.1e1 * t1 * t2669) + t174 * (t125 * (t2676 * L9 * t1 - t2681 - t2683) + t199 * t2692 - 0.2000000000e1 * t2695 - 0.2000000000e1 * t2697) + t2641 + t133 * t177 * (t88 * (-0.1e1 * t2701 - 0.1e1 * t2703) + t2681 + t2683) + t2628 + t199 * t2714 - 0.1e1 * t2717 + m6 * t1 * t2721 + t1 * t2729;
      t2733 = IZ6 * theta5__dot;
      t2734 = theta1__dot * t2733;
      t2735 = 0.5000000000e0 * t2734;
      t2736 = t69 * t66;
      t2738 = -t2735 + 0.1250000000e0 * t2736;
      t2739 = t448 * t2738;
      t2741 = t88 * t111;
      t2742 = t198 * t2741;
      t2743 = theta5__dot * t100;
      t2745 = 0.1250000000e0 * t626;
      t2746 = -0.1e1 * t2743 - t2745;
      t2754 = t65 * theta1__dot__dot * m6;
      t2756 = theta1__dot__dot * IZ6;
      t2757 = 0.2500000000e0 * t2756;
      t2761 = theta1__dot * IZ6;
      t2762 = theta6__dot * t2761;
      t2764 = t93 * t66;
      t2771 = t100 * theta1__dot__dot;
      t2773 = t65 * theta1__dot__dot;
      t2779 = t79 * t448 * (0.6250000000e-1 * t2754 - t2757) + t83 * t448 * (0.5000000000e0 * t2762 - 0.1250000000e0 * t2764) + t448 * (0.5000000000e0 * t91 + 0.5000000000e0 * t98 + m6 * (-0.5000000000e0 * t2771 - 0.6250000000e-1 * t2773) + t2757);
      t2781 = t88 * t744;
      t2782 = t198 * t2781;
      t2783 = t198 * t1844;
      t2784 = 0.2000000000e1 * t2783;
      t2787 = t90 * t1113;
      t2789 = t96 * t1113;
      t2791 = theta6__dot * t1837;
      t2792 = t2791 * t665;
      t2793 = 0.5000000000e0 * t2792;
      t2794 = 0.5000000000e0 * t2787 - 0.1e1 * t2789 + t2793;
      t2796 = t69 * t139;
      t2798 = 0.1e1 * t138;
      t2799 = -t2798 + IX5;
      t2800 = theta5__dot * t2799;
      t2807 = -t2738;
      t2811 = t2743 + t2745;
      t2822 = t137 * theta1__dot__dot;
      t2823 = m5 * t2822;
      t2825 = m6 * t2822;
      t2827 = theta1__dot__dot * IX5;
      t2833 = 0.2500000000e0 * t2764;
      t2835 = t2833 - 0.1e1 * t2762;
      t2843 = 0.2500000000e0 * t2622;
      t2845 = t2843 - 0.1e1 * t2619;
      t2848 = -t2843 + t2619;
      t2851 = t174 * t125 * t2845 + t133 * t177 * t2848;
      t2855 = t2716 * t1562;
      t2857 = t2716 * t601;
      t2858 = 0.2000000000e1 * t2857;
      t2860 = t97 * t94 * t1;
      t2866 = t1 * t248;
      t2867 = t2866 * t744;
      t2882 = 0.1e1 * t2734;
      t2883 = 0.2500000000e0 * t2736;
      t2884 = -t2882 + t2883;
      t2887 = 0.5000000000e0 * t2756;
      t2888 = 0.1250000000e0 * t2754 - t2887;
      t2895 = t2734 - t2883;
      t2902 = L9 * t69;
      t2905 = 0.2000000000e1 * t198 * t1814;
      t2907 = 0.2000000000e1 * t198 * t916;
      t2911 = 0.5000000000e0 * t257 * t212;
      t2912 = t199 * L9;
      t2913 = m6 * t2912;
      t2915 = 0.5000000000e0 * t2913 * t210;
      t2916 = t2911 + t2915;
      t2917 = t88 * t2916;
      t2918 = t96 * t210;
      t2920 = t2791 * t1474;
      t2924 = 0.1e1 * t96 * t212;
      t2927 = t2917 + t199 * (-0.1e1 * t2918 + t2920) - t2924 + t2791 * t94 * t1838;
      t2931 = theta1__dot * m5;
      t2932 = theta5__dot * t2931;
      t2935 = -0.2000000000e1 * t198 * t2686 - 0.2000000000e1 * t2932 * t2686;
      t2938 = 0.2000000000e1 * t198 * t2694;
      t2940 = 0.2000000000e1 * t2932 * t2694;
      t2946 = t199 * t370;
      t2951 = -0.1e1 * t198 * t2946 - 0.1e1 * t198 * t1838;
      t2953 = t88 * t2951 + t2905 + t2907;
      t2957 = L7 * m5;
      t2962 = -0.1e1 * t2957 * t210 - 0.1e1 * t118 * t210;
      t2968 = t199 * t2962 - 0.1e1 * t118 * t212 - 0.1e1 * t2957 * t212;
      t2972 = L6 * m6;
      t2974 = 0.9810000000e1 * L6 * m5 + 0.9810000000e1 * t2972;
      t2977 = 0.1e1 * t137;
      t2978 = 0.1e1 * t100;
      t2981 = -t2745 + theta5__dot * (-t2977 - t2978);
      t2985 = -t2798 - 0.500000000e0 * IZ6;
      t2986 = theta5__dot * t2985;
      t2991 = t206 * t370;
      t2992 = t198 * t2991;
      t2994 = 0.4905000000e1 * t257;
      t2995 = -0.1e1 * t2992 - t2994;
      t2997 = t198 * t375;
      t2998 = 0.1e1 * t2997;
      t3000 = 0.2000000000e1 * t198 * t372;
      t3001 = 0.9810000000e1 * t96;
      t3004 = L9 * t210;
      t3011 = t94 * t96;
      t3013 = 0.5000000000e0 * t3011 * t121;
      t3014 = -0.5000000000e0 * m6 * t369 * t3004 + t206 * (t2918 - 0.1e1 * t2920) - t3013 + t2833;
      t3016 = -t2935;
      t3017 = t206 * t3016;
      t3019 = 0.1e1 * t198 * t665;
      t3020 = 0.9810000000e1 * t118;
      t3021 = 0.9810000000e1 * t2957;
      t3027 = t2992 + t2994;
      t3032 = t206 * t1044;
      t3033 = t3032 * t210;
      t3035 = 0.5000000000e0 * t249 * t1113;
      t3039 = m6 * L5;
      jac__4_4 = t445 * t2731 + t145 * (t73 * (t79 * t2739 + t448 * (m6 * theta1__dot * t2746 + t2735 + t2742)) + t71 * t2779 + t448 * (t125 * (t2782 - t2784) + t133 * t2794 - 0.1e1 * t2796 + theta1__dot * t2800)) + t168 * (t73 * t2779 + t71 * (t79 * t448 * t2807 + t448 * (-0.1e1 * t2742 + m6 * theta1__dot * t2811 - t2735)) + t448 * (t125 * t2794 + t133 * (-0.1e1 * t2782 + t2784) - 0.5000000000e0 * t2823 - 0.5000000000e0 * t2825 + 0.5000000000e0 * t2827)) + t79 * (t453 * t125 * t177 * t2835 + t1279 * t133 * t2835 + t2739) + t307 * (t83 * t2851 + t366 * t184 * t1 + t174 * (t125 * (-0.1e1 * t2855 + t2858 - 0.1e1 * t2860) - t206 * t2692 - 0.1e1 * t2867) + t133 * t177 * (t2855 - t2858 + t2860) - 0.1e1 * t2679 * t1474 - t206 * t2714 - 0.1e1 * t2866 * t1838) + t83 * (t174 * t453 * (t125 * t2884 + t133 * t2888) + t453 * (t125 * t177 * t2888 + t133 * t177 * t2895)) + t448 * (t174 * (t125 * (t2676 * t2902 - t2905 - t2907) + t133 * t2927 + t199 * t2935 - t2938 - t2940) + t125 * (t177 * t2927 + t2782 - t2784) + t133 * (t177 * t2953 + t2793) + t177 * t2968 + t2742 + t206 * t2974 - 0.4905000000e1 * t249 + m6 * theta1__dot * t2981 + theta1__dot * t2986 + L5 * lambda1) + t174 * t453 * (t125 * (t88 * t2995 - t2998 + t3000 + t3001) + t133 * t3014 + t3017 - t3019 + t3020 + t3021) + t453 * (t125 * t177 * t3014 + t133 * t177 * (t88 * t3027 + t2997 - t3000 - t3001) + t177 * (t3033 - t3035) + t199 * t2974 + 0.9810000000e1 * t3039 + (0.1962e2 * m4 + lambda2 + 0.9810e1 * m5) * L5);
      t3050 = 0.6250000000e-1 * t1 * t65;
      t3055 = t453 * t2895;
      t3056 = theta4__dot__dot * IZ6;
      t3057 = 0.5000000000e0 * t3056;
      t3058 = t65 * theta4__dot__dot;
      t3059 = m6 * t3058;
      t3060 = 0.1250000000e0 * t3059;
      t3063 = t66 * t469;
      t3064 = 0.2500000000e0 * t3063;
      t3065 = IZ6 * t469;
      t3066 = 0.1e1 * t3065;
      t3067 = t3064 - t3066;
      t3070 = theta1__dot * t100;
      t3073 = theta1__dot * t65;
      t3086 = t307 * (t2652 - t2628 + m6 * (0.5000000000e0 * t1 * t100 + t3050) - t2620) + t79 * (t3055 + t3057 - t3060) + t83 * t3067 + t453 * (-0.2000000000e1 * t2742 + m6 * (0.2000000000e1 * theta5__dot * t3070 + 0.2500000000e0 * theta5__dot * t3073) - t2882) - 0.1e1 * t474 - 0.1e1 * t477 + m6 * (t100 * theta4__dot__dot + 0.1250000000e0 * t3058) - t3057;
      t3088 = -t2888;
      t3089 = t453 * t3088;
      t3090 = t66 * t487;
      t3091 = 0.2500000000e0 * t3090;
      t3092 = IZ6 * t487;
      t3093 = 0.1e1 * t3092;
      t3094 = t3089 + t3091 - t3093;
      t3096 = t453 * t2835;
      t3098 = 0.1e1 * t91;
      t3099 = 0.1e1 * t98;
      t3100 = 0.1250000000e0 * t2773;
      t3105 = theta5__dot * t2097;
      t3107 = 0.2000000000e1 * t3105 * t2741;
      t3108 = theta4__dot * t100;
      t3111 = theta4__dot * t65;
      t3114 = -0.2000000000e1 * theta5__dot * t3108 - 0.2500000000e0 * theta5__dot * t3111;
      t3118 = t125 * t2658;
      t3119 = -t2647;
      t3120 = t1 * t3119;
      t3129 = theta4__dot__dot * L7;
      t3134 = t453 * (0.4000000000e1 * t2783 - 0.2000000000e1 * t2782) - 0.1e1 * t476 * t665 - 0.1e1 * t90 * t3129 + 0.2000000000e1 * t96 * t3129;
      t3137 = 0.2000000000e1 * t2789;
      t3140 = t453 * (-0.1e1 * t2787 + t3137 - 0.1e1 * t2792);
      t3142 = 0.2000000000e1 * t3105 * t2781;
      t3143 = L8 * t118;
      t3145 = 0.4000000000e1 * t3143 * t487;
      t3151 = -0.2000000000e1 * IX5 + 0.2000000000e1 * t138;
      t3156 = t137 * theta4__dot__dot;
      t3166 = t2762 - t2833;
      t3167 = t453 * t3166;
      t3191 = m5 * theta4__dot;
      t3202 = -0.5000000000e0 * t2703 - 0.5000000000e0 * t2701;
      t3203 = t88 * t3202;
      t3206 = t201 * t1 * t96 + t3203;
      t3208 = t1 * L7;
      t3211 = t177 * (t125 * t3206 + t739 * t3208);
      t3213 = t174 * t133 * t3206;
      t3217 = t66 * t573;
      t3218 = 0.2500000000e0 * t3217;
      t3219 = IZ6 * t573;
      t3232 = 0.1250000000e0 * t2622 - 0.5000000000e0 * t2619;
      t3237 = t177 * t125 * t3232 + t174 * t133 * t3232;
      t3238 = t445 * t3237;
      t3241 = t65 * m6 * t557;
      t3243 = IZ6 * t557;
      t3245 = t448 * t2884 + 0.1250000000e0 * t3241 - 0.5000000000e0 * t3243;
      t3249 = m6 * t65 * theta5__dot__dot;
      t3250 = 0.1250000000e0 * t3249;
      t3251 = theta5__dot__dot * IZ6;
      t3252 = 0.5000000000e0 * t3251;
      t3265 = 0.5000000000e0 * t2855;
      t3267 = -t3265 - 0.5000000000e0 * t2860 + t2857;
      t3270 = t1 * L6;
      t3277 = t445 * (t177 * (t125 * t3267 - 0.5000000000e0 * t2867 + t3032 * t3270) + t174 * t133 * t3267);
      t3279 = t448 * t2995;
      t3283 = -0.5000000000e0 * t583 * L6 - 0.5000000000e0 * t641;
      t3285 = t1512 * L9 * t3283;
      t3286 = t2913 * t581;
      t3287 = 0.1e1 * t3286;
      t3288 = 0.5000000000e0 * t588;
      t3292 = m6 * L9 * (t3288 - 0.1e1 * t587);
      t3297 = t206 * L9;
      t3298 = m6 * t3297;
      t3300 = 0.5000000000e0 * t3298 * t592;
      t3301 = t476 * t2946;
      t3302 = 0.1e1 * t3301;
      t3303 = theta6__dot * t269;
      t3306 = 0.5000000000e0 * t583 * L8;
      t3307 = 0.5000000000e0 * t987;
      t3310 = m6 * L9 * (-0.1e1 * t3303 + t3306 - t3307);
      t3315 = m6 * t1811;
      t3322 = t453 * t2953 + t88 * (t3279 + t3285 - t3287 + t3292) + t448 * (t3001 - t2998 + t3000) + t94 * (t3300 - t3302 + t3310) + t557 * t1512 * t601 + 0.2000000000e1 * t3315 * t581 + m6 * (-0.2500000000e0 * t609 + 0.2000000000e1 * t607);
      t3328 = L9 * t3039;
      t3331 = -0.1e1 * t2791 * t2946 - 0.1e1 * t3328 * t93;
      t3339 = 0.5000000000e0 * m6 * t206 * t448 * t3004;
      t3341 = 0.5000000000e0 * t3298 * t1362;
      t3347 = 0.5000000000e0 * t257 * t87;
      t3348 = t2791 * t2991;
      t3350 = -t3347 - 0.1e1 * t3348;
      t3353 = m6 * t206 * L8;
      t3354 = t3353 * t210;
      t3357 = t754 * t2991;
      t3358 = 0.1e1 * t3357;
      t3360 = 0.5000000000e0 * t257 * t621;
      t3363 = t3353 * t1362;
      t3365 = 0.2000000000e1 * t3105 * t916;
      t3369 = -0.2000000000e1 * t487 * t1814 + 0.2500000000e0 * t627;
      t3377 = 0.5000000000e0 * t90 * t1421;
      t3381 = 0.5000000000e0 * t557 * L7;
      t3384 = -t3381 + 0.5000000000e0 * t583 * L7;
      t3388 = t2957 * t581;
      t3390 = t118 * t581;
      t3396 = theta4__dot__dot * m6;
      t3405 = t3315 * t210;
      t3406 = 0.1e1 * t3405;
      t3410 = 0.1e1 * t3328 * t487;
      t3412 = 0.1e1 * t3105 * t2946;
      t3417 = 0.1e1 * t3354;
      t3429 = t206 * t2962;
      t3440 = m5 * t2686;
      t3443 = L7 * t2972;
      jac__4_5 = t168 * (t73 * t3086 + t71 * (t79 * t3094 + t83 * t3096 + t453 * (-t3098 - t3099 + m6 * (t3100 + t2771) - t2887) + t3107 + m6 * t3114 + t3092) + t307 * (t3118 + t2644 + t3120) + t125 * t3134 + t133 * (t3140 + t3142 - t3145) + t453 * (0.2000000000e1 * t2796 + theta1__dot * theta5__dot * t3151) + m5 * t3156 + m6 * t3156 - 0.1e1 * theta4__dot__dot * IX5) + t145 * (t73 * (t79 * (t453 * t2888 - t3091 + t3092) + t83 * t3167 + t453 * (t91 + t98 + m6 * (-0.1e1 * t2771 - t3100) + t2887) - t3107 - m6 * t3114 - t3093) + t71 * t3086 + t307 * t2659 + t125 * (t453 * (-t3137 + t2787 + t2792) + t3145 - t3142) + t133 * t3134 + t453 * (-0.1e1 * t2823 - 0.1e1 * t2825 + t2827) + 0.2000000000e1 * t139 * t487 + theta5__dot * (0.2000000000e1 * t137 * t3191 - 0.2000000000e1 * theta4__dot * IX5)) + t307 * (t3211 + t3213) + t79 * (t177 * t133 * (t448 * t2835 + t3218 - 0.1e1 * t3219) + t174 * t125 * (t448 * t3166 - t3218 + t3219)) + t83 * (t3238 + t177 * (t125 * t3245 + t133 * (t448 * t2888 + t3250 - t3252)) + t174 * (t125 * (t448 * t3088 - t3250 + t3252) + t133 * t3245)) + t3277 + t177 * (t125 * t3322 + t133 * (t453 * (t2675 * t87 - t88 * t2916 + t94 * t3331) + t88 * (t201 * t487 * t257 - t3339 - t3341) + t448 * (t94 * t3350 + t2833 + t3354) + t94 * (-t3358 - t3360) + t3363 - t3365 + m6 * t3369) + t453 * (t199 * t3016 + t2938 + t2940) + t3377 + t448 * (-t3019 + t3017 + t3020 + t3021) + t248 * L9 * t3384 + t3032 * t641 + t199 * (0.2000000000e1 * t3388 + 0.2000000000e1 * t3390) + 0.2e1 * t2957 * t587 + 0.2e1 * t2694 * t3396) + t174 * (t125 * (t453 * (t94 * t201 * theta6__dot * theta1__dot * t257 + t2917 - t2924 - t3406) + t88 * (-t3410 + t3341 - t3412 + t3339) + t448 * (t94 * (t3348 + t3347) - t2833 - t3417) + t94 * (t3357 + t3360) - 0.1e1 * t3363 + t3365 - m6 * t3369) + t133 * t3322 + t453 * t2968 + t448 * (t3035 + t3429) + 0.5000000000e0 * t249 * t738 + t206 * (-0.1e1 * t2957 * t1362 - 0.1e1 * t118 * t1362) + t199 * (0.2000000000e1 * t3440 * t487 + 0.2000000000e1 * t3443 * t487) + 0.2e1 * m5 * t487 * t2694 + 0.2e1 * t3105 * t2694);
      t3472 = 0.5000000000e0 * t2764 - 0.2000000000e1 * t2762;
      t3474 = 0.2000000000e1 * t3219;
      t3475 = 0.5000000000e0 * t3217;
      t3476 = t448 * t3472 - t3474 + t3475;
      t3483 = t3065 - t3064;
      t3500 = -0.5000000000e0 * t2736 + 0.2000000000e1 * t2734;
      t3502 = 0.2500000000e0 * t3241;
      t3505 = 0.2500000000e0 * t2754;
      t3506 = t2756 - t3505;
      t3507 = t448 * t3506;
      t3508 = 0.2500000000e0 * t3249;
      t3509 = t3507 - t3508 + t3251;
      t3514 = -t3500;
      t3515 = t448 * t3514;
      t3516 = 0.1e1 * t3243;
      t3525 = 0.2500000000e0 * t2866 * t307 * t111;
      t3526 = t453 * t111;
      t3527 = t198 * t3526;
      t3529 = 0.5000000000e0 * t257 * t494;
      t3533 = 0.5000000000e0 * t476 * t2741;
      t3538 = m6 * t2525;
      t3543 = m6 * t453;
      t3544 = t93 * t3543;
      t3547 = t94 * (-0.1e1 * t97 * t487 + 0.5000000000e0 * t3538 * t87) - 0.5000000000e0 * t3544 * t2741;
      t3549 = t307 * t744;
      t3551 = t2621 * t125 * t94;
      t3555 = 0.5000000000e0 * t257 * t3129;
      t3556 = t453 * t744;
      t3557 = t198 * t3556;
      t3560 = m6 * t744;
      t3565 = -0.1e1 * t3560 * t487 + 0.5000000000e0 * t3538 * t1113;
      t3569 = m6 * t125;
      t3573 = t1307 * t744;
      t3585 = t2621 * t1628;
      t3604 = t257 * t3208;
      t3610 = t111 * t2621;
      t3616 = t174 * t370;
      t3617 = t206 * t125;
      t3618 = t2621 * t3617;
      t3619 = t3618 * t3616;
      t3621 = t177 * t370;
      t3622 = t2621 * t1785;
      t3623 = t3622 * t3621;
      t3627 = t174 * t111;
      t3628 = t2621 * t1081;
      t3631 = t177 * t111;
      t3632 = t2621 * t1098;
      t3635 = t174 * t744;
      t3652 = t453 * t2916 + t3339 + t3341 - t3410 - t3412;
      t3677 = t448 * t111;
      t3678 = t198 * t3677;
      t3685 = t453 * t3331 + t448 * t3350 - t3358 - t3360;
      t3706 = t448 * t744;
      t3707 = t198 * t3706;
      t3715 = m6 * t448 * L9;
      t3717 = 0.5000000000e0 * t3715 * t1113;
      t3719 = 0.5000000000e0 * t257 * t738;
      t3722 = 0.4905000000e1 * t3538;
      t3723 = t3298 * t581;
      jac__4_6 = t83 * (t145 * (t73 * (t307 * t2651 + t3055 + t3057 - t3060) + t71 * t3094) + t168 * (t73 * t3094 + t71 * (t307 * t2624 + t453 * t2884 - t3057 + t3060)) - t307 * t2664 + t125 * t177 * t3476 + t133 * t174 * t3476 + t3055 - t3057 + t3060) + t79 * (t145 * (t71 * t3167 + t73 * t3483) + t168 * (t71 * t3067 + t73 * t3167) + t445 * (t125 * t174 * t2848 + t133 * t177 * t2845) + t125 * (t174 * (t448 * t3500 + t3243 - t3502) + t177 * t3509) + t133 * (t174 * t3509 + t177 * (t3515 + t3502 - t3516)) - t3066 + t3064) + t145 * (t73 * (t3525 + t94 * (t3527 + t3529) - t3533) + t71 * t3547 + 0.2500000000e0 * t3551 * t3549 + t94 * (t125 * (t3555 + t3557) + t133 * t3565) - 0.5000000000e0 * t469 * t3569 * t2781 - 0.5000000000e0 * t93 * t332 * t3573) + t168 * (t73 * t3547 + t71 * (-t3525 + t94 * (-0.1e1 * t3527 - t3529) + t3533) - 0.2500000000e0 * t3585 * t3549 + t94 * (t125 * t3565 + t133 * (-t3555 - 0.1e1 * t3557)) + 0.5000000000e0 * t469 * t332 * t2781 - 0.5000000000e0 * t93 * t3569 * t3573) + t307 * (t94 * (t125 * (-t174 * t3202 + 0.2500000000e0 * t3604) + t133 * t177 * t3202 + 0.2500000000e0 * t3610) + t3265) + t445 * (t94 * (0.5000000000e0 * t3619 - 0.5000000000e0 * t3623) - 0.5000000000e0 * t3628 * t3627 + 0.5000000000e0 * t3632 * t3631 - 0.5000000000e0 * t2626 * t3635 + t3203) + t94 * (t125 * (t174 * (t453 * t2675 * t2902 + t448 * t3027 - t3297 * m6 * t3283 + t3286 + L9 * m6 * (-t3288 + t587)) + t177 * t3652 + t3555 + t3557) + t133 * (t174 * t3652 + t177 * (t453 * t2951 + t3279 + t3285 - t3287 + t3292)) - 0.5000000000e0 * m6 * t174 * L9 * t1421 + t3527 - 0.1e1 * t476 * t2991 - 0.5000000000e0 * t2913 * t592 + L9 * m6 * (-0.5000000000e0 * t690 + 0.5000000000e0 * t494)) + t125 * (t174 * t88 * (-0.1e1 * t3678 + t3300 - t3302 + t3310) + t88 * (t177 * t3685 - 0.5000000000e0 * t3560 * t469)) + t133 * (t174 * t88 * t3685 + t88 * (t177 * (t3678 - t3300 + t3301 + L9 * m6 * (t3303 + t3307 - t3306)) - 0.5000000000e0 * t2791 * t3556)) + t174 * t88 * (-0.1e1 * t3707 + L9 * m6 * t3384) + t88 * (t177 * (-t3717 - t3719) + t3722 - 0.1e1 * t3723 + 0.5000000000e0 * t583 * t2678 * t370 + L9 * m6 * (-0.5000000000e0 * t682 + 0.5000000000e0 * t979));
      t3735 = 0.2500000000e0 * t2761;
      t3736 = t65 * t1837;
      t3737 = 0.6250000000e-1 * t3736;
      t3738 = -t3735 + t3737;
      t3739 = t73 * t3738;
      t3741 = theta1__dot * t110;
      t3742 = t3741 * t111;
      t3743 = 0.5000000000e0 * t3742;
      t3748 = t1837 * t1844;
      t3750 = t3741 * t744;
      t3751 = 0.5000000000e0 * t3750;
      t3753 = t125 * (-0.1e1 * t3748 + t3751);
      t3755 = m6 * t137 * theta1__dot;
      t3756 = 0.5000000000e0 * t3755;
      t3760 = -t3738;
      t3761 = t71 * t3760;
      t3771 = 0.1875000000e0 * t3736;
      t3772 = 0.7500000000e0 * t2761;
      t3779 = -0.1e1 * theta1__dot * t2666 - 0.1e1 * theta1__dot * t2669;
      t3782 = theta1__dot * t2678;
      t3784 = 0.2000000000e1 * t3782 * t601;
      t3786 = 0.2000000000e1 * t1837 * t1814;
      t3789 = t2931 * t2686;
      t3791 = t1837 * t2686;
      t3793 = -0.2000000000e1 * t3789 - 0.2000000000e1 * t3791;
      t3795 = t2931 * t2694;
      t3796 = 0.2000000000e1 * t3795;
      t3797 = t1837 * t2694;
      t3798 = 0.2000000000e1 * t3797;
      t3800 = t174 * (t125 * (t2676 * t216 - t3784 - t3786) + t199 * t3793 - t3796 - t3798);
      t3801 = t1837 * t1838;
      t3803 = t3782 * t370;
      t3805 = -0.1e1 * t3801 - 0.1e1 * t3803;
      t3809 = t133 * t177 * (t88 * t3805 + t3784 + t3786);
      t3810 = theta1__dot * t1512;
      t3817 = -0.2000000000e1 * t1837 * t278 - 0.2000000000e1 * t2931 * t278;
      t3822 = t145 * (t79 * t3739 + t73 * (m6 * theta1__dot * t2631 + t3735 + t3743) + t3753 - t3756 + theta1__dot * t2647) + t168 * (t79 * t3761 + t71 * (m6 * theta1__dot * t2653 - t3735 - t3743) + t133 * (t3748 - t3751)) + t79 * (t3771 - t3772) + t188 * t3779 + t3800 + t3753 + t3809 + t3743 - 0.1e1 * t3810 * t1474 + t199 * t3817 + m6 * theta1__dot * t2721 + theta1__dot * t2729;
      t3824 = 0.5000000000e0 * t2733;
      t3825 = m6 * t626;
      t3827 = -t3824 + 0.1250000000e0 * t3825;
      t3828 = t453 * t3827;
      t3829 = t79 * t73;
      t3831 = theta5__dot * t110;
      t3832 = t3831 * t111;
      t3837 = IZ6 * theta6__dot;
      t3838 = 0.5000000000e0 * t3837;
      t3839 = theta6__dot * t66;
      t3845 = t83 * t453 * (t3838 - 0.1250000000e0 * t3839) + 0.5000000000e0 * t1701;
      t3847 = t3831 * t744;
      t3849 = 0.2000000000e1 * t1495 * t1844;
      t3853 = theta5__dot * t137;
      t3862 = t79 * t71;
      t3865 = 0.1e1 * t3832;
      t3880 = 0.2500000000e0 * t3736;
      t3881 = t2761 - t3880;
      t3885 = -0.1e1 * t2761 + t3880;
      t3888 = t174 * t125 * t3881 + t133 * t177 * t3885;
      t3892 = 0.2000000000e1 * t3810 * t601;
      t3894 = t97 * t94 * theta1__dot;
      t3895 = t3810 * t1562;
      t3898 = theta1__dot * t248;
      t3899 = t3898 * t744;
      t3903 = 0.1e1 * t3894;
      t3913 = 0.2500000000e0 * t3839;
      t3914 = t3837 - t3913;
      t3915 = t448 * t3914;
      t3920 = 0.2500000000e0 * t3825;
      t3921 = t2733 - t3920;
      t3924 = 0.1e1 * t2733;
      t3925 = -t3924 + t3920;
      t3926 = t448 * t3925;
      t3932 = theta5__dot * t2678;
      t3934 = 0.2000000000e1 * t3932 * t601;
      t3936 = 0.2000000000e1 * t1495 * t1814;
      t3939 = L9 * t1573;
      t3942 = m5 * theta5__dot;
      t3943 = t3942 * t2686;
      t3945 = t1495 * t2686;
      t3947 = -0.2000000000e1 * t3943 - 0.2000000000e1 * t3945;
      t3955 = t177 * t2675;
      t3975 = t448 * t370;
      t3977 = t1495 * t369 * t3975;
      t3979 = m6 * theta5__dot * t94;
      t3980 = t3979 * t111;
      t3983 = 0.2000000000e1 * theta5__dot * t1512 * t601;
      t3988 = t1594 * t1474;
      t3990 = t448 * (-t3913 + t3988);
      t3992 = t3979 * t744;
      t4000 = 0.1e1 * t3980;
      jac__4_8 = t307 * t3822 + t145 * (t3829 * t3828 + t73 * t453 * (m6 * t2746 + t3824 + t3832) + t71 * t3845 + t453 * (t125 * (t3847 - t3849) + 0.5000000000e0 * t666 - 0.1e1 * m6 * t3853 + t2800)) + t168 * (-t3862 * t453 * t3827 + t73 * t3845 + t71 * t453 * (m6 * t2811 - t3824 - t3865) + t453 * (0.5000000000e0 * theta6__dot * t3569 * t665 + t133 * (-0.1e1 * t3847 + t3849))) + t445 * (t83 * t3888 + t194 * t3779 + t174 * (t125 * (-t3892 + t3894 + t3895) + t3899 + t206 * t3793) + t133 * t177 * (t3892 - t3903 - 0.1e1 * t3895) + t94 * t2675 * t216 + t206 * t3817) + t79 * (t545 * t3915 + t547 * t3915 + t3828) + t83 * (t1737 * t448 * t3921 + t1738 * t3926) + t453 * (t174 * (t125 * (t2676 * theta5__dot * L9 - t3934 - t3936) + t133 * t2675 * t3939 + t199 * t3947 - 0.2000000000e1 * t3942 * t2694 - 0.2000000000e1 * t1495 * t2694) + t125 * (t3955 * t3939 + t3847 - t3849) + t133 * (t177 * (t88 * (-0.1e1 * t1495 * t1838 - 0.1e1 * t3932 * t370) + t3934 + t3936) + 0.5000000000e0 * theta6__dot * t248 * t744) + t3832 + m6 * t2981 + t2986) + t174 * (t125 * (t3977 + t448 * (t3980 - t3983)) + t133 * t3990 + t448 * (t206 * t3947 + t3992)) + t545 * t3990 + t133 * t177 * (-0.1e1 * t3977 + t448 * (-t4000 + t3983));
      t4010 = t177 * theta5__dot;
      t4011 = m5 * t2694;
      t4014 = L7 * t3039;
      t4025 = theta6__dot * L6;
      t4027 = cos(-theta6 + phi1);
      t4032 = cos(theta6 + phi1);
      t4040 = 0.2000000000e1 * t2417 * t1495 - t2420 * t1495 / 2 + 0.2e1 * t4011 * t4010 + 0.2e1 * t4014 * t4010 + 0.2500000000e0 * t1851 * t663 + 0.2500000000e0 * t1856 * t1129 + 0.2500000000e0 * t1861 * t1129 + 0.2500000000e0 * t1866 * t663 - t4027 * t257 * t4025 / 2 + t4032 * t257 * t4025 / 2 + t1934 * t4025 / 4 + t1939 * t4025 / 4;
      t4062 = cos(phi2 - theta6);
      t4067 = cos(phi2 + theta6);
      t4073 = t1944 * t4025 / 4 + t1949 * t4025 / 4 + t1841 * t1495 / 2 + 0.2000000000e1 * t1847 * t1495 - t1851 * t1495 / 2 - t1856 * t1582 / 2 + t1861 * t1582 / 2 + t1866 * t1495 / 2 + t2420 * t663 / 2 + t1841 * t663 / 2 + 0.2500000000e0 * t4062 * t257 * t1129 + 0.2500000000e0 * t4067 * t257 * t1129 + t1934 * t619 / 4;
      t4105 = t1939 * t619 / 4 - t1944 * t619 / 4 - t1949 * t619 / 4 + 0.1000000000e1 * t2358 * t2957 * t619 - 0.1000000000e1 * t1928 * t2957 * t619 + 0.1000000000e1 * t2358 * t2686 * t1495 - 0.1000000000e1 * t1928 * t2686 * t1495 + 0.1000000000e1 * t2408 * t619 - 0.5000000000e0 * t83 * t3837 - t168 * IX5 * theta5__dot + 0.2500000000e0 * t2152 * t2733 + 0.2500000000e0 * t2156 * t2733 - 0.5000000000e0 * t2257 * t2733;
      t4117 = t2156 * t65;
      t4123 = t2152 * t65;
      t4135 = -0.2500000000e0 * t2152 * t3837 + 0.2500000000e0 * t2156 * t3837 - 0.1000000000e1 * t2413 * t619 + 0.5000000000e0 * t1641 + t168 * m6 * t3853 + t168 * t137 * t3942 - 0.6250000000e-1 * t4117 * t1495 + 0.1250000000e0 * t2257 * t65 * t1495 - 0.6250000000e-1 * t4123 * t1495 + t2257 * t100 * t1495 + 0.1250000000e0 * t83 * t65 * t663 - 0.6250000000e-1 * t4117 * t663 + 0.6250000000e-1 * t4123 * t663;
      jac__4_10 = t4040 + t4073 + t4105 + t4135;
      t4137 = 0.5000000000e0 * t2761;
      t4139 = -t4137 + 0.1250000000e0 * t3736;
      t4140 = t453 * t4139;
      t4142 = t65 * t2097;
      t4143 = 0.1250000000e0 * t4142;
      t4144 = theta4__dot * IZ6;
      t4145 = 0.5000000000e0 * t4144;
      t4146 = -t4143 + t4145;
      t4148 = t73 * t4140 + t71 * t4146;
      t4150 = 0.1250000000e0 * t65;
      t4155 = t453 * (t3742 + m6 * theta1__dot * (-t2978 - t4150) + t4137);
      t4157 = theta4__dot * t110;
      t4158 = t4157 * t111;
      t4159 = 0.1e1 * t4158;
      t4160 = 0.1250000000e0 * t3111;
      t4161 = t3108 + t4160;
      t4163 = m6 * t4161 - t4145 - t4159;
      t4165 = 0.2000000000e1 * t3748;
      t4167 = t125 * (-t4165 + t3750);
      t4176 = 0.2000000000e1 * t1844 * t2097 - 0.1e1 * t4157 * t744;
      t4182 = -t453 * t4139;
      t4184 = t73 * t4146 + t71 * t4182;
      t4187 = 0.1e1 * t3742;
      t4192 = t453 * (-t4187 + m6 * theta1__dot * (t100 + t4150) - t4137);
      t4200 = m6 * t137 * theta4__dot;
      t4202 = -0.1e1 * IX5 + t138;
      t4203 = theta4__dot * t4202;
      t4207 = t174 * t133 * t3914;
      t4209 = t125 * t177 * t3914;
      t4212 = t448 * t3881;
      t4213 = t4212 - t3920 + t2733;
      t4216 = t448 * t3885;
      t4217 = t4216 + t3920 - t3924;
      t4229 = t448 * theta1__dot + theta5__dot;
      t4235 = m6 * t448;
      t4239 = -0.2000000000e1 * t1495 * t601 - 0.2000000000e1 * theta1__dot * t4235 * t601;
      t4241 = t4229 * t257;
      t4242 = t4241 * t374;
      t4247 = theta4__dot * t2678;
      t4248 = t4247 * t370;
      t4249 = 0.1e1 * t4248;
      t4250 = -0.1e1 * t1838 * t2097 - t4249;
      t4252 = t4247 * t601;
      t4255 = 0.2500000000e0 * t1817;
      t4256 = 0.2000000000e1 * t1815 - t4255;
      t4258 = t88 * t4250 + t3988 + 0.2000000000e1 * t4252 + m6 * t4256;
      t4266 = t4241 * L7 * t94;
      t4281 = 0.1e1 * t3898 * t3677;
      t4284 = t2957 * t1770;
      t4286 = t2686 * t2097;
      t4291 = 0.2e1 * t3191 * t2694;
      t4293 = 0.2e1 * t2097 * t2694;
      jac__4_11 = t145 * (t79 * t4148 + t73 * t4155 + t71 * t4163 + t453 * (t4167 - 0.1e1 * t3755 + theta1__dot * t2799) + t133 * t4176) + t168 * (t79 * t4184 + t73 * t4163 + t71 * t4192 + t453 * t133 * (t4165 - 0.1e1 * t3750) + t125 * t4176 + t4200 + t4203) + t79 * (t4140 + t4207 + t4209) + t83 * (t174 * t125 * t4213 + t177 * t133 * t4217) + t453 * (t3800 + t4167 + t3809 + t3742 + m6 * theta1__dot * (-t2977 - t2978 - t4150) + theta1__dot * t2985) + t174 * (t125 * (t88 * t4229 * m6 * t2991 + t206 * t4239 + t4242) + t133 * t4258 + t206 * (t448 * t3793 - 0.2e1 * t3945 - 0.2e1 * t3943) + t4266) + t125 * t177 * t4258 + t177 * (t133 * (t88 * t206 * (-0.1e1 * t3715 * t258 - 0.1e1 * t257 * t619) - t206 * t4239 - t4281 - t4000) + t199 * (0.2000000000e1 * t4284 + 0.2000000000e1 * t4286) + t4291 + t4293);
      t4298 = -t4146;
      t4300 = t73 * t4182 + t71 * t4298;
      t4304 = t73 * t111;
      t4305 = theta4__dot * t248;
      t4307 = 0.5000000000e0 * t4305 * t4304;
      t4308 = t71 * t111;
      t4309 = t453 * t94;
      t4310 = t1837 * t4309;
      t4312 = 0.5000000000e0 * t4310 * t4308;
      t4313 = theta1__dot * t332;
      t4316 = theta4__dot * t3569;
      t4319 = 0.5000000000e0 * t4313 * t3556 + 0.5000000000e0 * t4316 * t744;
      t4330 = 0.5000000000e0 * t4310 * t4304;
      t4332 = 0.5000000000e0 * t4305 * t4308;
      t4333 = theta1__dot * t3569;
      t4336 = theta4__dot * t332;
      t4339 = 0.5000000000e0 * t4333 * t3556 - 0.5000000000e0 * t4336 * t744;
      t4344 = -0.1e1 * t270 + t269;
      t4347 = L9 * m6 * t4344 + t4248;
      t4352 = (t4229 * t207 + t453 * t2494) * L9;
      t4355 = 0.5000000000e0 * t257 * t1481;
      t4360 = t270 - 0.1e1 * t269;
      t4365 = theta1__dot * t3543;
      t4377 = 0.5000000000e0 * t220;
      t4383 = t663 * t369;
      t4385 = t448 * t65;
      t4387 = 0.2500000000e0 * t1837 * t4385;
      t4388 = -t4387 - t3920;
      jac__4_12 = t83 * (t145 * t4184 + t168 * t4300 + t4143 - t4145) + t145 * (t94 * t4319 + t4307 + t4312) + t79 * (t125 * t177 * t4213 + t133 * t174 * t4213) + t168 * (t94 * t4339 + t4330 - t4332) + t94 * (t125 * (t174 * t4347 + t1807 * t4352 + t4355) + t133 * (t1744 * t4352 + t177 * (L9 * m6 * t4360 - t4249) + 0.5000000000e0 * t4365 * t744) - 0.1e1 * theta6__dot * t1744 * t744 - 0.1e1 * theta6__dot * t2678 * t370 + L9 * m6 * (-0.1e1 * t219 + t4377)) + t125 * (t177 * t4388 + t4383 * t3616) + t133 * (t174 * t4388 - 0.1e1 * t4383 * t3621) - 0.1e1 * theta4__dot * t1512 * t1562;
      t4400 = t71 * t2651;
      t4402 = -t2628 + t2655 - t2620;
      t4404 = t79 * t4400 + t71 * t4402 + t2659;
      t4406 = t73 * t2651;
      t4413 = IZ6 * t192;
      t4414 = 0.5000000000e0 * t4413;
      t4415 = t66 * t192;
      t4416 = 0.1250000000e0 * t4415;
      t4417 = t4414 - t4416;
      t4420 = theta4__dot * t1837;
      t4421 = t4420 * t2741;
      t4422 = 0.1e1 * t4421;
      t4428 = t4420 * t2781;
      t4430 = t3143 * t192;
      t4431 = 0.2000000000e1 * t4430;
      t4433 = t125 * (-0.1e1 * t4428 + t4431);
      t4434 = t139 * t192;
      t4444 = -0.1e1 * t3108 - t4160;
      t4457 = t133 * t3166;
      t4465 = t133 * t3088;
      t4469 = 0.2500000000e0 * t4415;
      t4470 = t4413 - t4469;
      t4471 = t453 * t4470;
      t4474 = -0.1e1 * t4413 + t4469;
      t4476 = t177 * t453;
      t4480 = t4420 * t2946;
      t4483 = 0.5000000000e0 * t3298 * t210;
      t4486 = -0.1e1 * t4480 - t4483 + t1837 * L9 * t4360;
      t4489 = 0.2000000000e1 * t4420 * t916;
      t4495 = -0.4905000000e1 * t90 + t3001;
      t4497 = t2791 * t2781;
      t4502 = 0.2000000000e1 * t3440 * t192 + 0.2000000000e1 * t3443 * t192;
      t4505 = 0.2000000000e1 * t4011 * t192;
      t4507 = 0.2000000000e1 * t4014 * t192;
      t4513 = t1837 * L9 * t4344 + t4480 + t4483;
      t4518 = -m6 * theta1__dot * t4256 + t88 * t4513 + t3013 - t3417 - t4489;
      t4520 = t125 * t4495 + t133 * t4518 + t3020 + t3021;
      t4522 = t137 + t100;
      t4524 = t4522 * theta4__dot + t4160;
      t4528 = 0.5000000000e0 * IZ6 + t138;
      t4529 = theta4__dot * t4528;
      t4533 = t4420 * t2991;
      t4534 = -t2915 - t2911 + t4533;
      t4537 = 0.2000000000e1 * t4420 * t372;
      t4541 = (t94 * theta4__dot * t216 + t212) * t96;
      t4545 = t199 * t1044;
      t4547 = -t4502;
      t4548 = t206 * t4547;
      t4551 = (t186 * t212 + t250) * L7;
      t4557 = t2915 + t2911 - 0.1e1 * t4533;
      jac__5_4 = t307 * (t145 * t4404 + t168 * (t73 * t4402 + t79 * t4406 + t2644 + t3118 + t3120) + t3213 + t3211) + t145 * (t3829 * t448 * t4417 + t73 * t448 * (m6 * theta1__dot * t4161 - t4414 - t4422) + t448 * (theta1__dot * t4203 + t4433 + t4434)) + t168 * (-t3862 * t448 * t4417 + t71 * t448 * (m6 * theta1__dot * t4444 + t4414 + t4421) + t448 * t133 * (t4428 - t4431)) + t79 * (t448 * (t174 * t125 * t2835 + t177 * t4457 + t4414 - t4416) + t3089) + t83 * (t3238 + t448 * (t174 * t125 * t2888 + t177 * t4465) + t1737 * t4471 + t4476 * t133 * t4474 + t3096) + t3277 + t448 * (t174 * (t125 * (m6 * theta1__dot * t4256 + t88 * t4486 - t3013 + t3354 + t4489) + t133 * t4495 + t4497 + t199 * t4502 + t3033 - t3035 + t4505 + t4507) + t177 * t4520 + t4433 - t4422 + m6 * theta1__dot * t4524 + theta1__dot * t4529) + t174 * (t125 * t453 * (t88 * t4534 + t3405 - t4537 + t4541) + t453 * (t4545 * t210 + t4548 + t4551)) + t4476 * t133 * (t88 * t4557 + t4537 - 0.1e1 * t4420 * t375 - t2924 - t3406) + t125 * t3140 + t453 * (-t3098 - t3099 + m6 * (t4522 * theta1__dot__dot + t3100) + t2887 + t2823);
      t4570 = t73 * t2624;
      t4577 = 0.1250000000e0 * t454 * t65;
      t4578 = -t3050 + t4577;
      t4580 = t454 * IZ6;
      t4581 = 0.5000000000e0 * t4580;
      t4584 = t453 * t4474;
      t4585 = t71 * t4584;
      t4589 = 0.5000000000e0 * t1 * t111;
      t4590 = t454 * t111;
      t4594 = t454 * t100;
      t4607 = t453 * (0.2000000000e1 * t4421 + m6 * theta1__dot * (-0.2000000000e1 * t3108 - 0.2500000000e0 * t3111) + t4413);
      t4611 = -0.4000000000e1 * t4430 + 0.2000000000e1 * t4428;
      t4615 = 0.5000000000e0 * t1 * t744;
      t4616 = t454 * t744;
      t4621 = 0.2000000000e1 * t454 * t1844;
      t4622 = t1 * t1844;
      t4636 = t73 * t4584;
      t4672 = 0.2500000000e0 * t2701 + 0.2500000000e0 * t2703;
      t4674 = 0.5000000000e0 * t2680;
      t4675 = 0.5000000000e0 * t2682;
      t4679 = 0.5000000000e0 * t2688;
      t4680 = -0.5000000000e0 * t2690 - t4679;
      t4683 = 0.5000000000e0 * t2695;
      t4686 = -t4672;
      t4711 = -t3060 + t3057;
      t4713 = t448 * t4470;
      t4729 = 0.5000000000e0 * t2857 - 0.2500000000e0 * t2860 - 0.2500000000e0 * t2855;
      t4746 = 0.2500000000e0 * t1 * t370 + 0.5000000000e0 * t454 * t370;
      t4749 = 0.5000000000e0 * t3723;
      t4751 = 0.2500000000e0 * t1 * t1838;
      t4752 = 0.5000000000e0 * t681;
      t4753 = 0.1e1 * t682;
      t4761 = 0.5000000000e0 * t1 * t601;
      t4766 = t3353 * t581;
      t4769 = 0.5000000000e0 * t3011 * t492;
      t4770 = 0.2500000000e0 * t703;
      t4773 = 0.5000000000e0 * t1 * t1814;
      t4779 = m6 * t199 * t448;
      t4790 = t88 * (-0.5000000000e0 * t4779 * t3004 + t448 * (-t2911 + t4533)) + t4779 * L8 * t210 + t448 * (-t4537 + t4541);
      t4800 = t454 * m5;
      t4810 = 0.5000000000e0 * t249 * t3129;
      jac__5_5 = t145 * (t445 * (t79 * t4570 + t73 * (t2628 + t2633 + t2620) + t2641 - t2644 + t2648) + t79 * (t73 * (m6 * t4578 + t2620 - t4581) + t4585) + t73 * (t88 * m6 * (-t4589 + t4590) + m6 * (t2654 - 0.1e1 * t4594 - t4577) + t4581 - t2620) + t71 * t4607 + t453 * t133 * t4611 + t125 * (t88 * m6 * (-t4615 + t4616) + m6 * (-t4621 + t4622)) + m6 * (-0.1e1 * t137 * t454 + 0.5000000000e0 * t2642) + t3120 + t454 * t2799) + t168 * (t445 * t4404 + t79 * (t4636 + t71 * (-m6 * t4578 - t2620 + t4581)) + t73 * t4607 + t71 * (t88 * m6 * (-0.1e1 * t4590 + t4589) + m6 * (t2632 + t4594 + t4577) - t4581 + t2620) + t453 * (t125 * t4611 - 0.2000000000e1 * t4434 - theta1__dot * theta4__dot * t3151) + t133 * (t88 * m6 * (t4615 - 0.1e1 * t4616) + m6 * (-0.1e1 * t4622 + t4621))) + t445 * (t174 * (t125 * (t88 * t4672 - t4674 - t4675) + t199 * t4680 - 0.5000000000e0 * t2697 - t4683) + t177 * t133 * (t88 * t4686 + t4674 + t4675)) + t79 * (t174 * (t125 * t3483 + t453 * t4457) + t177 * (t453 * t125 * t3166 + t133 * t3067)) + t83 * (t307 * (t174 * t125 * t2624 + t177 * t133 * t2651) + t174 * (t125 * t4711 + t133 * t4713 + t453 * t4465) + t177 * (t453 * t125 * t3088 + t125 * t4713 - t133 * t4711)) + t307 * (t174 * (t125 * t4729 - t206 * t4680 - 0.2500000000e0 * t2867) - t177 * t133 * t4729) + t174 * (t453 * t4520 + t125 * (t88 * (t199 * m6 * t4746 + t4749 + m6 * (t4751 + L9 * (t4752 - t4753))) + t199 * m6 * (-t4761 - 0.1e1 * t602) - 0.1e1 * t4766 + t4769 + m6 * (t4770 - 0.1e1 * t698 - t4773)) + t133 * t4790 - 0.1e1 * t476 * t2781 + t199 * (m6 * (-0.1e1 * t454 * t2686 - 0.5000000000e0 * t1 * t2686) - 0.1e1 * t4800 * t2686 - t4679) + t206 * (-0.1e1 * t3388 - 0.1e1 * t3390) + t4810 + m6 * (-0.1e1 * t454 * t2694 - 0.5000000000e0 * t1 * t2694) - 0.1e1 * t4800 * t2694 - t4683) + t177 * (t453 * (t125 * t4518 - t133 * t4495 - 0.1e1 * t4497 + t199 * t4547 + t3429 - t4505 - t4507 + t3035) + t125 * t4790 + t133 * (t88 * (-t199 * m6 * t4746 - t4749 + m6 * (-t4751 + L9 * (-t4752 + t682))) + t199 * m6 * (t4761 + t602) + t4766 - t4769 + m6 * (t698 - t4770 + t4773)) + t4545 * theta1__dot__dot * t448 * L6 + t448 * (t4548 + t4551));
      t4853 = 0.1250000000e0 * t454;
      t4854 = 0.6250000000e-1 * t1;
      t4855 = -t4853 + t4854;
      t4858 = t65 * m6 * t4855 - t2620 + t4581;
      t4859 = t71 * t4858;
      t4867 = -t3472;
      t4872 = 0.5000000000e0 * t3063 - 0.2000000000e1 * t3065;
      t4889 = 0.5000000000e0 * t4415 - 0.2000000000e1 * t4413;
      t4894 = -0.2500000000e0 * t3059 + t3056;
      t4901 = -t448 * t4889;
      t4909 = t1 * t332;
      t4917 = t192 * t3543;
      t4921 = t1 * L8;
      t4924 = m6 * (0.5000000000e0 * t986 - 0.2500000000e0 * t4921);
      t4928 = t192 * t3569 * t3556;
      t4931 = t454 * L7;
      t4934 = m6 * (-0.2500000000e0 * t3208 + 0.5000000000e0 * t4931);
      t4935 = t133 * L9;
      t4941 = t1 * t3569;
      t4952 = t125 * L9;
      t4955 = t192 * t332 * t3556;
      t4962 = t174 * t4672;
      t4977 = t177 * t744;
      t4988 = 0.2500000000e0 * t3270 + 0.5000000000e0 * t640;
      t4989 = m6 * t4988;
      t4990 = t2912 * t4989;
      t4991 = t1 * L5;
      t4992 = 0.2500000000e0 * t4991;
      t4996 = -t3722 + t4990 + t4749 + L9 * m6 * (-t4753 + t4752 + t4992);
      t4998 = t4420 * t3556;
      t5002 = (theta1__dot__dot * t448 + theta5__dot__dot) * m6;
      t5008 = t448 * t4534;
      t5024 = L9 * t87;
      t5025 = m6 * t1307;
      t5027 = 0.5000000000e0 * t5025 * t5024;
      t5028 = t192 * t110;
      t5029 = t5028 * t3677;
      t5032 = t93 * t110;
      t5037 = L9 * t494;
      t5038 = m6 * t1749;
      t5053 = L9 * t1113;
      jac__5_6 = t83 * (t145 * (t445 * t4400 + t4636 + t4859) + t168 * (t445 * t4406 + t71 * t4471 + t73 * t4858) + t125 * (t174 * t453 * t4867 + t177 * t4872) + t133 * (t177 * t453 * t3472 + t174 * t4872) + t4584 + t3507 + t3251 - t3508) + t79 * (t307 * t3237 + t125 * (t174 * (t453 * (-0.1e1 * t2756 + t3505) + t448 * t4889) + t177 * t4894) + t133 * (t174 * t4894 + t177 * (t453 * t3506 + t4901)) + t448 * t4867 + t3474 - t3475) + t145 * (t445 * (0.2500000000e0 * t4909 * t665 + 0.2500000000e0 * t2866 * t4308) - 0.1e1 * t4917 * t1089 * t111 + t71 * t119 * t4924 + t94 * (-0.1e1 * t4928 + t4935 * t4934)) + t168 * (t445 * (0.2500000000e0 * t4941 * t665 + 0.2500000000e0 * t2866 * t4304) + t73 * t119 * t4924 + t4917 * t1074 * t111 + t94 * (t4952 * t4934 + t4955)) + t445 * t94 * (t125 * t177 * t4672 + t133 * t4962) + t307 * (t94 * (-0.2500000000e0 * t3622 * t3616 - 0.2500000000e0 * t3618 * t3621) + 0.2500000000e0 * t3632 * t3627 + 0.2500000000e0 * t3628 * t3631 + 0.2500000000e0 * t2626 * t4977) + t94 * (t125 * (t174 * (t448 * t4557 + t453 * t4486) + t177 * t4996 - 0.1e1 * t4998 + t5002 * t744) + t133 * (t174 * t4996 + t177 * (t453 * t4513 + t5008) - 0.5000000000e0 * t583 * L9 * t118) + t3544 * t3635 - 0.1e1 * t476 * t4977 - 0.1e1 * t4420 * t3526 + t5002 * t111) + t125 * (t174 * (t5027 + t5029) - 0.1e1 * t5032 * t3706 - 0.1e1 * t754 * t2781 - 0.5000000000e0 * t5038 * t5037) + t133 * (-0.5000000000e0 * m6 * t88 * t174 * t5037 + t177 * (-t5027 - 0.1e1 * t5029) - t3377) + t174 * (t5028 * t3706 + 0.5000000000e0 * t5025 * t5053) - 0.5000000000e0 * t5038 * L9 * t3129 - 0.1e1 * t754 * t2741 - 0.1e1 * t5032 * t3677;
      t5065 = 0.1250000000e0 * t1817;
      t5073 = t2369 * t257;
      t5076 = t2379 * t257;
      t5079 = 0.2500000000e0 * L8;
      t5080 = 0.2500000000e0 * L5;
      t5083 = 0.2500000000e0 * t270;
      t5085 = L9 * (theta4__dot * (-t5079 + t5080) - t5083);
      t5088 = 0.2500000000e0 * t1481;
      t5089 = 0.2500000000e0 * t1129;
      t5091 = L9 * (-t5088 + t5089);
      t5099 = t5088 + t5089;
      t5100 = L9 * t5099;
      t5104 = -L9 * t5099;
      t5113 = t2229 * m6 * (t1815 - t5065) + t2211 * m6 * (-0.1e1 * t1815 + t5065) + 0.2500000000e0 * t5073 * t1770 - 0.2500000000e0 * t5076 * t1770 + t2324 * m6 * t5085 + t1967 * m6 * t5091 + t1913 * m6 * t5091 + t2331 * t5085 + t1962 * m6 * t5091 + t2388 * m6 * t5100 + t1972 * m6 * t5104 + t2339 * m6 * t5100 + t1957 * m6 * t5104 + t1879 * m6 * t5091;
      t5114 = 0.5000000000e0 * t270;
      t5126 = L9 * (theta4__dot * (-t5079 - t5080) + t5083);
      t5140 = t2349 * m6 * L9 * (t5114 + t4377) + t1884 * m6 * L9 * (t5114 - t4377) + t2313 * m6 * t5126 + t2319 * m6 * t5126 - 0.2500000000e0 * t1842 + t1848 - 0.2500000000e0 * t1852 - 0.2500000000e0 * t1857 + 0.2500000000e0 * t1862 + 0.2500000000e0 * t1867 - 0.1250000000e0 * t1935 - 0.1250000000e0 * t1940 + 0.1250000000e0 * t1945 + 0.1250000000e0 * t1950 + t1983;
      t5156 = -0.5000000000e0 * t1987 - 0.5000000000e0 * t1994 - 0.1250000000e0 * t1999 - 0.1250000000e0 * t2004 + 0.1250000000e0 * t2009 + 0.1250000000e0 * t2014 + 0.1250000000e0 * t2019 + 0.1250000000e0 * t2024 - 0.5000000000e0 * t2029 - 0.5000000000e0 * t2034 - 0.1250000000e0 * t2039 - 0.1250000000e0 * t2044 + 0.1250000000e0 * t2049 - 0.1250000000e0 * t2054;
      t5172 = 0.1250000000e0 * t2059 - 0.1250000000e0 * t2065 + 0.1250000000e0 * t2070 + 0.1250000000e0 * t2075 - 0.1250000000e0 * t2080 - 0.5000000000e0 * t2085 + 0.5000000000e0 * t2090 - 0.1250000000e0 * t2095 + 0.2500000000e0 * t2101 - 0.2500000000e0 * t2106 - 0.2500000000e0 * t2111 + 0.2500000000e0 * t2116 + 0.2500000000e0 * t2121 - 0.2500000000e0 * t2126 - 0.2500000000e0 * t2131;
      t5177 = 0.6250000000e-1 * theta4__dot;
      t5178 = 0.6250000000e-1 * theta6__dot;
      t5179 = -t5177 - t5178;
      t5182 = 0.2500000000e0 * t4144;
      t5183 = 0.2500000000e0 * t3837;
      t5188 = 0.1250000000e0 * t4144 - 0.3125000000e-1 * t4142;
      t5194 = 0.1250000000e0 * t2761;
      t5195 = m6 * (-0.2500000000e0 * t3070 - 0.3125000000e-1 * t3073) + t5194;
      t5204 = t5194 - 0.3125000000e-1 * t3736;
      t5206 = -t5178 + t5177;
      t5212 = -t5188;
      t5217 = -0.5000000000e0 * t3791 - 0.5000000000e0 * t3789;
      t5221 = -0.6250000000e-1 * t2761 + 0.1562500000e-1 * t3736;
      t5223 = 0.2500000000e0 * t2136 + t2144 - 0.1e1 * t2148 + t2162 * (m6 * t65 * t5179 + t5182 + t5183) + t2193 * t5188 + t2304 * t5195 + t2257 * (m6 * (0.6250000000e-1 * t3073 + 0.5000000000e0 * t3070) - t3735) + t2156 * t5204 + t2167 * (m6 * t65 * t5206 - t5182 + t5183) + t2201 * t5188 + t2290 * t5212 + t2197 * t5212 + t2358 * t5217 + t2295 * t5221;
      t5237 = 0.5000000000e0 * t4200 + theta4__dot * t3119;
      t5240 = -t5204;
      t5242 = 0.2500000000e0 * t3755;
      t5245 = -0.2500000000e0 * IX5 + 0.2500000000e0 * t138;
      t5256 = -0.6250000000e-1 * t3111 - 0.5000000000e0 * t3108;
      t5264 = t2374 * t257;
      t5269 = t1872 * t257;
      t5272 = t2300 * t5221 + t168 * (theta1__dot * t3119 + t3756) + t453 * (m6 * t4524 + t4529) + t177 * (-0.1e1 * t3795 - 0.1e1 * t3797) + t2238 * t5237 + t2279 * t5221 + t2179 * t5240 + t2266 * (theta1__dot * t5245 + t5242) + t2270 * (-m6 * t65 * t5179 - t5182 - t5183) + t2215 * (m6 * t5256 + t5182) + t2188 * (-m6 * t5256 - t5182) + 0.2500000000e0 * t5264 * t1770 + t1954 * t1770 + t1978 * t1770 - 0.2500000000e0 * t5269 * t1770;
      t5274 = t186 * theta4__dot;
      t5281 = 0.1250000000e0 * L5;
      t5282 = 0.1250000000e0 * L8;
      t5283 = -t5281 + t5282;
      t5287 = -t5282 - t5281;
      t5291 = -t5283;
      t5295 = -t5287;
      t5307 = 0.1250000000e0 * theta6__dot;
      t5313 = -t5217;
      t5317 = 0.5000000000e0 * t3795 + 0.5000000000e0 * t3797;
      t5319 = t2354 * t5274 * t2694 + t2384 * t5274 * t2686 + t1919 * t5274 * t2686 + t1908 * t257 * theta1__dot * t5283 + t2398 * t257 * theta1__dot * t5287 + t1923 * t257 * theta1__dot * t5291 + t1901 * t257 * theta1__dot * t5295 + t1890 * t5274 * t2694 + t2262 * (-theta1__dot * t5245 - t5242) + t2171 * t5204 + t2175 * t5240 + t2245 * (m6 * t65 * (-t5177 - t5307) + t5182 + t3838) + t1928 * t5313 + t2363 * t5317;
      t5344 = t2152 * t5204 + t2274 * (-m6 * t65 * t5206 + t5182 - t5183) + t2308 * t5195 + t2286 * t5221 + t2234 * t5237 + t2393 * t5313 + t2344 * t5217 - t1894 * t5317 + t2251 * (m6 * t65 * (t5307 - t5177) - t3838 + t5182) + t2183 * t5204 - 0.1e1 * t2405 - 0.5000000000e0 * t2409 + 0.5000000000e0 * t2414 - 0.1e1 * t2418 + 0.2500000000e0 * t2421;
      jac__5_8 = t5113 + t5140 + t5156 + t5172 + t5223 + t5272 + t5319 + t5344;
      t5350 = m6 * t4444 + t4145 + t4158;
      t5355 = 0.2000000000e1 * t4333 * t1844;
      t5366 = t71 * t4140 + t73 * t4298;
      t5390 = t3784 + t3786;
      t5392 = -t3793;
      t5396 = t4333 * t744;
      t5400 = t111 * t1837;
      t5413 = t1837 * t3617;
      t5426 = -0.2e1 * t4252 + m6 * (-0.2e1 * t1815 + t4255);
      t5438 = t1837 * t1785;
      jac__5_10 = t145 * (t79 * t4300 + t73 * t4192 + t71 * t5350 + t453 * (-0.1e1 * t4333 * t2781 + t5355 + t3755 + theta1__dot * t4202) - 0.2000000000e1 * t4336 * t1844 + t4336 * t2781) + t168 * (t79 * t5366 + t73 * t5350 + t71 * t4155 + t453 * (t4313 * t2781 - 0.2000000000e1 * t4313 * t1844) + t4316 * t2781 - 0.2000000000e1 * t4316 * t1844 - 0.1e1 * t4200 + theta4__dot * t2799) + t79 * (t4182 + t4207 + t4209) + t83 * (t1737 * t4216 + t1738 * t4212) + t453 * (t174 * (t88 * t125 * t3805 + t125 * t5390 + t199 * t5392 + t3796 + t3798) + t88 * (-0.1e1 * t5396 + t3955 * L9 * t1338 - 0.1e1 * t5400) + t5355 - t177 * t133 * t5390 + m6 * theta1__dot * (t100 + t4150 + t137) + theta1__dot * t4528) + t174 * (t88 * (-0.1e1 * t5413 * t3975 + t133 * t4347) + t125 * t448 * (-t3903 + t3892) + t133 * t5426 + t448 * (t206 * t5392 - 0.1e1 * t3899)) + t88 * (t125 * t177 * t4347 + t177 * (-0.1e1 * t1129 * t257 + t5438 * t3975)) + t125 * t177 * t5426 + t177 * (t133 * t448 * (t3894 - t3892) + t199 * (-0.2e1 * t4284 - 0.2e1 * t4286) - t4291 - t4293);
      jac__5_11 = (t83 * (-0.25e0 * t66 + IZ6) + (t1204 + L8) * m6 * t119) * theta6__dot;
      t5464 = 0.2500000000e0 * t4142;
      t5465 = -t5464 + t4144;
      t5476 = -t3880 + t3742;
      t5479 = -t4159 + t5464;
      t5483 = t4365 * t2781;
      t5487 = t3880 - t4187;
      t5490 = t4157 * t4977;
      jac__5_12 = t79 * (t125 * (t174 * t453 * t3885 + t177 * t5465) + t174 * t133 * t5465 + t4476 * t133 * t3881) + t83 * t4213 + t125 * (t174 * t453 * t5476 + t177 * t5479 + t4266) + t174 * (t133 * t5479 + t5483) + t4476 * t133 * t5487 - 0.1e1 * t5490 - 0.1e1 * t664 * t2781 + t4242;
      t5494 = cos(t2244);
      t5496 = cos(t2250);
      t5500 = -0.6250000000e-1 * t2619 + 0.1562500000e-1 * t2622;
      t5501 = cos(t2278);
      t5502 = t5501 * t5500;
      t5503 = -t5500;
      t5504 = cos(t2285);
      t5505 = t5504 * t5503;
      t5508 = 0.1250000000e0 * t4413 - 0.3125000000e-1 * t4415;
      t5509 = cos(t2289);
      t5511 = cos(t2294);
      t5513 = 0.6250000000e-1 * theta5__dot;
      t5517 = 0.2500000000e0 * t2733;
      t5520 = t66 * theta1__dot * (t5177 - t5513) + theta1__dot * (t5517 - t5182);
      t5521 = cos(t2273);
      t5522 = t5521 * t5520;
      t5523 = cos(t2269);
      t5524 = t5523 * t5520;
      t5525 = cos(t2299);
      t5527 = -t5508;
      t5528 = cos(t2196);
      t5530 = -t5513 - t5177;
      t5533 = t5182 + t5517;
      t5535 = t66 * theta1__dot * t5530 + theta1__dot * t5533;
      t5536 = cos(t2161);
      t5540 = -0.3750000000e0 * t2619 + 0.9375000000e-1 * t2622;
      t5542 = cos(2 * t2348);
      t5544 = t5494 * t2738 + t5496 * t2807 + t5525 * t5500 + t5511 * t5503 + t5509 * t5508 + t5528 * t5527 + t5536 * t5535 + t5542 * t5540 + t5502 + t5505 + t5522 + t5524;
      t5546 = sin(t2397);
      t5547 = t5546 * t257;
      t5549 = 0.2500000000e0 * t269;
      t5550 = 0.2500000000e0 * t1788;
      t5551 = -t5549 - t5550;
      t5552 = theta1__dot * t5551;
      t5553 = sin(t2293);
      t5554 = t5553 * t257;
      t5557 = 0.1250000000e0 * t5269 * t210;
      t5559 = 0.1250000000e0 * t5076 * t210;
      t5561 = 0.1250000000e0 * t5073 * t210;
      t5563 = 0.1250000000e0 * t1963 * t1113;
      t5565 = 0.1250000000e0 * t1958 * t1113;
      t5567 = 0.1250000000e0 * t1973 * t1113;
      t5569 = 0.1250000000e0 * t1968 * t1113;
      t5579 = 0.1250000000e0 * t5264 * t210;
      t5580 = t5547 * t1 * t5287 + t5554 * t5552 - t5557 + t5559 - t5561 - t5563 - t5565 + t5567 + t5569 + 0.1250000000e0 * m6 * t2339 * L9 * t1113 + 0.1250000000e0 * m6 * t1913 * L9 * t1113 + t5579;
      t5590 = sin(t1996);
      t5593 = 0.6250000000e-1 * t5590 * t111 * t2621;
      t5595 = sin(phi2 + theta6 - t306);
      t5599 = sin(t2021);
      t5602 = 0.6250000000e-1 * t5599 * t257 * t3208;
      t5604 = sin(phi2 - theta6 + t306);
      t5609 = sin(phi2 + theta6 + t306);
      t5614 = sin(theta6 + phi1 + t306);
      t5619 = sin(-theta6 + phi1 + t306);
      t5623 = sin(t2051);
      t5625 = t5623 * t257 * t3208;
      t5627 = sin(t2046);
      t5629 = t5627 * t257 * t3208;
      t5631 = sin(t2092);
      t5633 = t5631 * t257 * t3208;
      t5635 = -0.1250000000e0 * m6 * t1879 * L9 * t1113 - 0.1250000000e0 * m6 * t2388 * L9 * t1113 - t5593 - 0.6250000000e-1 * t5595 * t257 * t3208 + t5602 + 0.6250000000e-1 * t5604 * t257 * t3208 + 0.6250000000e-1 * t5609 * t257 * t3208 - 0.2500000000e0 * t5614 * t257 * t3270 + 0.2500000000e0 * t5619 * t257 * t3270 + 0.1250000000e0 * t5625 + 0.1250000000e0 * t5629 - 0.1250000000e0 * t5633;
      t5636 = sin(t2056);
      t5638 = t5636 * t257 * t3208;
      t5640 = sin(t2077);
      t5642 = t5640 * t257 * t3270;
      t5644 = sin(t2067);
      t5646 = t5644 * t257 * t3270;
      t5648 = sin(t2062);
      t5650 = t5648 * t257 * t3270;
      t5652 = sin(t2011);
      t5655 = 0.6250000000e-1 * t5652 * t111 * t2621;
      t5656 = sin(t2001);
      t5659 = 0.6250000000e-1 * t5656 * t111 * t2621;
      t5660 = sin(t2072);
      t5662 = t5660 * t257 * t3270;
      t5664 = sin(t2041);
      t5667 = 0.6250000000e-1 * t5664 * t257 * t3208;
      t5668 = 0.1250000000e0 * t87;
      t5669 = 0.1250000000e0 * t212;
      t5673 = t2324 * L9 * m6 * (t5668 + t5669 + 0.1226250000e1);
      t5677 = t2313 * L9 * m6 * (-t5668 + t5669 + 0.1226250000e1);
      t5678 = -t5669 + t5668 + 0.1226250000e1;
      t5680 = t2319 * L9;
      t5682 = -t5669 - t5668 + 0.1226250000e1;
      t5684 = t2330 * L9;
      t5686 = -0.1250000000e0 * t5638 + 0.1250000000e0 * t5642 + 0.1250000000e0 * t5646 + 0.1250000000e0 * t5650 + t5655 + t5659 + 0.1250000000e0 * t5662 + t5667 + t5673 + t5677 + t5680 * m6 * t5678 + t5684 * m6 * t5682;
      t5691 = 0.1250000000e0 * m6 * t2211 * t2773;
      t5694 = 0.1250000000e0 * m6 * t2229 * t2773;
      t5695 = sin(t1966);
      t5698 = 0.2500000000e0 * t5695 * t257 * t129;
      t5699 = sin(t1961);
      t5702 = 0.2500000000e0 * t5699 * t257 * t129;
      t5703 = sin(t1956);
      t5706 = 0.2500000000e0 * t5703 * t257 * t129;
      t5707 = L6 * t192;
      t5708 = sin(t2368);
      t5711 = 0.2500000000e0 * t5708 * t257 * t5707;
      t5712 = sin(t2378);
      t5715 = 0.2500000000e0 * t5712 * t257 * t5707;
      t5716 = sin(t1871);
      t5719 = 0.2500000000e0 * t5716 * t257 * t5707;
      t5720 = sin(t2373);
      t5723 = 0.2500000000e0 * t5720 * t257 * t5707;
      t5724 = sin(t2103);
      t5726 = t5724 * t111 * t4420;
      t5728 = sin(t2113);
      t5730 = t5728 * t111 * t4420;
      t5732 = sin(t2133);
      t5734 = t5732 * t257 * t1222;
      t5736 = t5691 + t5694 + t5698 + t5702 - t5706 + t5711 - t5715 + t5719 - t5723 - 0.1250000000e0 * t5726 - 0.1250000000e0 * t5730 - 0.1250000000e0 * t5734;
      t5737 = sin(t2123);
      t5739 = t5737 * t257 * t1222;
      t5741 = sin(t2098);
      t5743 = t5741 * t111 * t4420;
      t5745 = sin(t2108);
      t5747 = t5745 * t111 * t4420;
      t5749 = sin(t2128);
      t5751 = t5749 * t257 * t1222;
      t5753 = sin(t2118);
      t5755 = t5753 * t257 * t1222;
      t5757 = sin(t1883);
      t5761 = sin(t1971);
      t5764 = 0.2500000000e0 * t5761 * t257 * t129;
      t5765 = sin(t2348);
      t5769 = sin(t2036);
      t5772 = 0.6250000000e-1 * t5769 * t257 * t3208;
      t5773 = sin(t2016);
      t5776 = 0.6250000000e-1 * t5773 * t257 * t3208;
      t5777 = sin(t2006);
      t5780 = 0.6250000000e-1 * t5777 * t111 * t2621;
      t5782 = sin(phi2 - theta6 - t306);
      t5786 = -0.1250000000e0 * t5739 - 0.1250000000e0 * t5743 - 0.1250000000e0 * t5747 - 0.1250000000e0 * t5751 - 0.1250000000e0 * t5755 + 0.5000000000e0 * t5757 * t111 * t198 - t5764 + 0.5000000000e0 * t5765 * t111 * t198 - t5772 - t5776 - t5780 - 0.6250000000e-1 * t5782 * t257 * t3208;
      t5788 = -t5549 + t5550;
      t5789 = theta1__dot * t5788;
      t5790 = sin(t2298);
      t5791 = t5790 * t257;
      t5793 = 0.1250000000e0 * theta4__dot;
      t5794 = 0.1250000000e0 * theta5__dot;
      t5797 = cos(t2228);
      t5799 = t5797 * t66 * theta1__dot * (t5793 + t5794);
      t5800 = 0.1250000000e0 * t1481;
      t5801 = 0.2500000000e0 * t1582;
      t5803 = theta1__dot * (-t5800 + t5801);
      t5804 = sin(t2338);
      t5810 = sin(theta6 + t306);
      t5813 = sin(t1912);
      t5817 = theta1__dot * (-t5800 - t5801);
      t5818 = sin(t1878);
      t5821 = -t5793 + t5794;
      t5823 = cos(t2210);
      t5824 = t5823 * t66;
      t5829 = sin(-theta6 + t306);
      t5833 = sin(t1907);
      t5834 = t5833 * t257;
      t5836 = sin(t2277);
      t5838 = t5836 * t257 * t5552;
      t5839 = sin(t2387);
      t5843 = sin(t1900);
      t5844 = t5843 * t257;
      t5846 = t5791 * t5789 + t5799 + t5804 * t257 * t5803 + t5810 * t257 * t1 * (t5282 - t5080) + t5813 * t257 * t5803 + t5818 * t257 * t5817 + t5824 * theta1__dot * t5821 + t5829 * t257 * t1 * (t5282 + t5080) + t5834 * t1 * t5291 + t5838 + t5839 * t257 * t5817 + t5844 * t1 * t5295;
      t5848 = sin(t1922);
      t5849 = t5848 * t257;
      t5851 = sin(t2284);
      t5853 = t5851 * t257 * t5789;
      t5856 = cos(2 * t1883);
      t5858 = cos(t2170);
      t5860 = cos(t2174);
      t5862 = cos(t2178);
      t5864 = cos(t2182);
      t5866 = cos(t2192);
      t5868 = cos(t2200);
      t5870 = cos(t2166);
      t5876 = t5849 * t1 * t5283 + t5853 - t5856 * t5540 + t5858 * t2651 + t5860 * t2651 + t5862 * t2651 + t5864 * t2651 + t5866 * t5508 + t5868 * t5527 + t5870 * t5535 - 0.2452500000e1 * t2349 * t257 + 0.2452500000e1 * t1884 * t257;
      jac__6_4 = t5544 + t5580 + t5635 + t5686 + t5736 + t5786 + t5846 + t5876;
      t5881 = -0.1250000000e0 * t640 - 0.6250000000e-1 * t3270;
      t5882 = m6 * t5881;
      t5883 = sin(t1942);
      t5893 = -m6 * t5881;
      t5894 = sin(t1932);
      t5898 = 0.2500000000e0 * t4931;
      t5899 = -0.1250000000e0 * t3208 + t5898;
      t5900 = m6 * t5899;
      t5901 = sin(t1859);
      t5905 = 0.5000000000e0 * L8 * t487;
      t5906 = 0.2500000000e0 * t681;
      t5907 = 0.1250000000e0 * t4991;
      t5910 = sin(t2150);
      t5913 = sin(t1947);
      t5918 = sin(t1839);
      t5921 = t5502 + t5505 + t5522 + t5524 + t5883 * L9 * t5882 - t5680 * m6 * t5678 - 0.2500000000e0 * t2416 * t65 * t3396 + t5894 * L9 * t5893 + t5901 * L9 * t5900 + t5910 * L9 * m6 * (-t5905 + t5906 + t5907) + t5913 * L9 * t5893 + t5918 * L9 * m6 * (t5905 + t5906 + t5907);
      t5922 = 0.2500000000e0 * t986;
      t5924 = t5922 - 0.1250000000e0 * t4921;
      t5925 = m6 * t5924;
      t5926 = sin(t1849);
      t5929 = sin(t1937);
      t5932 = sin(t1854);
      t5935 = sin(t1864);
      t5941 = t5929 * L9 * t5882 + t5932 * L9 * t5900 + t5926 * L9 * t5925 + t5935 * L9 * t5925 - t5684 * m6 * t5682 + t5557 + t5559 + t5561 - t5563 + t5565 + t5567 - t5569;
      t5950 = t5579 + t5593 + t5602 - 0.6250000000e-1 * t5625 + 0.6250000000e-1 * t5629 + 0.6250000000e-1 * t5633 - 0.6250000000e-1 * t5638 - 0.6250000000e-1 * t5642 - 0.6250000000e-1 * t5646 + 0.6250000000e-1 * t5650 + t5655 + t5659;
      t5952 = 0.6250000000e-1 * t5662 + t5667 + t5673 + t5677 - t5691 + t5694 - t5698 + t5702 + t5706 - t5711 - t5715 - t5719 - t5723;
      t5971 = -0.2500000000e0 * t5726 - 0.2500000000e0 * t5730 - 0.2500000000e0 * t5734 - 0.2500000000e0 * t5739 + 0.2500000000e0 * t5743 + 0.2500000000e0 * t5747 + 0.2500000000e0 * t5751 + 0.2500000000e0 * t5755 - t5764 - 0.2500000000e0 * t1840 * t111 * t3396 + 0.2500000000e0 * t2419 * t111 * t3396 - 0.1250000000e0 * t1949 * t581;
      t5978 = theta5 + theta6;
      t5979 = cos(t5978);
      t5983 = theta5 - theta6;
      t5984 = cos(t5983);
      t5988 = 0.6250000000e-1 * L8;
      t5989 = 0.6250000000e-1 * L5;
      t5991 = t1 * (-t5988 + t5989);
      t5997 = t1 * (t5988 + t5989);
      t6007 = 0.1250000000e0 * t1944 * t581 - 0.1250000000e0 * t1934 * t581 + 0.1250000000e0 * t1939 * t581 - 0.2500000000e0 * t5979 * t744 * t3396 + 0.2500000000e0 * t5984 * t744 * t3396 + t5849 * t5991 - t5824 * theta1__dot * t5821 + t5547 * t5997 + t5834 * t5991 - t5791 * theta1__dot * t5788 - t5554 * theta1__dot * t5551 + t5844 * t5997;
      t6009 = cos(t2255);
      t6018 = -t66 * theta1__dot * t5530 - theta1__dot * t5533;
      t6022 = 0.1250000000e0 * t2619;
      t6023 = 0.3125000000e-1 * t2622 - t6022;
      t6026 = -t6023;
      t6028 = -0.2500000000e0 * t6009 * t66 * t487 + t5772 + t5776 + t5780 + t5799 + t5838 + t5853 + t5536 * t6018 + t5870 * t6018 + t5864 * t6023 + t5862 * t6023 + t5860 * t6026;
      t6032 = -0.5000000000e0 * t3092 + 0.1250000000e0 * t3090;
      t6034 = cos(phi2 + t78 + theta5);
      t6038 = 0.6250000000e-1 * t454 - 0.3125000000e-1 * t1;
      t6041 = 0.2500000000e0 * t4580;
      t6043 = cos(t2155);
      t6049 = cos(t2151);
      t6053 = -0.2500000000e0 * t4413 + 0.6250000000e-1 * t4415;
      t6055 = -t6053;
      t6062 = cos(phi2 - t78 + theta5);
      t6064 = sin(t5983);
      t6068 = sin(t5978);
      t6072 = t5858 * t6026 + t6034 * t6032 + t6043 * (t65 * m6 * t6038 + t6022 - t6041) + t6049 * (-t65 * m6 * t6038 - t6022 + t6041) + t5868 * t6053 + t5866 * t6055 + t5509 * t6053 + t5511 * t5500 + t5525 * t5503 + t5528 * t6055 + t6062 * t6032 - 0.5000000000e0 * t6064 * t257 * t488 + 0.5000000000e0 * t6068 * t257 * t488;
      jac__6_5 = t5921 + t5941 + t5950 + t5952 + t5971 + t6007 + t6028 + t6072;
      t6150 = t4901 - 0.5000000000e0 * t3090 + 0.2000000000e1 * t3092;
      t6174 = t4992 + t4752;
      t6182 = t453 * (t3328 * t192 + t4480 + t4483) + t5008;
      t6208 = t69 * t3543;
      t6209 = t6208 * t375;
      t6213 = m6 * t4309;
      t6217 = -0.5000000000e0 * t6213 * t5024 + t3105 * t375;
      jac__6_6 = t79 * (t445 * (t145 * t4570 + t168 * t4400 + t2662 - t2663) + t145 * (t73 * (-t65 * m6 * t4855 + t2620 - t4581) + t4585) + t168 * (t4636 + t4859) + t3515 + t65 * m6 * (t4854 + 0.2500000000e0 * t557 - t4853) - t3516 - t2620 + t4581) + t445 * (t145 * (0.1250000000e0 * t2626 * t4304 + 0.1250000000e0 * t4941 * t2781) + t168 * (-0.1250000000e0 * t2626 * t4308 - 0.1250000000e0 * t4909 * t2781) + t88 * (t125 * (t4962 + 0.1250000000e0 * t3604) + t133 * t177 * t4686 + 0.1250000000e0 * t3610) - 0.2500000000e0 * t2717) + t145 * (t73 * t89 * t5925 + 0.5000000000e0 * t4917 * t88 * t71 * t111 + t88 * (t4952 * t5900 + 0.5000000000e0 * t4955)) + t168 * (0.5000000000e0 * t4917 * t88 * t73 * t111 - t71 * t89 * m6 * t5924 + t88 * (0.5000000000e0 * t4928 - t4935 * m6 * t5899)) + t83 * (t307 * t2851 + t125 * (t174 * t453 * t3514 + t177 * t6150) + t133 * (t177 * t453 * t3500 + t174 * t6150)) + t307 * (t88 * (-0.2500000000e0 * t3619 + 0.2500000000e0 * t3623) - 0.2500000000e0 * t3551 * t3627 + 0.2500000000e0 * t3585 * t3631 - 0.2500000000e0 * t2866 * t3635 + t94 * t4686) + t88 * (t125 * (t174 * (L9 * m6 * t6174 - t3722 + t4749 + t4990) + t177 * t6182 + t3707 + L9 * m6 * (0.3750000000e0 * t3208 + t3381 + t5898)) + t133 * (t174 * t6182 + t177 * (-L9 * m6 * t6174 - t2912 * m6 * t4988 + t3722 - t4749) + 0.5000000000e0 * t4998 - t3719 - t3717) + t3678 + L9 * m6 * (0.3750000000e0 * t4921 + t3307 + t5922)) + t125 * (t174 * (-0.1e1 * t6209 - t4769) + t177 * t6217) + t133 * (t174 * t6217 + t177 * (t6209 + t4769)) + t174 * (-t4810 - 0.1e1 * t6208 * t665) + t177 * (-0.5000000000e0 * t6213 * t5053 + t249 * t488) + t94 * (-0.4905000000e1 * t3715 - 0.5000000000e0 * t3286 + t3297 * t4989 - 0.5000000000e0 * t3039 * t492);
      t6247 = t453 * t4298;
      t6258 = 0.2500000000e0 * t3898 * t4304;
      t6264 = 0.2500000000e0 * t3898 * t4308;
      t6271 = -0.5000000000e0 * t3801 - 0.5000000000e0 * t3803;
      t6272 = t174 * t6271;
      t6273 = t257 * t231;
      t6278 = -t177 * t6271;
      t6283 = 0.5000000000e0 * t3895;
      t6286 = t2097 * t4309;
      t6300 = -0.1e1 * t4144 + t5464;
      t6301 = t448 * t6300;
      t6340 = theta5__dot * t4235;
      t6349 = t174 * t4250;
      t6353 = t206 * t174;
      jac__6_8 = t83 * (t445 * (t145 * t3739 + t168 * t3761 + t3771 - t3772) + t145 * (t73 * t3760 + t71 * t6247) + t168 * (t71 * t3738 + t73 * t6247) + t3926 + t3737 - t3735) + t445 * (t145 * (-t6258 - 0.2500000000e0 * t4333 * t665) + t168 * (t6264 + 0.2500000000e0 * t4313 * t665) + t94 * (t125 * (t6272 - 0.2500000000e0 * t6273) + t133 * t6278 - 0.2500000000e0 * t5400) - t6283) + t145 * (t6258 - 0.5000000000e0 * t6286 * t4308 + t94 * (0.2500000000e0 * t5396 - 0.5000000000e0 * t4336 * t3556)) + t79 * (t307 * t3888 + t125 * (t453 * t174 * t3921 + t177 * t6301) + t453 * t133 * t177 * t3925 + t547 * t6301) + t168 * (-0.5000000000e0 * t6286 * t4304 - t6264 + t94 * (-0.2500000000e0 * t4313 * t744 - 0.5000000000e0 * t4316 * t3556)) + t307 * (t94 * (-0.5000000000e0 * t5438 * t3621 + 0.5000000000e0 * t5413 * t3616) - 0.5000000000e0 * t1837 * t1081 * t3627 + 0.5000000000e0 * t1837 * t1098 * t3631 - 0.5000000000e0 * t3741 * t3635 + t88 * t6271) + t94 * (t125 * (t453 * t177 * t4250 + t6272 - 0.1e1 * t6340 * t744 - 0.7500000000e0 * t6273 - 0.1e1 * t2097 * t1771 * t3975) + t453 * t133 * (t6349 - t4355) + t133 * (-0.1e1 * t2097 * t6353 * t3975 + t6278) - 0.1e1 * t6340 * t111 - 0.7500000000e0 * t5400) + t125 * (t453 * t174 * (t3920 - t3865) + 0.2500000000e0 * theta4__dot * t1807 * t4385) + t453 * (t133 * t177 * (-t3920 + t3832) - 0.1e1 * t3831 * t3635) + 0.2500000000e0 * t4336 * t174 * t4385 + t6283;
      t6423 = t4387 - t3920 + t3832;
      jac__6_10 = t83 * (t145 * t5366 + t168 * t4148 - t4143 + t4145) + t145 * (-t94 * t4319 - t4307 - t4312) + t79 * (t125 * t177 * t4217 + t133 * t174 * t4217) + t168 * (-t94 * t4339 - t4330 + t4332) + t94 * (t125 * (t453 * t177 * t3805 - 0.1e1 * t1837 * t1771 * t3975 + t6349 - t4355) + t133 * (t453 * (t174 * t3805 - 0.5000000000e0 * t6273) + t177 * t201 * L9 * t2097 - 0.1e1 * t1837 * t6353 * t3975) - 0.5000000000e0 * t111 * t2097) + t125 * t177 * t6423 + t133 * t174 * t6423 + (L6 * t1560 + t177 * t1582) * t88 * t257;
      t6447 = t4158 - t5464;
      jac__6_11 = t79 * (t125 * (t174 * t453 * t3881 + t177 * t6300) + t174 * t133 * t6300 + t4476 * t133 * t3885) + t83 * t4217 + t125 * (t174 * t453 * t5487 + t177 * t6447 - 0.1e1 * t3992 - 0.1e1 * t3898 * t3706) + t174 * (-0.1e1 * t5483 + t133 * t6447) + t4476 * t133 * t5476 - t4281 + t5490 - t4000;
      
      % store on output
      jac__Hx = zeros(6,12);
      jac__Hx(1,1) = jac__1_1;
      jac__Hx(1,3) = jac__1_3;
      jac__Hx(1,8) = jac__1_8;
      jac__Hx(1,9) = jac__1_9;
      jac__Hx(2,1) = jac__2_1;
      jac__Hx(2,3) = jac__2_3;
      jac__Hx(2,4) = jac__2_4;
      jac__Hx(2,5) = jac__2_5;
      jac__Hx(2,6) = jac__2_6;
      jac__Hx(2,7) = jac__2_7;
      jac__Hx(2,8) = jac__2_8;
      jac__Hx(2,9) = jac__2_9;
      jac__Hx(2,10) = jac__2_10;
      jac__Hx(2,11) = jac__2_11;
      jac__Hx(2,12) = jac__2_12;
      jac__Hx(3,1) = jac__3_1;
      jac__Hx(3,3) = jac__3_3;
      jac__Hx(3,7) = jac__3_7;
      jac__Hx(3,8) = jac__3_8;
      jac__Hx(3,9) = jac__3_9;
      jac__Hx(4,4) = jac__4_4;
      jac__Hx(4,5) = jac__4_5;
      jac__Hx(4,6) = jac__4_6;
      jac__Hx(4,8) = jac__4_8;
      jac__Hx(4,10) = jac__4_10;
      jac__Hx(4,11) = jac__4_11;
      jac__Hx(4,12) = jac__4_12;
      jac__Hx(5,4) = jac__5_4;
      jac__Hx(5,5) = jac__5_5;
      jac__Hx(5,6) = jac__5_6;
      jac__Hx(5,8) = jac__5_8;
      jac__Hx(5,10) = jac__5_10;
      jac__Hx(5,11) = jac__5_11;
      jac__Hx(5,12) = jac__5_12;
      jac__Hx(6,4) = jac__6_4;
      jac__Hx(6,5) = jac__6_5;
      jac__Hx(6,6) = jac__6_6;
      jac__Hx(6,8) = jac__6_8;
      jac__Hx(6,10) = jac__6_10;
      jac__Hx(6,11) = jac__6_11;
    end

      
    function jac__Wx = Wx( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      c1 = self.c1;   
      c5 = self.c5;
      c6 = self.c6;
      prism = self.prism;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = theta2__dot ^ 2;
      t2 = cos(theta2);
      t4 = sin(theta2);
      jac__1_1 = -t2 * t1 - theta2__dot__dot * t4;
      t8 = L3 + L4 + s;
      t10 = -2 * s__dot * theta2__dot - t8 * theta2__dot__dot;
      jac__1_3 = t2 * t10 + t4 * (t1 * t8 - s__dot__dot);
      t15 = sin(theta4);
      t16 = theta4__dot ^ 2;
      t18 = cos(theta4);
      jac__1_4 = (-t16 * t15 + t18 * theta4__dot__dot) * L5;
      t21 = t4 * theta2__dot;
      jac__1_7 = -2 * t21;
      jac__1_9 = -2 * t2 * theta2__dot * t8 - 2 * t4 * s__dot;
      jac__1_10 = 2 * L5 * t18 * theta4__dot;
      jac__2_1 = -t4 * t1 + theta2__dot__dot * t2;
      jac__2_3 = t2 * (-t1 * t8 + s__dot__dot) + t4 * t10;
      jac__2_4 = (t15 * theta4__dot__dot + t16 * t18) * L5;
      jac__2_7 = 2 * t2 * theta2__dot;
      jac__2_9 = 2 * s__dot * t2 - 2 * t8 * t21;
      jac__2_10 = 2 * t15 * theta4__dot * L5;
      
      % store on output
      jac__Wx = zeros(2,12);
      jac__Wx(1,1) = jac__1_1;
      jac__Wx(1,3) = jac__1_3;
      jac__Wx(1,4) = jac__1_4;
      jac__Wx(1,7) = jac__1_7;
      jac__Wx(1,9) = jac__1_9;
      jac__Wx(1,10) = jac__1_10;
      jac__Wx(2,1) = jac__2_1;
      jac__Wx(2,3) = jac__2_3;
      jac__Wx(2,4) = jac__2_4;
      jac__Wx(2,7) = jac__2_7;
      jac__Wx(2,9) = jac__2_9;
      jac__Wx(2,10) = jac__2_10;
    end

    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res__ode = f( self, t, vars__ )
      pos      = vars__(1:self.npos);
      vel      = vars__(self.npos+1:self.nvel+self.npos);
      g        = self.gravity;
      Phi_P    = self.DPhiDp( t, pos );
      mass     = self.Mass( t, pos );
      M        = [ mass, Phi_P.'; Phi_P, zeros(2,2) ];
      rhs      = [ self.gfun( t, vars__ ); self.B( t, vars__ )];
      sol      = M\rhs;
      res__ode = [ vel; sol(1:self.npos)];
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__jode = DfDx( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      c1 = self.c1;
      c5 = self.c5;
      c6 = self.c6;
      prism = self.prism;
      
      g        = self.gravity;
      npos     = self.neq/2;
      pos      = vars__(1:npos);
      vel      = vars__(npos+1:end);
      g        = self.gravity;
      Phi_P    = self.DPhiDp( t, pos );
      mass     = self.Mass( t, pos );
      M        = [ mass, Phi_P.'; Phi_P, zeros(1,1) ];
      rhs      = [ self.gfun( t, vars__ ); self.B( t, vars__ )];
      sol      = M\rhs;
      vars_dot = sol(1:4);
      lambda   = sol(4:6);

      %
      %  / M      Phi_P^T \     d   / v_dot  \      d    / H(t,p,v,v_dot,lambda) \
      %  |                |  ------ |         | = ------ |                       |
      %  \ Phi_P    0     /  d{p,v} \ lambda /    d{p,v} \ W(t,p,v,v_dot)        /
      %
      hx=self.Hx( t, vars__ );
      wx=self.Wx( t, vars__ );

      sol = M\[hx; wx];

      jac__jode = [eye(npos), zeros(npos,npos);sol(1:npos,:)];
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res = DfDt( self, t, vars___)
      res = zeros(8,1);
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res = exact( self, t0, x0, t )
      res = []; % no exact solution
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    % interface function
    function res__H = h( self, t, vars__ )
      res__H = [ self.Phi( t, vars__ ); self.A( t, vars__ ) ];
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    % interface function
    function jac__JH = DhDx( self, t, vars__ )
      jac__JH = [ self.DPhiDp( t, vars__ ), zeros(2,6); ...
                  self.DADp( t, vars__ ),  self.DPhiDp( t, vars__ ) ];
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res = DhDt( self, t, vars__ )
      jac__DhDt = zeros(6,1);
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  end
end
