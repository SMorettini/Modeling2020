LOOP Function
x2y := [s(t) = s, theta2(t) = theta2]:
y2x := [s=s(t), theta2 = theta2(t)]:


N := 1001: i_print := 980:
Delta__theta1 := 30*Pi/180/N:

#dof   := theta1(t) = 0:
guess := {s = 1.5,theta2 = 0}:

sol_kine_A_num := Array(1..N+1,[]):
sol_vel_A_num  := Array(1..N+1,[]):

printf("Starting kinematic analysis problem ...\n");
for i from 1 to N+1 do
  
  dof := theta1(t) = Delta__theta1*(i-1);

  # position step (finite displacement)
  tmp := fsolve(subs(data_A,dof, x2y,Phi), guess): #print(%);
  # no solution found
  if has(tmp,fsolve) then 
    tmp1 := evalf(subs(data_A,sol_kine_A_num[i-1],JPhi_qD));
    tmp2 := evalf(subs(data_A,sol_kine_A_num[i-1],JPhi_q));
    print(tmp1,tmp2);
    printf("Rank(JPhi_q)=%2d > Rank(JPhi_q)%2d: det(JPhi_qD): %12.8g\n", 
            LinearAlgebra:-Rank(tmp2), LinearAlgebra:-Rank(tmp1), LinearAlgebra:-Determinant(tmp1));
    break ;
  end:
  if i > i_print then 
    printf("step: %2d -- s=%8.5f(m) - theta = %6.3f(deg)",
            i, subs(tmp,s),subs(tmp,theta2*180/Pi));
  end:
  guess := tmp:
  sol_kine_A_num[i] := [dof,op(subs(y2x,tmp))]:
  
  # velocity analysis
  tmp1 := subs(data_A,sol_kine_A_num[i],JPhi_qD);
  tmp2 := subs(data_A,sol_kine_A_num[i],JPhi_q);
  sol_vel_A_num[i] := map(x->lhs(x)=subs( data_A, Phi_qI,sol_kine_A_num[i], rhs(x)), sol_vel_qD):
  if i > i_print then
    printf(" -- s'=%12.3g(m/s) - theta2' = %12.3g(deg/s)\n",
            subs(sol_vel_A_num[i],diff(s(t),t)),
            subs(sol_vel_A_num[i],diff(theta2(t),t)*180/Pi));
  end:
  
end:













Plot of velocities ratios
In velocity analysis, positions (i.e. coordinate values) must be known
#TAU1 := evalf([seq(subs(data,sol_FDPos[i],theta1(t)=dof_range[i],Tau[1,1]),i=1..NS_good)]): # = diffF(qD[1],qI[])
#TAU2 := evalf([seq(subs(data,sol_FDPos[i],theta1(t)=dof_range[i],Tau[2,1]),i=1..NS_good)]): # = diffF(qD[1],qI[])
#TAU3 := evalf([seq(subs(data,sol_FDPos[i],theta1(t)=dof_range[i],Tau[3,1]),i=1..NS_good)]): # = diffF(qD[1],qI[])

Error, unable to execute seq
Error, unable to execute seq
Error, unable to execute seq
#display( plot( <dof_range>*180/Pi,<TAU1>,color=c_set[1],legend=typeset('diff'(op(0,qD[1]),op(0,qI[1])))),
#         plot( <dof_range>*180/Pi,<TAU2>,color=c_set[2],legend=typeset('diff'(op(0,qD[2]),op(0,qI[1])))),
#        plot( <dof_range>*180/Pi,<TAU3>,color=c_set[3],legend=typeset('diff'(op(0,qD[3]),op(0,qI[1])))),
#         labels = [typeset(theta__1,"[°]"),tau],
#         title = " Velocity ratios");
Error, (in plot) two lists or Vectors of numerical values expected
We compute analytical singular configurations
SCs_s := solve([op(Phi_s),eq_det_s],q_vars,explicit=true): <%>:
nops(%); # 3 Singular Configurations???
nops(%%[1]);
<%%%[1]>:
                               3
                               21
Comment of the professor regarding T04-04 tutorial:
The SCs evaluated with the parameters of the system turn out not to be feasible: complex numbers
SCs exists analytically but not for this specific mechanism with given parameter values.
map(Vector,map(evalf,subs(data,subs(q_vars_to_function,dof),SCs_s))): # ???
nops(%); # ???
#evalf(subs(data,sol_kine_all,<%%[1]>));
#subs(q_vars_to_function,sol_kine_all);



We can now compute the acceleration just by differentiating the velocities.
qD' = Tau(qD,qI).qI'
Remember that accelerations of dependents are: qD'' = Tau.qI''+diff(Tau,t).qD';
#qD_dot;
qd_vars_acc := simplify( map(diff,qd_vars_dot,t),size):
AA,res := LinearAlgebra:-GenerateMatrix(convert(qd_vars_acc ,list),diff(qi_vars,t,t)):
Proof => AA should be equal to Tau, and It is
simplify(AA-Tau);
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
                          [          ]
                          [0  0  0  0]
#simplify(subs(subs_qd_vars_vel,qd_vars_acc[1]),size);
In acceleration analysis, positions (i.e. coordinate values) and velocities of the coordinates must be known
here the substitution can be done analytically since the model is not complex.
However, it would be better to compute velocities and accelerations in sequence given the position, velocity and acceleration of independent:
qd_vars_acc_full := subs( subs_qd_vars_vel,qd_vars_acc):
qd_vars_acc_full: nops(%); # ????

                               3
Can be rewritten as: AA1.qI''+AA2.qI'^2: ????? 
#AA1 ,  res := LinearAlgebra:-GenerateMatrix(convert(qd_vars_acc_full,list),diff(qi_vars,t,t)):
#AA2 ,  res := LinearAlgebra:-GenerateMatrix(subs(diff(qi_vars,t)^2=qI2,convert(-res,list)),[qI2]):

#simplify(res);


