%
% Matlab code for the Course:
%
%     Modelling and Simulation of Mechatronics System
%
% by
% Enrico Bertolazzi
% Dipartimento di Ingegneria Industriale
% Universita` degli Studi di Trento
% email: enrico.bertolazzi@unitn.it
%
%%addpath('../ode_lib');
classdef Winx < ODEbaseClass_P
  properties (SetAccess = protected, Hidden = true)
    gravity;
    npos;
    nvel;
    L1 = 1.5*195-25; 
    L2 = 1.5*266-25;
    L3 = 1.5*130; 
    L4 = 1.5*59.3; 
    L5 = 1.5*175; 
    L6 = 1.5*207; 
    L7 = 1.5*64.9; 
    L8 = 1.5*64.9; 
    L9 = 120; 
    L10=40; 
    phi1=-pi/5;
    phi2=pi/4;

    m1 = 3000;
    m2 = 500;
    m3 = 500;
    m4 = 4000;
    m5 = 750;
    m6 = 150;
    IX2 = 0;     
    IX3 =0; 
    IX4 = 0;       
    IX5 = 0;      
    IZ1 =0;  
    IZ6 = 0;      


    c1 = 0;
    c2 = 0;
    c3 = 0;
    c4 = 0;
    c5 = 0;
    c6 = 10;
    prism=100;


  end
  methods
    function self = Winx( data )
      self@ODEbaseClass_P('Winx',12,4);     % 12 equation 4 invariant
      self.gravity = data.gravity;

      self.IX2 = ((self.L3/2)^2)*self.m2; 
      self.IX3 = ((self.L4/2)^2)*self.m3;
      self.IX4 = ((self.L5)^2)*self.m4; 
      self.IX5 = ((self.L7)^2)*self.m5;
      self.IZ1 = ((self.L2/2)^2)*self.m1; 
      self.IZ6 = ((self.L9)^2)*self.m6;
      self.npos=6;
      self.nvel=6;
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__Mass = Mass( self, t,vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      % evaluate function
      jac__1_1 = m3;
      t1 = L9 ^ 2;
      t2 = t1 * m6;
      t4 = 0.1250000000e0 * IZ6;
      t5 = -0.3125000000e-1 * t2 + t4;
      t6 = 2 * phi2;
      t7 = cos(t6);
      t9 = 2 * theta6;
      t10 = cos(t9);
      t12 = sin(theta6);
      t13 = m6 * t12;
      t14 = L8 * L9;
      t15 = t14 * t13;
      t16 = 0.2500000000e0 * t15;
      t17 = L8 ^ 2;
      t18 = 0.2500000000e0 * t17;
      t19 = 0.3125000000e-1 * t1;
      t20 = t18 + t19;
      t21 = m6 * t20;
      t22 = -t16 + t21 - t4;
      t24 = L7 ^ 2;
      t25 = t24 * m5;
      t26 = 0.2500000000e0 * t25;
      t27 = t24 * m6;
      t28 = 0.2500000000e0 * t27;
      t29 = 0.2500000000e0 * IX5;
      t30 = L7 * m6;
      t31 = cos(phi2);
      t32 = t31 * L8;
      t33 = t32 * t30;
      t34 = 0.5000000000e0 * t33;
      t35 = L7 * L9;
      t39 = 0.2500000000e0 * m6 * t12 * t31 * t35;
      t41 = 2 * theta5;
      t42 = cos(t41);
      t44 = -t5;
      t45 = sin(t6);
      t49 = -m6 * t20;
      t50 = t16 + t49 + t4;
      t52 = sin(phi2);
      t53 = t52 * L8;
      t55 = 0.5000000000e0 * t53 * t30;
      t59 = 0.2500000000e0 * m6 * t12 * t52 * t35;
      t61 = sin(t41);
      t64 = 0.3750000000e0 * IZ6;
      t67 = L6 ^ 2;
      t68 = m5 * t67;
      t72 = 0.5000000000e0 * t68 + 0.5000000000e0 * t67 * m6;
      t73 = 2 * phi1;
      t74 = cos(t73);
      t76 = m6 * L5;
      t79 = m6 * L6;
      t80 = cos(phi1);
      t84 = -0.5000000000e0 * L9 * t76 - 0.5000000000e0 * t80 * L9 * t79;
      t89 = m5 + m6;
      t90 = t89 * L7;
      t92 = t80 * L6;
      t93 = t92 + L5;
      t96 = cos(theta5);
      t97 = t96 * (t12 * t31 * t84 + t93 * (L8 * t31 * m6 + t90));
      t98 = L9 * L6;
      t99 = t52 * t98;
      t100 = sin(theta5);
      t104 = 0.5000000000e0 * m6 * t80 * t100 * t99;
      t106 = t31 * L9 * t30;
      t108 = L5 * L9;
      t110 = m6 * t100 * t52;
      t112 = 0.5000000000e0 * t110 * t108;
      t113 = L8 * m6;
      t114 = L9 * t113;
      t118 = L6 * L8;
      t121 = L5 * L6;
      t124 = t80 * (-0.1e1 * t110 * t118 + t89 * t121);
      t127 = 0.1e1 * t110 * L5 * L8;
      t128 = cos(theta6);
      t129 = sin(phi1);
      t133 = 0.5000000000e0 * m6 * t129 * t128 * t98;
      t135 = L5 ^ 2;
      t136 = 0.5000000000e0 * t135;
      t139 = 0.5000000000e0 * m5;
      t143 = 0.5000000000e0 * IX4;
      t144 = t42 * (t10 * t7 * t5 + t7 * t22 + t26 + t28 - t29 + t34 - t39) + t61 * (t10 * t45 * t44 + t45 * t50 - t55 + t59) + t10 * (-0.9375000000e-1 * t2 + t64) + t74 * t72 + t97 + t12 * (t104 - 0.2500000000e0 * t106 + t112 - 0.2500000000e0 * t114) + t34 + t124 - t127 + t133 + m6 * (0.2500000000e0 * t24 + t18 - t19 + t136) + t26 + t135 * (t139 + 0.2000000000e1 * m4) - t29 + t4 - t143;
      t145 = 2 * theta4;
      t146 = cos(t145);
      t153 = 0.5000000000e0 * IZ6;
      t155 = t153 - 0.1250000000e0 * t2;
      t156 = t31 * t155;
      t158 = -t155;
      t162 = sin(t9);
      t165 = sin(t73);
      t169 = m6 * t129 * t12;
      t172 = m6 * t128;
      t174 = 0.5000000000e0 * t172 * t14;
      t175 = m6 * t129;
      t176 = t175 * t118;
      t177 = 0.1e1 * t176;
      t180 = L7 * L6;
      t181 = m5 * t180;
      t183 = L7 * t79;
      t186 = t129 * (-0.1e1 * t181 - 0.1e1 * t183);
      t188 = 0.5000000000e0 * t172 * t35;
      t202 = m5 * t121;
      t204 = L6 * t76;
      t211 = sin(t145);
      t219 = L3 ^ 2;
      t220 = 0.5000000000e0 * t219;
      t223 = (s + 0.5000000000e0 * L4) * L3;
      t224 = s ^ 2;
      t225 = 0.5000000000e0 * t224;
      t226 = L4 ^ 2;
      t228 = s * L4;
      t229 = 0.5000000000e0 * t228;
      t232 = t219 * m2;
      t234 = 0.5000000000e0 * IX2;
      t235 = 0.5000000000e0 * IX3;
      t238 = cos(2 * theta2);
      t245 = t146 * t144 + t42 * (t10 * t7 * t44 + t7 * t50 - t26 - t28 + t29 - t34 + t39) + t211 * (t162 * (t52 * t100 * t158 + t96 * t156) - t165 * t72 + t96 * (0.5000000000e0 * t169 * t31 * t98 + t31 * (t174 - t177) + t186 + t188) - 0.5000000000e0 * t175 * t100 * t12 * t99 + 0.5000000000e0 * m6 * t80 * t128 * t98 + t52 * t100 * (-t174 + t176) + t129 * (-0.1e1 * t202 - 0.1e1 * t204) + 0.5000000000e0 * t172 * t108) + t61 * (t10 * t45 * t5 + t45 * t22 + t55 - t59) + t10 * t5 + t238 * (m3 * (t220 + t223 + t225 + 0.1250000000e0 * t226 + t229) + 0.1250000000e0 * t232 - t234 - t235) + t97 + t12 * (t104 - 0.7500000000e0 * t106 + t112 - 0.7500000000e0 * t114) + 0.1500000000e1 * t33 + t124 - t127 - t133;
      t261 = m6 * (0.75e0 * t24 + 0.75e0 * t17 + 0.15625e0 * t1 + t136 + 0.5e0 * t67) + 0.5e0 * t68 + 0.75e0 * t25 + t135 * (t139 + 0.2e1 * m4) + t64 + m3 * (t220 + t223 + t225 + 0.125e0 * t226 + t229) + 0.125e0 * t232 + t29 + IZ1 + t234 + t235 + t143;
      jac__2_2 = t245 + t261;
      t264 = 0.6250000000e-1 * IZ6 - 0.1562500000e-1 * t2;
      t266 = cos(t41 - theta4 + t6 - t9);
      t269 = cos(theta4 + phi2 - t9 + theta5);
      t272 = cos(theta4 + phi2 + t9 + theta5);
      t274 = -t29 + t28 + t26;
      t276 = cos(-t41 + theta4);
      t280 = cos(theta4 + t6 + t41);
      t284 = 0.5000000000e0 * t181 + 0.5000000000e0 * t183;
      t286 = cos(phi1 + theta4 - theta5);
      t288 = -t264;
      t290 = cos(t41 + theta4 + t6 + t9);
      t293 = cos(t41 + theta4 + t6 - t9);
      t296 = L5 * L7 * m5;
      t298 = L7 * t76;
      t300 = -0.5000000000e0 * t296 - 0.5000000000e0 * t298;
      t302 = cos(theta4 + theta5);
      t305 = cos(-theta4 + phi2 - t9 + theta5);
      t310 = cos(t41 - theta4 + t6);
      t313 = cos(-theta4 + phi2 + t9 + theta5);
      t316 = cos(t41 - theta4 + t6 + t9);
      t320 = cos(t41 + theta4);
      t324 = cos(theta4 - theta5);
      t328 = cos(phi1 + theta4 + theta5);
      t330 = m6 * L9;
      t332 = sin(-theta6 - theta5 + phi1 + theta4 - phi2);
      t333 = t332 * L6;
      t336 = 0.1250000000e0 * L8;
      t337 = 0.1250000000e0 * L5;
      t339 = L9 * (-t336 - t337);
      t341 = sin(-theta4 + phi2 + theta6 + theta5);
      t345 = sin(theta4 + phi2 - theta6 + theta5);
      t349 = L9 * (-t336 + t337);
      t351 = sin(theta4 + phi2 + theta6 + theta5);
      t355 = sin(-theta4 + phi2 - theta6 + theta5);
      t358 = t310 * (t21 - t4) + t313 * t5 + t316 * t264 - t320 * t274 - t324 * t300 - t328 * t284 + 0.1250000000e0 * t333 * t330 + t341 * m6 * t339 + t345 * m6 * t339 + t351 * m6 * t349 + t355 * m6 * t349;
      t361 = sin(t41 + theta4 - theta6 + t6);
      t366 = sin(t41 - theta4 - theta6 + t6);
      t371 = sin(t41 + theta4 + phi2 + theta6);
      t376 = sin(t41 - theta4 + phi2 + theta6);
      t381 = sin(t41 + theta4 + phi2 - theta6);
      t386 = sin(t41 - theta4 + phi2 - theta6);
      t391 = sin(t41 + theta4 + t6 + theta6);
      t396 = sin(t41 - theta4 + theta6 + t6);
      t401 = cos(t41 - theta4 + phi2);
      t406 = cos(t41 + theta4 + phi2);
      t412 = cos(phi2 + theta4 + theta5);
      t417 = cos(phi2 - theta4 + theta5);
      t422 = cos(phi2 + phi1 + theta4 + theta5);
      t427 = cos(-phi2 + phi1 + theta4 - theta5);
      t432 = sin(-theta6 + theta5 + phi1 + theta4 + phi2);
      t433 = t432 * L6;
      t437 = sin(theta6 + theta5 + phi1 + theta4 + phi2);
      t438 = t437 * L6;
      t442 = sin(theta6 - theta5 + phi1 + theta4 - phi2);
      t443 = t442 * L6;
      t447 = sin(theta5 + theta4 + theta6);
      t448 = t447 * L7;
      t452 = sin(theta5 + theta4 - theta6);
      t453 = t452 * L7;
      t457 = sin(-theta5 + theta4 + theta6);
      t458 = t457 * L7;
      t462 = sin(-theta5 + theta4 - theta6);
      t463 = t462 * L7;
      t466 = -0.5000000000e0 * t412 * L8 * t76 + 0.5000000000e0 * t417 * L8 * t76 - 0.5000000000e0 * t422 * m6 * t118 + 0.5000000000e0 * t427 * m6 * t118 - 0.1250000000e0 * t433 * t330 + 0.1250000000e0 * t438 * t330 - 0.1250000000e0 * t443 * t330 - 0.1250000000e0 * t448 * t330 - 0.1250000000e0 * t453 * t330 + 0.1250000000e0 * t458 * t330 + 0.1250000000e0 * t463 * t330;
      jac__2_4 = t266 * t264 + t269 * t44 + t272 * t5 + t276 * t274 + t280 * (t49 + t4) + t286 * t284 + t290 * t288 + t293 * t288 + t302 * t300 + t305 * t44 + t358 - 0.1250000000e0 * t361 * L9 * t113 + 0.1250000000e0 * t366 * L9 * t113 + 0.1250000000e0 * t371 * m6 * t35 - 0.1250000000e0 * t376 * m6 * t35 - 0.1250000000e0 * t381 * m6 * t35 + 0.1250000000e0 * t386 * m6 * t35 + 0.1250000000e0 * t391 * L9 * t113 - 0.1250000000e0 * t396 * L9 * t113 + 0.5000000000e0 * t401 * L8 * t30 - 0.5000000000e0 * t406 * L8 * t30 + t466;
      t468 = sin(theta4);
      t472 = t468 * t100;
      t476 = cos(theta4);
      t508 = 0.5000000000e0 * t169 * t98;
      jac__2_5 = t162 * (t96 * t468 * t156 + t472 * t52 * t158) + t10 * t476 * t155 + t476 * (t96 * (t31 * (t93 * t113 + t12 * t84) + t93 * t90) + t31 * (-0.1e1 * t13 * t35 + 0.2000000000e1 * L8 * t30) + t100 * t52 * (-t12 * t84 - 0.1e1 * t113 * t92 - 0.1e1 * L8 * t76) - 0.1e1 * t15 + m6 * (t17 + 0.1250000000e0 * t1 + t24) + t153 + t25) + t96 * t468 * (t31 * (t174 - t177 + t508) + t186 + t188) + t472 * t52 * (-t174 + t176 - t508);
      t519 = L5 + L8;
      t522 = sin(-theta4 + phi2 - theta6);
      t525 = L5 - 0.1e1 * L8;
      t532 = sin(-theta4 + phi2 + theta6);
      t535 = sin(theta4 + phi2 - theta6);
      t541 = sin(theta4 + phi2 + theta6);
      t543 = -0.1e1 * t333 - 0.1e1 * t443 + t355 * t519 + t433 + t463 + t522 * L7 + t341 * t525 + t345 * t525 + t438 - 0.1e1 * t458 - 0.1e1 * t453 + t417 * L9 + t532 * L7 + t535 * L7 + t351 * t519 - 0.1e1 * t412 * L9 + t541 * L7 + t448;
      jac__2_6 = -0.125e0 * t543 * t330;
      jac__3_3 = m3 * (t219 + (L4 + 0.2e1 * s) * L3 + 0.2500000000e0 * t226 + t224 + t228) + 0.2500000000e0 * t232;
      jac__4_2 = jac__2_4;
      t553 = 0.2500000000e0 * IZ6;
      t554 = 0.5000000000e0 * IX5;
      t556 = cos(-theta5 + phi1);
      t560 = cos(theta5 + phi1);
      t563 = phi2 + theta5;
      t564 = cos(t563);
      t569 = sin(phi2 - theta6 + t41);
      t574 = cos(t41 + phi2);
      t578 = sin(t41 + t6 + theta6);
      t583 = sin(t41 + t6 - theta6);
      t588 = sin(phi2 + theta6 + t41);
      t592 = theta5 + phi2 + theta6;
      t593 = sin(t592);
      t594 = t593 * L9;
      t597 = theta5 + phi2 - theta6;
      t598 = sin(t597);
      t599 = t598 * L9;
      t603 = cos(-theta5 - phi2 + phi1);
      t605 = t603 * m6 * t118;
      t607 = cos(theta5 + phi2 + phi1);
      t609 = t607 * m6 * t118;
      t611 = sin(phi2 - theta6);
      t616 = sin(theta6 + phi1);
      t621 = sin(-theta6 + phi1);
      t625 = t553 + t554 + t556 * t89 * t180 + t560 * t89 * t180 + 0.2000000000e1 * t564 * L8 * t76 + 0.2500000000e0 * t569 * m6 * t35 + t574 * L8 * t30 - 0.2500000000e0 * t578 * L9 * t113 + 0.2500000000e0 * t583 * L9 * t113 - 0.2500000000e0 * t588 * m6 * t35 - 0.5000000000e0 * t594 * t76 + 0.5000000000e0 * t599 * t76 + t605 + t609 + 0.2500000000e0 * t611 * m6 * t35 - 0.5000000000e0 * t616 * L9 * t79 - 0.5000000000e0 * t621 * L9 * t79;
      t627 = sin(phi2 - theta6 + theta5 + phi1);
      t629 = t627 * L9 * t79;
      t632 = sin(-phi2 + theta6 - theta5 + phi1);
      t634 = t632 * L9 * t79;
      t637 = sin(phi2 + theta6 + theta5 + phi1);
      t639 = t637 * L9 * t79;
      t642 = sin(-phi2 - theta6 - theta5 + phi1);
      t644 = t642 * L9 * t79;
      t647 = sin(phi2 + theta6);
      t651 = 0.5000000000e0 * t25;
      t680 = cos(2 * t563);
      t683 = cos(2 * t597);
      t686 = cos(2 * t592);
      t689 = 0.2500000000e0 * t629 - 0.2500000000e0 * t634 - 0.2500000000e0 * t639 + 0.2500000000e0 * t644 - 0.2500000000e0 * t647 * m6 * t35 + t651 + t68 + t135 * (m5 + 0.4e1 * m4) + m6 * (t135 + t67 + 0.5000000000e0 * t24 + 0.1875e0 * t1 + 0.5e0 * t17) + t96 * (0.2e1 * t296 + 0.2e1 * t298) + t80 * (0.2e1 * t202 + 0.2e1 * t204) + t10 * (0.6250000000e-1 * t2 - t553) + t42 * (t651 + 0.5000000000e0 * t27 - t554) + t680 * (m6 * (0.5000000000e0 * t17 + 0.6250000000e-1 * t1) - t553) + t683 * t5 + t686 * t5 - 0.5000000000e0 * t15 + t33;
      jac__4_4 = t625 + t689;
      t695 = sin(theta6 + theta5);
      t700 = sin(-theta6 + theta5);
      t711 = cos(-t9 + phi2 + theta5);
      t715 = cos(phi2 + t9 + theta5);
      jac__4_5 = -0.2500000000e0 * t594 * t113 - 0.2500000000e0 * t599 * t113 - 0.2500000000e0 * t695 * m6 * t35 - 0.2500000000e0 * t700 * m6 * t35 + t556 * m5 * t180 / 2 - t560 * m5 * t180 / 2 + 0.6250000000e-1 * t711 * t2 - 0.6250000000e-1 * t715 * t2 + 0.2500000000e0 * t715 * IZ6 - 0.2500000000e0 * t711 * IZ6 - t560 * L7 * t79 / 2 - 0.1250000000e0 * t629 - 0.1250000000e0 * t634 + 0.1250000000e0 * t639 + 0.1250000000e0 * t644 + t605 / 2 - t609 / 2 + t556 * L7 * t79 / 2;
      t741 = t129 * t128 * L6;
      t742 = 0.5e0 * L9;
      jac__4_6 = 0.5e0 * (t12 * (t96 * (L7 + t32) + L5 - 0.1e1 * t100 * t53 + t92) + t96 * t31 * (t741 - t742) + t100 * t52 * (-0.1e1 * t741 + t742)) * t330;
      jac__5_2 = jac__2_5;
      jac__5_4 = jac__4_5;
      jac__5_5 = t10 * t155 + t12 * (-0.1e1 * t106 - 0.1e1 * t114) + 0.2e1 * t33 + m6 * (t24 + t17 + 0.125e0 * t1) + t153 + t25;
      jac__5_6 = -0.25e0 * (t647 + t611) * m6 * t35;
      jac__6_2 = jac__2_6;
      jac__6_4 = jac__4_6;
      jac__6_5 = jac__5_6;
      jac__6_6 = 0.25e0 * t2;
      
      % store on output
      jac__Mass = zeros(6,6);
      jac__Mass(1,1) = jac__1_1;
      jac__Mass(2,2) = jac__2_2;
      jac__Mass(2,4) = jac__2_4;
      jac__Mass(2,5) = jac__2_5;
      jac__Mass(2,6) = jac__2_6;
      jac__Mass(3,3) = jac__3_3;
      jac__Mass(4,2) = jac__4_2;
      jac__Mass(4,4) = jac__4_4;
      jac__Mass(4,5) = jac__4_5;
      jac__Mass(4,6) = jac__4_6;
      jac__Mass(5,2) = jac__5_2;
      jac__Mass(5,4) = jac__5_4;
      jac__Mass(5,5) = jac__5_5;
      jac__Mass(5,6) = jac__5_6;
      jac__Mass(6,2) = jac__6_2;
      jac__Mass(6,4) = jac__6_4;
      jac__Mass(6,5) = jac__6_5;
      jac__Mass(6,6) = jac__6_6;
    end

   
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res__Phi = Phi( self, t,vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = L3 + L4 + s;
      t2 = cos(theta2);
      t4 = cos(theta4);
      t7 = sin(theta1);
      res__1 = -t7 * (-L5 * t4 + t2 * t1);
      t10 = sin(theta2);
      t12 = sin(theta4);
      res__2 = L5 * t12 - t10 * t1 - L1 + L2;
      
      % store on output
      res__Phi = zeros(2,1);
      res__Phi(1) = res__1;
      res__Phi(2) = res__2;
    end

    
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__DPhiDp = DPhiDp(self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      % evaluate function
      t1 = sin(theta1);
      t2 = cos(theta2);
      jac__1_1 = -t2 * t1;
      t4 = cos(theta1);
      t5 = L3 + L4 + s;
      t6 = t2 * t5;
      t7 = cos(theta4);
      t8 = L5 * t7;
      jac__1_2 = -(t6 - t8) * t4;
      t11 = sin(theta2);
      jac__1_3 = t5 * t11 * t1;
      t13 = sin(theta4);
      jac__1_4 = -L5 * t13 * t1;
      jac__2_1 = -t11;
      jac__2_3 = -t6;
      jac__2_4 = t8;
      
      % store on output
      jac__DPhiDp = zeros(2,6);
      jac__DPhiDp(1,1) = jac__1_1;
      jac__DPhiDp(1,2) = jac__1_2;
      jac__DPhiDp(1,3) = jac__1_3;
      jac__DPhiDp(1,4) = jac__1_4;
      jac__DPhiDp(2,1) = jac__2_1;
      jac__DPhiDp(2,3) = jac__2_3;
      jac__DPhiDp(2,4) = jac__2_4;
    end

    
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__DPhiDt = DPhiDt( self, t,vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      % evaluate function

      % store on output
      jac__DPhiDt = zeros(2,1);
    end
    
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res__A = A(self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = cos(theta2);
      t3 = L3 + L4 + s;
      t4 = t3 * theta2__dot;
      t5 = sin(theta2);
      t7 = sin(theta4);
      t11 = sin(theta1);
      t14 = cos(theta4);
      t18 = cos(theta1);
      res__1 = t11 * (-L5 * t7 * theta4__dot - t1 * s__dot + t5 * t4) - t18 * (-L5 * t14 + t1 * t3) * theta1__dot;
      res__2 = L5 * t14 * theta4__dot - t5 * s__dot - t1 * t4;
      
      % store on output
      res__A = zeros(2,1);
      res__A(1) = res__1;
      res__A(2) = res__2;
    end
  
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__DADp = DADp( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = cos(theta1);
      t2 = t1 * theta1__dot;
      t3 = cos(theta2);
      t5 = sin(theta1);
      t7 = sin(theta2);
      jac__1_1 = t7 * theta2__dot * t5 - t3 * t2;
      t9 = t3 * s__dot;
      t10 = L3 + L4 + s;
      t11 = t10 * theta2__dot;
      t12 = t7 * t11;
      t13 = sin(theta4);
      t15 = L5 * t13 * theta4__dot;
      t20 = cos(theta4);
      jac__1_2 = t1 * (-t9 + t12 - t15) + (-L5 * t20 + t3 * t10) * t5 * theta1__dot;
      jac__1_3 = t5 * (t7 * s__dot + t3 * t11) + t10 * t7 * t2;
      jac__1_4 = -(theta1__dot * t13 * t1 + theta4__dot * t20 * t5) * L5;
      jac__2_1 = -t3 * theta2__dot;
      jac__2_3 = -t9 + t12;
      jac__2_4 = -t15;
      
      % store on output
      jac__DADp = zeros(2,6);
      jac__DADp(1,1) = jac__1_1;
      jac__DADp(1,2) = jac__1_2;
      jac__DADp(1,3) = jac__1_3;
      jac__DADp(1,4) = jac__1_4;
      jac__DADp(2,1) = jac__2_1;
      jac__DADp(2,3) = jac__2_3;
      jac__DADp(2,4) = jac__2_4;
    end

    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__DADt = DADt( self, t, vars__ )
      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      
      % store on output
      jac__DADt = zeros(2,1);
    end

    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res__B = B( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = theta1__dot ^ 2;
      t2 = theta2__dot ^ 2;
      t4 = L3 + L4 + s;
      t6 = cos(theta2);
      t8 = sin(theta2);
      t12 = cos(theta4);
      t14 = theta4__dot ^ 2;
      t18 = sin(theta1);
      t23 = sin(theta4);
      t28 = cos(theta1);
      res__1 = t18 * (-t6 * t4 * (t1 + t2) - 2 * s__dot * t8 * theta2__dot + (t1 + t14) * t12 * L5) - 2 * t28 * theta1__dot * (-L5 * t23 * theta4__dot + t8 * t4 * theta2__dot - t6 * s__dot);
      res__2 = L5 * t23 * t14 + 2 * t6 * theta2__dot * s__dot - t8 * t2 * t4;
      
      % store on output
      res__B = zeros(2,1);
      res__B(1) = res__1;
      res__B(2) = res__2;
    end


    function res__gfun = gfun( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      c1 = self.c1;
      c2 = self.c2;
      c3 = self.c3;
      c4 = self.c4;
      c5 = self.c5;
      c6 = self.c6;
      prism = self.prism;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = theta1 - theta2;
      t2 = sin(t1);
      t9 = theta1__dot ^ 2;
      t11 = 2 * theta2;
      t12 = cos(t11);
      t15 = theta1 + theta2;
      t16 = sin(t15);
      t26 = theta2__dot ^ 2;
      res__1 = -0.4905000000e1 * t2 * m3 + t12 * m3 * t9 * (0.5000000000e0 * s + 0.5000000000e0 * L3 + 0.2500000000e0 * L4) - 0.4905000000e1 * t16 * m3 + m3 * (t9 * (0.5e0 * s + 0.5e0 * L3 + 0.25e0 * L4) + t26 * (s + L3 + 0.5e0 * L4)) + prism;
      t30 = theta4__dot * theta1__dot;
      t31 = L9 ^ 2;
      t32 = t31 * m6;
      t33 = t32 * t30;
      t35 = theta1__dot * IZ6;
      t36 = theta4__dot * t35;
      t37 = 0.2500000000e0 * t36;
      t38 = 0.6250000000e-1 * t33 - t37;
      t39 = 2 * theta6;
      t40 = cos(t39);
      t42 = L9 * L8;
      t43 = sin(theta6);
      t44 = t43 * t42;
      t45 = theta1__dot * m6;
      t46 = theta4__dot * t45;
      t47 = t46 * t44;
      t48 = 0.5000000000e0 * t47;
      t49 = L8 ^ 2;
      t52 = t31 * theta4__dot;
      t53 = 0.6250000000e-1 * t52;
      t54 = -0.5000000000e0 * t49 * theta4__dot - t53;
      t58 = 2 * phi2;
      t59 = sin(t58);
      t61 = L7 * L8;
      t62 = t46 * t61;
      t64 = L9 * L7;
      t65 = t43 * t64;
      t66 = t46 * t65;
      t67 = 0.5000000000e0 * t66;
      t69 = sin(phi2);
      t72 = 2 * theta5;
      t73 = sin(t72);
      t81 = cos(t58);
      t84 = cos(phi2);
      t86 = L7 ^ 2;
      t87 = t86 * m6;
      t88 = t87 * t30;
      t90 = 0.5000000000e0 * IX5;
      t91 = t86 * m5;
      t92 = 0.5000000000e0 * t91;
      t93 = -t90 + t92;
      t97 = cos(t72);
      t99 = theta1__dot * theta6__dot;
      t100 = t99 * t32;
      t101 = 0.2500000000e0 * t100;
      t102 = theta6__dot * t35;
      t103 = -t101 + t102;
      t104 = t69 * t103;
      t105 = sin(theta5);
      t109 = cos(theta5);
      t111 = t84 * t109 * (t101 - 0.1e1 * t102);
      t116 = theta5__dot * theta1__dot;
      t117 = t116 * t32;
      t119 = theta5__dot * t35;
      t120 = 0.5000000000e0 * t119;
      t121 = -0.1250000000e0 * t117 + t120;
      t127 = sin(t39);
      t129 = L6 ^ 2;
      t130 = m5 + m6;
      t131 = t130 * t129;
      t132 = 2 * phi1;
      t133 = cos(t132);
      t136 = L9 * L6;
      t137 = t43 * t136;
      t138 = sin(phi1);
      t139 = m6 * t138;
      t143 = L8 * L6;
      t144 = t138 * t143;
      t145 = theta5__dot * t45;
      t148 = cos(theta6);
      t149 = t148 * t42;
      t152 = 0.5000000000e0 * t116 * t139 * t137 - 0.1e1 * t145 * t144 + 0.5000000000e0 * t145 * t149;
      t154 = cos(phi1);
      t155 = t154 * t136;
      t156 = t46 * t155;
      t157 = L8 * theta6__dot;
      t158 = 0.5000000000e0 * t157;
      t159 = L5 * theta4__dot;
      t165 = L5 * L8;
      t167 = 0.2000000000e1 * t46 * t165;
      t169 = L9 * L6 * t148;
      t170 = t99 * t139;
      t172 = 0.5000000000e0 * t170 * t169;
      t173 = t154 * t143;
      t175 = 0.2000000000e1 * t46 * t173;
      t178 = t148 * t64;
      t181 = L6 * L7;
      t182 = theta1__dot * m5;
      t183 = theta5__dot * t182;
      t184 = t183 * t181;
      t186 = t145 * t181;
      t192 = 0.1e1 * t156;
      t193 = 0.1e1 * t159;
      t205 = theta6__dot * t45;
      t208 = theta4__dot * t182;
      t213 = 0.2000000000e1 * t208 * t181 + 0.2000000000e1 * t46 * t181;
      t214 = t154 * t213;
      t215 = L5 * L7;
      t217 = 0.2000000000e1 * t46 * t215;
      t219 = 0.2000000000e1 * t208 * t215;
      t223 = 0.5000000000e0 * t205 * t155;
      t224 = L8 * theta4__dot;
      t227 = 0.5000000000e0 * L5 * theta6__dot;
      t233 = t30 * t139;
      t235 = L5 * L6;
      t240 = 0.2000000000e1 * t208 * t235 + 0.2000000000e1 * t46 * t235;
      t243 = 0.5000000000e0 * t49;
      t244 = L5 ^ 2;
      t258 = t73 * (t59 * (m6 * theta1__dot * t54 + t40 * t38 + t37 + t48) + t69 * (-0.1e1 * t62 + t67)) + t97 * (t81 * (-m6 * theta1__dot * t54 - t40 * t38 - t37 - t48) + t84 * (t62 - t67) + 0.5000000000e0 * t88 + theta1__dot * theta4__dot * t93) + t40 * (t105 * t104 + t111 - 0.1875000000e0 * t33 + 0.7500000000e0 * t36) + t127 * (t105 * t84 * t121 + t69 * t109 * t121) + t133 * t131 * t30 + t105 * (t84 * t152 + t69 * (t43 * (t156 + t45 * L9 * (-t158 + t159)) - t167 + t172 - t175) + 0.5000000000e0 * t145 * t178 + t138 * (-0.1e1 * t184 - 0.1e1 * t186)) + t84 * (t109 * (t43 * (-t192 + t45 * L9 * (-t193 + t158)) + t167 - t172 + t175) + t62 - t67) + t69 * t109 * t152 + t109 * (0.5000000000e0 * t205 * t65 + t214 + t217 + t219) + t43 * (t223 + t45 * L9 * (-0.5000000000e0 * t224 + t227)) + t233 * t169 + t154 * t240 + m6 * theta1__dot * (-t53 + theta4__dot * (0.5000000000e0 * t86 + t243 + t244)) + theta1__dot * theta4__dot * (t92 + t244 * (0.4000000000e1 * m4 + m5) + 0.2500000000e0 * IZ6 - t90 - 0.1e1 * IX4);
      t259 = 2 * theta4;
      t260 = sin(t259);
      t262 = 0.6250000000e-1 * t117;
      t263 = 0.2500000000e0 * t119;
      t266 = t145 * t44;
      t267 = 0.5000000000e0 * t266;
      t268 = theta5__dot * t49;
      t270 = theta5__dot * t31;
      t272 = 0.5000000000e0 * t268 + 0.6250000000e-1 * t270;
      t275 = t40 * (-t262 + t263) - t267 + m6 * theta1__dot * t272 - t263;
      t278 = 0.2500000000e0 * t102;
      t279 = 0.6250000000e-1 * t100 - t278;
      t280 = t127 * t279;
      t281 = t148 * t99;
      t282 = m6 * L8;
      t283 = L9 * t282;
      t284 = t283 * t281;
      t285 = 0.2500000000e0 * t284;
      t288 = t145 * t65;
      t289 = 0.5000000000e0 * t288;
      t290 = t145 * t61;
      t291 = -t289 + t290;
      t293 = t69 * t64;
      t294 = m6 * t148;
      t295 = t99 * t294;
      t296 = t295 * t293;
      t298 = t87 * t116;
      t299 = 0.5000000000e0 * t298;
      t305 = -t127 * t279;
      t309 = t84 * t64;
      t310 = t295 * t309;
      t315 = 0.2500000000e0 * t33;
      t316 = -t315 + t36;
      t320 = t315 - 0.1e1 * t36;
      t327 = sin(t132);
      t330 = L5 * L9;
      t331 = t145 * t330;
      t332 = 0.5000000000e0 * t331;
      t333 = t145 * t155;
      t334 = 0.5000000000e0 * t333;
      t339 = t154 * L6 + L5;
      t342 = t43 * (-t332 - t334) + t339 * L8 * theta5__dot * t45;
      t344 = t233 * t137;
      t351 = 0.2000000000e1 * t46 * t144;
      t368 = t205 * t178;
      t369 = 0.2500000000e0 * t368;
      t377 = -0.1e1 * t46 * t178 + t138 * t213;
      t380 = 0.5000000000e0 * t170 * t137;
      t388 = t73 * (t81 * t275 + t59 * (t280 - t285) + t84 * t291 - 0.2500000000e0 * t296 + t299 + theta1__dot * theta5__dot * t93) + t97 * (t81 * (t305 + t285) + t59 * t275 + 0.2500000000e0 * t310 + t69 * t291) + t127 * (t105 * t69 * t316 + t84 * t109 * t320 + 0.7500000000e0 * t102 - 0.1875000000e0 * t100) + t327 * t131 * t30 + t105 * (t84 * t342 + t69 * (t344 + t148 * (-t223 + t45 * L9 * (-t227 + t224)) - t351) + t130 * t339 * L7 * t116) + t84 * (t109 * (-0.1e1 * t344 + t148 * (t223 + t45 * L9 * (t227 - 0.1e1 * t224)) + t351) + t369) + t69 * t109 * t342 + t109 * t377 + t380 + t148 * (-t192 + t45 * L9 * (0.2500000000e0 * t157 - t193)) + t138 * t240;
      t389 = cos(t259);
      t391 = theta4__dot ^ 2;
      t394 = t391 * IZ6;
      t395 = 0.2500000000e0 * t394;
      t397 = cos(theta4);
      t401 = theta4__dot * theta6__dot;
      t402 = t401 * t32;
      t403 = 0.1250000000e0 * t402;
      t404 = theta4__dot * IZ6;
      t405 = theta6__dot * t404;
      t406 = 0.5000000000e0 * t405;
      t407 = -t403 + t406;
      t408 = sin(theta4);
      t411 = t408 * t42;
      t412 = t401 * t294;
      t420 = 0.6250000000e-1 * t391 * t31;
      t430 = t40 * (t397 * (0.6250000000e-1 * t391 * t32 - t395) + t262 - t263) + t127 * t408 * t407 + 0.5000000000e0 * t412 * t411 + t397 * (0.5000000000e0 * t391 * t43 * L9 * t282 + m6 * (-t420 - 0.5000000000e0 * t391 * t49) + t395) + t267 - m6 * theta1__dot * t272 + t263;
      t432 = theta5__dot * theta4__dot;
      t433 = t32 * t432;
      t435 = theta5__dot * t404;
      t436 = 0.5000000000e0 * t435;
      t437 = -0.1250000000e0 * t433 + t436;
      t438 = t408 * t437;
      t440 = theta4__dot * m6;
      t441 = theta5__dot * t440;
      t442 = t441 * t44;
      t443 = 0.1e1 * t442;
      t445 = 0.1250000000e0 * t31 * t432;
      t446 = t49 * t432;
      t448 = m6 * (t445 + t446);
      t453 = t408 * t64;
      t456 = m6 * t43;
      t466 = 0.5000000000e0 * t412 * t453 + t397 * (0.5000000000e0 * t391 * t456 * t64 - 0.1e1 * t391 * m6 * t61) + t289 - 0.1e1 * t290;
      t469 = 0.2000000000e1 * t441 * t61;
      t470 = t441 * t65;
      t471 = 0.1e1 * t470;
      t472 = t469 - t471;
      t478 = -t93;
      t479 = t391 * t478;
      t503 = t440 * theta5__dot * t86;
      t505 = 0.1e1 * t91;
      t507 = theta5__dot * (-t505 + IX5);
      t514 = t405 - 0.2500000000e0 * t402;
      t517 = theta5__dot * theta6__dot;
      t519 = 0.2500000000e0 * t517 * t32;
      t521 = IZ6 * theta5__dot * theta6__dot;
      t522 = -t519 + t521;
      t537 = theta5__dot ^ 2;
      t538 = 0.1250000000e0 * t537;
      t545 = 0.5000000000e0 * t537 * IZ6;
      t546 = m6 * t31 * (-t538 + 0.1250000000e0 * t391) - 0.5000000000e0 * t394 + t545;
      t557 = L3 ^ 2;
      t561 = s * L4;
      t562 = s ^ 2;
      t563 = L4 ^ 2;
      t570 = t557 * m2;
      t576 = sin(t11);
      t582 = -0.1e1 * s - 0.5000000000e0 * L4;
      t585 = m3 * (-0.1e1 * s__dot * L3 + s__dot * t582);
      t589 = 0.5000000000e0 * t391 * L6;
      t590 = theta6__dot ^ 2;
      t592 = 0.5000000000e0 * t590 * L6;
      t594 = 0.5000000000e0 * t537 * L6;
      t595 = -t589 + t592 + t594;
      t599 = t391 * L8;
      t602 = 0.5000000000e0 * t537 * L8;
      t604 = 0.5000000000e0 * t590 * L8;
      t608 = t391 * t143;
      t609 = t537 * t143;
      t614 = t43 * t139 * L9 * t595 + t294 * L9 * (-0.5000000000e0 * t599 + t602 - t604) + t138 * m6 * (t608 - 0.1e1 * t609);
      t618 = t154 * m6;
      t620 = theta6__dot * t224;
      t625 = 0.5000000000e0 * t391 * L5;
      t627 = 0.5000000000e0 * t590 * L5;
      t633 = 0.1e1 * t608;
      t638 = 0.2500000000e0 * theta6__dot * t52;
      t641 = 0.1e1 * t391 * t165;
      t644 = t43 * (-t618 * L9 * t595 + m6 * L9 * (-0.1e1 * t620 - 0.5000000000e0 * t537 * L5 + t625 - t627)) + t154 * m6 * (-t633 + t609) + m6 * (t537 * t165 + t638 - t641);
      t646 = sin(theta1);
      t647 = t646 * L9;
      t649 = 0.4905000000e1 * m6 * t647;
      t651 = t43 * (-t334 - t332 - t649);
      t652 = t145 * t173;
      t653 = t646 * L8;
      t655 = 0.9810000000e1 * m6 * t653;
      t656 = t145 * t165;
      t660 = t517 * t139 * t169;
      t663 = cos(theta1);
      t664 = t663 * L9;
      t666 = 0.4905000000e1 * t456 * t664;
      t668 = m6 * theta5__dot * theta6__dot;
      t677 = 0.9810000000e1 * m6 * t663 * L8;
      t682 = -0.5000000000e0 * t205 * t330 - t223;
      t686 = t537 * L7;
      t687 = 0.5000000000e0 * t686;
      t688 = t391 * L7;
      t691 = 0.5000000000e0 * t590 * L7;
      t695 = t391 * t181;
      t696 = t537 * t181;
      t700 = t537 * m5;
      t701 = t700 * t181;
      t702 = 0.1e1 * t701;
      t703 = t391 * m5;
      t704 = t703 * t181;
      t709 = theta6__dot * t440;
      t712 = 0.1e1 * t695;
      t715 = 0.1e1 * t704;
      t720 = 0.1e1 * t391 * t215;
      t725 = 0.1e1 * t703 * t215;
      t736 = 0.9810000000e1 * L7 * m6 + 0.9810000000e1 * L7 * m5;
      t737 = t646 * t736;
      t763 = 0.5000000000e0 * t709 * t178;
      t780 = L6 * m6;
      t782 = 0.9810000000e1 * L6 * m5 + 0.9810000000e1 * t780;
      t790 = 0.5000000000e0 * IZ6 + t91;
      t796 = -t663 * t736;
      t798 = theta6__dot * t42;
      t801 = m6 * theta5__dot * t148 * t798;
      t805 = L5 * m6;
      t806 = 0.9810000000e1 * t805;
      t809 = -0.1962000000e2 * m4 - 0.9810000000e1 * m5;
      t821 = L3 * m2;
      t824 = cos(theta2);
      res__2 = t260 * t258 + t389 * t388 + t73 * (t81 * t430 + t59 * (t40 * t438 + t305 + t408 * (-t443 + t448 - t436) + t285) + t84 * t466 + t69 * (t408 * t472 + t369) + t397 * (-0.5000000000e0 * t391 * t87 + t479) - t299 + theta1__dot * theta5__dot * t478) + t97 * (t81 * (-t40 * t408 * t437 + t280 + t408 * (t442 + m6 * (-t445 - 0.1e1 * t446) + t436) - t285) + t59 * t430 + t84 * (t408 * (t470 - t469) - t369) + t69 * t466 + t408 * (-0.1e1 * t503 + theta4__dot * t507)) + t40 * (t105 * (t84 * t397 * t514 + t69 * t408 * t522) + t84 * t408 * t109 * (t519 - 0.1e1 * t521) + t69 * t397 * t109 * t514 + t438) + t127 * (t105 * t84 * t408 * t546 + t69 * t408 * t109 * t546 + t397 * t522 + t278 - 0.625000000e-1 * t100) + t576 * theta1__dot * (m3 * theta2__dot * (t557 + (L4 + 0.2000000000e1 * s) * L3 + t561 + t562 + 0.2500000000e0 * t563) + theta2__dot * (-0.1e1 * IX2 - 0.1e1 * IX3 + 0.2500000000e0 * t570)) + t12 * theta1__dot * t585 + t105 * (t84 * (t397 * t644 + t408 * t614 + t651 + t652 + t655 + t656) + t69 * (t408 * (-t519 + t660) + t397 * (-t666 + t148 * (-0.1e1 * t668 * t330 - 0.1e1 * t668 * t155) + t677) + t148 * t682) + t408 * (t294 * L9 * (t687 - 0.5000000000e0 * t688 - t691) + t138 * (m6 * (t695 - 0.1e1 * t696) - t702 + t704)) + t397 * (-0.1e1 * t709 * t65 + t154 * (m6 * (t696 - t712) + t701 - t715) + m6 * (t537 * t215 - t720) + t700 * t215 - t725) + t154 * t130 * theta5__dot * theta1__dot * t181 + t737 + t130 * t215 * t116) + t84 * (t408 * (t109 * (t519 - 0.1e1 * t660) + t469 - t471) + t397 * (t109 * (t148 * t339 * L9 * t668 + t666 - t677) + t668 * t178) - t109 * t148 * t682 + 0.7500000000e0 * t368) + t69 * (t408 * (t109 * t614 - t763) + t397 * (t109 * t644 - 0.5000000000e0 * t590 * t456 * t64) + t109 * (t651 + t652 + t655 + t656)) + t408 * (-t443 - 0.4905000000e1 * t294 * t664 + t138 * t663 * t782 + m6 * (t445 + (t86 + t49) * t432) + theta4__dot * theta5__dot * t790) + t397 * (t109 * t796 + t801 - t154 * t663 * t782 + t663 * (L5 * t809 - t806)) - t380 + 0.7500000000e0 * t284 + t663 * t824 * ((-0.9810000000e1 * s - 0.4905000000e1 * L4 - 0.9810000000e1 * L3) * m3 - 0.4905000000e1 * t821) + theta1__dot * t585 + c1;
      t831 = 0.4905000000e1 * s + 0.2452500000e1 * L4 + 0.4905000000e1 * L3;
      t833 = 0.2452500000e1 * t821;
      t835 = cos(t1);
      t855 = cos(t15);
      res__3 = t835 * (m3 * t831 + t833) + t576 * (m3 * t9 * (-0.5000000000e0 * t557 + L3 * t582 - 0.1250000000e0 * t563 - 0.5000000000e0 * t562 - 0.5000000000e0 * t561) + t9 * (0.5000000000e0 * IX2 + 0.5000000000e0 * IX3 - 0.1250000000e0 * t570)) + t855 * (-m3 * t831 - t833) + (-0.2e1 * L3 * theta2__dot * s__dot - 0.1e1 * L4 * theta2__dot * s__dot - 0.2e1 * s * theta2__dot * s__dot) * m3;
      t868 = m6 * t9;
      t869 = t31 * t868;
      t871 = IZ6 * t9;
      t872 = 0.1250000000e0 * t871;
      t873 = 0.3125000000e-1 * t869 - t872;
      t874 = t81 * t873;
      t878 = 0.2500000000e0 * t283 * t43 * t9;
      t879 = 0.2500000000e0 * t49;
      t880 = 0.3125000000e-1 * t31;
      t881 = -t879 - t880;
      t884 = m6 * t9 * t881 + t872 + t878;
      t888 = t9 * t456;
      t891 = -0.5000000000e0 * t868 * t61 + 0.2500000000e0 * t888 * t64;
      t892 = t84 * t891;
      t895 = 0.2500000000e0 * IX5;
      t896 = 0.2500000000e0 * t91;
      t897 = t895 - t896;
      t899 = t40 * t874 + t81 * t884 + t892 - 0.2500000000e0 * t86 * t868 + t9 * t897;
      t902 = -t59 * t873;
      t905 = -t9 * t881;
      t913 = 0.3750000000e0 * t871;
      t914 = 0.9375000000e-1 * t869;
      t923 = -0.5000000000e0 * t9 * m5 * t129 - 0.5000000000e0 * t9 * m6 * t129;
      t925 = t868 * t330;
      t927 = t9 * t618;
      t928 = t927 * t136;
      t930 = 0.5000000000e0 * t925 + 0.5000000000e0 * t928;
      t932 = t868 * t165;
      t934 = t927 * t143;
      t938 = t9 * m5;
      t939 = t938 * t181;
      t941 = t868 * t181;
      t943 = -0.1e1 * t939 - 0.1e1 * t941;
      t945 = t938 * t215;
      t947 = t868 * t215;
      t958 = t9 * t139;
      t965 = -0.1e1 * t938 * t235 - 0.1e1 * t868 * t235;
      t980 = t97 * t899 + t73 * (t40 * t902 + t59 * (m6 * t905 - t872 - t878) - t69 * t891) + t40 * (-t913 + t914) + t133 * t923 + t109 * (t84 * (t43 * t930 - 0.1e1 * t932 - 0.1e1 * t934) + t154 * t943 - 0.1e1 * t945 - 0.1e1 * t947) + t892 + t69 * t105 * (t339 * t9 * t282 - t43 * t930) - 0.5000000000e0 * t958 * t169 + t878 + t154 * t965 + m6 * t9 * (-0.2500000000e0 * t86 + t880 - t879 - 0.5000000000e0 * t244) + t9 * (-t896 + t244 * (-0.2000000000e1 * m4 - 0.5000000000e0 * m5) + t895 + 0.5000000000e0 * IX4 - 0.1250000000e0 * IZ6);
      t983 = -t408 * t121;
      t990 = 0.1250000000e0 * t270;
      t999 = 0.5000000000e0 * m6 * theta4__dot * t148 * t798;
      t1009 = t127 * t408 * (0.5000000000e0 * t102 - 0.1250000000e0 * t100) + 0.5000000000e0 * t295 * t411 - t443 + t448 - t436;
      t1011 = 0.2000000000e1 * t290;
      t1032 = 0.1e1 * t266;
      t1051 = m5 * theta4__dot;
      t1057 = t397 * t103;
      t1058 = t1057 - t519 + t521;
      t1067 = 0.5000000000e0 * t871 - 0.1250000000e0 * t869;
      t1073 = -t69 * t105 * t1067 + t109 * t84 * t1067;
      t1075 = 0.2500000000e0 * t117;
      t1076 = -t1075 + t119;
      t1079 = 0.1250000000e0 * t537 * t32;
      t1084 = t1075 - 0.1e1 * t119;
      t1085 = t397 * t1084;
      t1093 = t283 * t148 * t9;
      t1094 = 0.5000000000e0 * t1093;
      t1095 = t958 * t143;
      t1097 = t958 * t137;
      t1098 = 0.5000000000e0 * t1097;
      t1101 = t9 * t294;
      t1102 = t1101 * t64;
      t1116 = 0.2000000000e1 * t652;
      t1117 = 0.2000000000e1 * t656;
      t1120 = L9 * m6;
      t1126 = -0.2000000000e1 * t186 - 0.2000000000e1 * t184;
      t1148 = t646 * t782;
      t1154 = 0.1e1 * t49;
      t1167 = t709 * t155;
      t1168 = t397 * t42;
      t1169 = t145 * t1168;
      t1170 = theta6__dot * t159;
      t1176 = t397 * t136;
      t1177 = t145 * t1176;
      t1178 = t594 + t592;
      t1186 = 0.2000000000e1 * t145 * t397 * t143;
      t1188 = t537 * m6 * t143;
      t1197 = t397 * theta1__dot + theta5__dot;
      t1218 = t148 * t1197 * t1120 * t138 * theta6__dot * L6 + t43 * (-0.1e1 * t441 * t330 - 0.1e1 * t441 * t155) + 0.2000000000e1 * t441 * t173 - 0.2500000000e0 * t205 * t397 * t31 + m6 * (-0.2500000000e0 * theta6__dot * t270 + 0.2000000000e1 * t432 * t165);
      t1221 = t145 * t397 * t64;
      t1238 = 0.1e1 * t1169;
      t1257 = theta5__dot * t1051;
      t1273 = m6 * t397;
      t1275 = 0.4905000000e1 * t1273 * t647;
      res__4 = t260 * t980 + t97 * (t40 * (t59 * t437 + t81 * t983) + t81 * (t127 * t407 + t408 * (t266 + m6 * theta1__dot * (-0.1e1 * t268 - t990) + t120) + t999) + t59 * t1009 + t408 * (t84 * (t288 - t1011) + 0.5000000000e0 * t296 - 0.1e1 * t298 + theta1__dot * t507) + 0.5000000000e0 * t412 * t309 + t69 * t472) + t73 * (t40 * (t59 * t408 * t121 + t81 * t437) + t81 * t1009 + t59 * (-t127 * t407 + t408 * (-t1032 + m6 * theta1__dot * (t268 + t990) - t120) - t999) + t408 * (0.5000000000e0 * t310 + t69 * (t1011 - 0.1e1 * t288)) + t84 * t472 - 0.5000000000e0 * t412 * t293 + t503 + theta5__dot * (-0.1e1 * theta4__dot * IX5 + t86 * t1051)) + t40 * (t84 * t105 * t1058 + t109 * t69 * t1058 + t983) + t127 * (t389 * t1073 + t109 * t84 * (t397 * t1076 - t1079 + t545) + t69 * t105 * (t1085 - t545 + t1079) + t403 - t406) + t389 * (t327 * t923 + t109 * (t84 * (t1094 - 0.1e1 * t1095 + t1098) + 0.5000000000e0 * t1102 + t138 * t943) + t69 * t105 * (-t1094 + t1095 - t1098) + t148 * t930 + t138 * t965) + t408 * (t109 * (t84 * (t43 * (-t649 + t333 + t331) + t655 - t1116 - t1117) + t69 * t339 * t1120 * t281 + t154 * t1126 + t737 - 0.2000000000e1 * t183 * t215 - 0.2000000000e1 * t145 * t215) + t84 * (t105 * t339 * t1120 * t281 - t1011 + t288) + t69 * (t105 * (t43 * (t649 - 0.1e1 * t333 - 0.1e1 * t331) - t655 + t1116 + t1117) + 0.5000000000e0 * t368) + t266 + t154 * t1148 + t646 * (-L5 * t809 + t806) + m6 * theta1__dot * (-t990 + theta5__dot * (-t1154 - 0.1e1 * t86)) + theta1__dot * theta5__dot * (-0.500000000e0 * IZ6 - t505)) + t109 * (t84 * (t148 * (t1167 + t1169 + m6 * L9 * (t1170 + t602 - t604)) + t43 * t138 * (m6 * L9 * t1178 + t1177) + t138 * (-t1186 - 0.1e1 * t1188)) + t69 * t1218 + t148 * (t1221 + m6 * L9 * (t687 - t691)) + t138 * (t397 * t1126 - t702 - 0.1e1 * t686 * t780)) + t84 * (t105 * t1218 + t763) + t69 * t105 * (t148 * (-0.1e1 * t1167 - t1238 + m6 * L9 * (-0.1e1 * t1170 - t602 + t604)) + t43 * t138 * (-0.1e1 * t1177 - m6 * L9 * t1178) + t138 * (t1186 + t1188)) + t105 * (t154 * (0.2000000000e1 * t1257 * t181 + 0.2000000000e1 * t441 * t181) + 0.2e1 * t1257 * t215 + 0.2e1 * t441 * t215) + t148 * (-0.5000000000e0 * t590 * t618 * t136 - t1275 + m6 * L9 * (-t627 + 0.5000000000e0 * t620)) - 0.1e1 * t401 * t139 * t137 + t138 * t397 * t1148;
      t1292 = m6 * (t420 - 0.3125000000e-1 * t9 * t31) - t395 + t872;
      t1294 = 0.5000000000e0 * t36;
      t1295 = 0.1250000000e0 * t33;
      t1296 = -t1294 + t1295;
      t1297 = t408 * t1296;
      t1298 = t59 * t1297;
      t1313 = t43 * m6 * (-0.2500000000e0 * t9 * t42 + 0.5000000000e0 * t391 * t42) + m6 * (t905 + t391 * (-t243 - 0.6250000000e-1 * t31)) - t872 + t395;
      t1315 = 0.1250000000e0 * t31;
      t1334 = m6 * (-0.2500000000e0 * t9 * t64 + 0.5000000000e0 * t391 * t64);
      t1341 = m6 * (-0.1e1 * t391 * t61 + 0.5000000000e0 * t9 * t61);
      t1359 = m6 * t69;
      t1379 = 0.2000000000e1 * t62;
      t1389 = t43 * t69;
      t1396 = 0.2500000000e0 * t928 + 0.2500000000e0 * t925;
      t1398 = 0.5000000000e0 * t932;
      t1399 = 0.5000000000e0 * t934;
      t1402 = 0.5000000000e0 * t939;
      t1404 = -t1402 - 0.5000000000e0 * t941;
      t1406 = 0.5000000000e0 * t945;
      t1411 = t43 * t109;
      t1430 = 0.6250000000e-1 * t869 - 0.2500000000e0 * t871;
      t1437 = 0.2500000000e0 * t1097;
      t1438 = 0.2500000000e0 * t1093;
      t1439 = 0.5000000000e0 * t1095;
      t1449 = t868 * t109 * t138;
      t1460 = t397 * t320;
      t1465 = theta4__dot * t330;
      t1477 = -0.2000000000e1 * theta4__dot * t165 + 0.2500000000e0 * theta6__dot * t31;
      t1499 = t154 * m6 * (0.5000000000e0 * t391 * t136 + 0.2500000000e0 * t9 * t136) - t1275 + m6 * (-0.1e1 * t401 * t42 + 0.5000000000e0 * t391 * t330 + 0.2500000000e0 * t9 * t330);
      t1505 = t154 * m6 * (-t633 - 0.5000000000e0 * t9 * t143);
      t1507 = 0.9810000000e1 * t1273 * t653;
      t1511 = m6 * (t638 - t641 - 0.5000000000e0 * t9 * t165);
      t1515 = 0.4905000000e1 * m6 * t664;
      t1516 = t233 * t1176;
      t1519 = m6 * t64;
      t1524 = t46 * t149;
      t1536 = L5 * t9;
      t1560 = L9 * theta1__dot;
      t1577 = 0.1e1 * t1516;
      res__5 = t73 * (t389 * t899 + t40 * (t81 * t1292 + t1298) + t81 * t1313 + t59 * t408 * (t47 + t45 * theta4__dot * (-t1154 - t1315) + t1294) + t408 * (t30 * t456 * t293 - 0.2000000000e1 * t46 * t69 * t61) + t84 * (t43 * t1334 + t1341) + m6 * (-0.5000000000e0 * t86 * t391 + 0.2500000000e0 * t86 * t9) - t9 * t897 + t479) + t97 * (t389 * (t40 * t59 * t873 + t59 * t884 + 0.2500000000e0 * t888 * t293 - 0.5000000000e0 * t9 * t1359 * t61) + t40 * (-t81 * t408 * t1296 + t59 * t1292) + t81 * t408 * (-0.1e1 * t47 + t45 * theta4__dot * (t49 + t1315) - t1294) + t59 * t1313 + t408 * (t84 * (t1379 - 0.1e1 * t66) + t88 + theta1__dot * theta4__dot * (-0.1e1 * IX5 + t91)) + t1389 * t1334 + t69 * t1341) + t389 * (t105 * (t84 * (t43 * t1396 - t1398 - t1399) + t154 * t1404 - t1406 - 0.5000000000e0 * t947) + t1411 * t69 * t1396 + t109 * t69 * (-t1398 - t1399)) + t40 * (t105 * (t408 * t104 + t84 * t514) + t408 * (t111 - t1295 + t1294) + t109 * t69 * t514) + t260 * (t127 * (t105 * t84 * t1430 + t109 * t69 * t1430) + t105 * (t84 * (-t1437 - t1438 + t1439) - t138 * t1404 - 0.2500000000e0 * t1102) - 0.2500000000e0 * t1449 * t1389 * t136 + t109 * t69 * (-t1438 + t1439)) + t127 * (t105 * t69 * t397 * t316 + t84 * t109 * t1460 + t1057 - t519 + t521) + t105 * (t408 * (t43 * t69 * (t156 + m6 * theta1__dot * (t1465 - 0.1e1 * t798)) + t69 * (m6 * theta1__dot * t1477 - t175)) + t84 * (t43 * t1499 + t1505 + t1507 + t1511) + t43 * (t69 * (-t1515 + t1516) - 0.1e1 * t1519 * t401) + t69 * (t397 * (-t351 + t1524) + t677) + t154 * (m6 * (-t712 - 0.5000000000e0 * t9 * t181) - t715 - t1402) + t397 * t737 + m6 * (-0.5000000000e0 * L7 * t1536 - t720) - t1406 - t725) + t408 * (t84 * (t43 * (t109 * (-t192 + m6 * theta1__dot * (t798 - 0.1e1 * t1465)) - 0.1e1 * t1519 * t30) + t109 * (-m6 * theta1__dot * t1477 + t175) + t1379) + t43 * (-0.1e1 * theta4__dot * t282 * t1560 + t205 * t109 * t64) + t109 * (t214 + t219 + t217) + t45 * theta4__dot * (t1315 + t49 + t86) + theta1__dot * theta4__dot * t790) + t84 * (t43 * t109 * (t1515 - t1577) + t109 * (t397 * (-0.1e1 * t1524 + t351) - t677) + t1197 * t1120 * L7 * t148 * theta6__dot) + t43 * (t109 * t69 * t1499 - 0.5000000000e0 * t590 * t1359 * t64) + t109 * (t69 * (t1505 + t1507 + t1511) + t397 * t377 + t796) + t295 * t1168 + t801 + c5;
      t1609 = 0.6250000000e-1 * t391;
      t1610 = 0.3125000000e-1 * t9;
      t1611 = t1609 - t1610;
      t1645 = -t1396;
      t1647 = t9 * L7;
      t1660 = L8 * t9;
      t1662 = 0.2500000000e0 * t599;
      t1663 = 0.1250000000e0 * t1660 - t1662;
      t1665 = t148 * L9;
      t1670 = t30 * t294;
      t1673 = 0.2500000000e0 * t688;
      t1675 = -t1673 + 0.1250000000e0 * t1647;
      t1680 = t30 * m6 * t408;
      t1691 = 0.2500000000e0 * t433;
      t1692 = t1460 - 0.1e1 * t435 + t1691;
      t1740 = m6 * t109;
      t1749 = -t589 - 0.2500000000e0 * L6 * t9;
      t1751 = t154 * L9;
      t1754 = -t625 - 0.2500000000e0 * t1536;
      t1764 = t408 * (-0.1e1 * theta4__dot * t805 * t1560 - t192) + t1515 - t1577;
      t1775 = -m6 * t1749;
      t1799 = -t1691 + t442 + 0.2500000000e0 * theta1__dot * theta4__dot * t397 * t32;
      t1809 = t43 * t408;
      res__6 = t127 * (t389 * (t73 * t902 + t97 * t874 - t913 + t914) + t97 * (t81 * (t31 * m6 * t1611 - t395 + t872) + t1298) + t73 * (t81 * t1297 + t59 * (-t31 * m6 * t1611 + t395 - t872)) + t1085 + t31 * m6 * (t538 - t1609 + t1610) - t545 + t395 - t872) + t389 * (t97 * (-0.1250000000e0 * t1101 * t81 * t42 - 0.1250000000e0 * t1101 * t309) + t73 * (0.1250000000e0 * t1101 * t293 + 0.1250000000e0 * t1101 * t59 * t42) + t148 * (t84 * (t109 * t1645 - 0.1250000000e0 * t1120 * t1647) + t69 * t105 * t1396 - 0.1250000000e0 * t42 * t868) - t1437) + t97 * (t81 * t1665 * m6 * t1663 - 0.5000000000e0 * t1670 * t59 * t408 * t42 + t148 * (t84 * L9 * m6 * t1675 - 0.5000000000e0 * t1680 * t293)) + t40 * (t260 * t1073 + t84 * (t109 * t408 * t1076 + t105 * t1692) + t69 * (t105 * t408 * t1084 + t109 * t1692)) + t73 * (-0.5000000000e0 * t1670 * t81 * t408 * t42 - t59 * t1665 * m6 * t1663 + t148 * (-0.5000000000e0 * t1680 * t309 - t69 * L9 * m6 * t1675)) + t260 * (t148 * (0.2500000000e0 * t1449 * t84 * t136 - 0.2500000000e0 * t868 * t138 * t105 * t69 * t136) - 0.2500000000e0 * t868 * t1411 * t84 * t42 + 0.2500000000e0 * t868 * t105 * t43 * t69 * t42 - 0.2500000000e0 * t9 * t1740 * t65 + t43 * t1645) + t148 * (t84 * (t109 * (L9 * m6 * t1754 + t1751 * m6 * t1749 + t1275) + t105 * t1764 - 0.1e1 * t1221 + L9 * m6 * (-t1673 - t687 - 0.3750000000e0 * t1647)) + t69 * (t109 * t1764 + t105 * (-L9 * m6 * t1754 + t1751 * t1775 - t1275) - 0.5000000000e0 * t46 * t453) - t1238 + L9 * m6 * (-t602 - 0.3750000000e0 * t1660 - t1662)) + t84 * (t109 * t408 * (-t1032 + t1075) + t105 * t1799) + t69 * (t109 * t1799 + t105 * t408 * (t266 - t1075)) - 0.1e1 * t116 * t1740 * t1809 * t64 + t432 * m6 * t105 * t65 + 0.4905000000e1 * m6 * t1809 * t647 + t43 * t138 * L9 * t1775 + c6;
      
      % store on output
      res__gfun = zeros(6,1);
      res__gfun(1) = res__1;
      res__gfun(2) = res__2;
      res__gfun(3) = res__3;
      res__gfun(4) = res__4;
      res__gfun(5) = res__5;
      res__gfun(6) = res__6;
    end



    function jac__Hx = Hx( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      c1 = self.c1;
      c2 = self.c2;
      c3 = self.c3;
      c4 = self.c4;
      c5 = self.c5;
      c6 = self.c6;
      prism = self.prism;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = theta1__dot ^ 2;
      t2 = 2 * theta2;
      t3 = cos(t2);
      t7 = theta2__dot ^ 2;
      jac__1_1 = (0.5e0 * t3 * t1 + 0.5e0 * t1 + t7) * m3;
      t9 = cos(theta1);
      t10 = cos(theta2);
      t11 = t10 * t9;
      t12 = 0.981e1 * m3;
      jac__1_2 = (-t12 + lambda1) * t11;
      t14 = 0.1e1 * s;
      t15 = 0.1e1 * L3;
      t17 = -t14 - t15 - 0.5000000000e0 * L4;
      t19 = sin(t2);
      t21 = t19 * m3 * t1 * t17;
      t22 = 0.9810000000e1 * m3;
      t23 = 0.1e1 * lambda1;
      t25 = sin(theta2);
      t27 = sin(theta1);
      t28 = t27 * t25 * (t22 - t23);
      t29 = lambda2 * t10;
      jac__1_3 = t21 + t28 + t29;
      t30 = 0.5e0 * L4;
      jac__1_8 = m3 * (t3 * (s + L3 + t30) + s + L3 + t30) * theta1__dot;
      t36 = 0.2e1 * s;
      t37 = 0.2e1 * L3;
      t38 = t36 + t37 + L4;
      jac__1_9 = t38 * m3 * theta2__dot;
      t43 = m3 * (theta1__dot__dot * t17 - 0.1e1 * s__dot * theta1__dot);
      t45 = 0.2000000000e1 * s;
      jac__2_1 = t3 * t43 + t19 * m3 * theta1__dot * theta2__dot * (t45 + L4 + 0.2000000000e1 * L3) + (-t22 + lambda1) * t11 + t43;
      t54 = cos(phi2);
      t55 = t54 * m6;
      t56 = L8 * t55;
      t58 = L7 * m6;
      t59 = 0.9810000000e1 * t58;
      t60 = L7 * m5;
      t61 = 0.9810000000e1 * t60;
      t62 = t54 * L9;
      t63 = sin(theta6);
      t64 = m6 * t63;
      t65 = t64 * t62;
      t67 = 0.9810000000e1 * t56 + t59 + t61 - 0.4905000000e1 * t65;
      t68 = cos(theta5);
      t70 = L8 * m6;
      t71 = sin(phi2);
      t72 = t71 * t70;
      t74 = t71 * L9;
      t75 = t64 * t74;
      t77 = -0.9810000000e1 * t72 + 0.4905000000e1 * t75;
      t78 = sin(theta5);
      t80 = m5 * L6;
      t82 = m6 * L6;
      t84 = 0.9810000000e1 * t80 + 0.9810000000e1 * t82;
      t85 = cos(phi1);
      t91 = m6 * L5;
      t92 = 0.9810000000e1 * t91;
      t95 = cos(theta4);
      t97 = 0.1e1 * L4;
      t99 = lambda1 * (-t15 - t97 - t14);
      t100 = 0.4905000000e1 * m2;
      t103 = 0.9810000000e1 * s;
      t104 = 0.4905000000e1 * L4;
      t109 = -t84;
      t110 = sin(phi1);
      t112 = cos(theta6);
      t113 = t112 * L9;
      t114 = m6 * t113;
      t117 = sin(theta4);
      jac__2_2 = t27 * (t95 * (t68 * t67 + t78 * t77 + t85 * t84 + 0.9810000000e1 * m5 * L5 + 0.1962000000e2 * L5 * m4 + t92 + L5 * lambda1) + t10 * (t99 + L3 * (t100 + t22) + m3 * (t103 + t104)) + t117 * (t110 * t109 + 0.4905000000e1 * t114)) + t9 * (t78 * t67 - t68 * t77);
      t133 = L3 ^ 2;
      t135 = t45 + L4;
      t138 = s * L4;
      t139 = s ^ 2;
      t140 = L4 ^ 2;
      t141 = 0.2500000000e0 * t140;
      t149 = 0.1e1 * IX2;
      t150 = 0.1e1 * IX3;
      t190 = m3 * (0.9810000000e1 * L3 + t103 + t104) + L3 * (-t23 + t100) - 0.1e1 * L4 * lambda1 - 0.1e1 * lambda1 * s;
      jac__2_3 = t19 * (m3 * ((0.2000000000e1 * s__dot * s + 0.2000000000e1 * s__dot * L3 + s__dot * L4) * theta1__dot + t133 * theta1__dot__dot + L3 * theta1__dot__dot * t135 + theta1__dot__dot * (t138 + t139 + t141)) + 0.2500000000e0 * t133 * m2 * theta1__dot__dot + theta1__dot__dot * (-t149 - t150)) + t3 * (m3 * theta1__dot * (0.2000000000e1 * t133 * theta2__dot + (0.2000000000e1 * L4 + 0.4000000000e1 * s) * theta2__dot * L3 + theta2__dot * (0.2000000000e1 * t138 + 0.2000000000e1 * t139 + 0.5000000000e0 * t140)) + theta1__dot * (0.5000000000e0 * t133 * m2 * theta2__dot + (-0.2000000000e1 * IX2 - 0.2000000000e1 * IX3) * theta2__dot)) + t9 * t25 * t190;
      t193 = theta1__dot__dot * IZ6;
      t194 = 0.2500000000e0 * t193;
      t195 = m6 * theta1__dot__dot;
      t196 = L9 ^ 2;
      t197 = t196 * t195;
      t198 = 0.6250000000e-1 * t197;
      t199 = t194 - t198;
      t200 = 2 * phi2;
      t201 = cos(t200);
      t203 = t196 * m6;
      t204 = theta1__dot * theta5__dot;
      t205 = t204 * t203;
      t206 = 0.1250000000e0 * t205;
      t207 = theta1__dot * IZ6;
      t208 = theta5__dot * t207;
      t209 = 0.5000000000e0 * t208;
      t210 = t206 - t209;
      t211 = sin(t200);
      t213 = t201 * t199 + t211 * t210;
      t214 = 2 * theta6;
      t215 = cos(t214);
      t217 = theta1__dot * theta6__dot;
      t218 = t217 * t203;
      t219 = 0.1250000000e0 * t218;
      t220 = theta6__dot * t207;
      t221 = 0.5000000000e0 * t220;
      t222 = t219 - t221;
      t223 = sin(t214);
      t224 = t223 * t222;
      t225 = theta1__dot__dot * L8;
      t226 = t63 * L9;
      t227 = m6 * t226;
      t228 = t227 * t225;
      t229 = 0.5000000000e0 * t228;
      t231 = L9 * t70;
      t232 = t231 * t112 * t217;
      t233 = 0.5000000000e0 * t232;
      t234 = L8 ^ 2;
      t235 = t234 * theta1__dot__dot;
      t236 = 0.5000000000e0 * t235;
      t237 = t196 * theta1__dot__dot;
      t238 = 0.6250000000e-1 * t237;
      t239 = t236 + t238;
      t240 = m6 * t239;
      t243 = L9 * L8;
      t244 = t63 * t243;
      t245 = theta1__dot * m6;
      t246 = theta5__dot * t245;
      t247 = t246 * t244;
      t248 = theta1__dot * t196;
      t249 = theta5__dot * t248;
      t250 = 0.1250000000e0 * t249;
      t251 = theta1__dot * t234;
      t252 = theta5__dot * t251;
      t255 = m6 * (-t250 - 0.1e1 * t252);
      t256 = t247 + t255 + t209;
      t258 = theta1__dot__dot * L7;
      t259 = t227 * t258;
      t260 = 0.5000000000e0 * t259;
      t261 = t70 * t258;
      t262 = L9 * L7;
      t263 = t112 * t262;
      t264 = theta6__dot * t245;
      t265 = t264 * t263;
      t266 = 0.5000000000e0 * t265;
      t267 = -t260 + t261 - t266;
      t268 = t54 * t267;
      t269 = L7 * L8;
      t270 = t246 * t269;
      t271 = 0.2000000000e1 * t270;
      t272 = t63 * t262;
      t273 = t246 * t272;
      t274 = -t271 + t273;
      t275 = t71 * t274;
      t276 = L7 ^ 2;
      t277 = t276 * t195;
      t278 = 0.5000000000e0 * t277;
      t280 = t276 * m5 * theta1__dot__dot;
      t281 = 0.5000000000e0 * t280;
      t282 = theta1__dot__dot * IX5;
      t283 = 0.5000000000e0 * t282;
      t285 = 2 * theta5;
      t286 = cos(t285);
      t289 = -t199;
      t291 = t201 * t210 + t211 * t289;
      t294 = -t222;
      t295 = t223 * t294;
      t297 = -m6 * t239;
      t300 = t54 * t274;
      t301 = 0.1e1 * t261;
      t302 = t260 - t301 + t266;
      t303 = t71 * t302;
      t304 = m6 * t276;
      t305 = t204 * t304;
      t306 = 0.1e1 * t305;
      t307 = IX5 * theta5__dot;
      t308 = m5 * t276;
      t309 = theta5__dot * t308;
      t310 = 0.1e1 * t309;
      t311 = t307 - t310;
      t314 = sin(t285);
      t316 = 0.1875000000e0 * t197;
      t317 = 0.7500000000e0 * t193;
      t320 = theta1__dot * theta4__dot;
      t321 = t320 * t203;
      t323 = theta4__dot * t207;
      t325 = 0.5000000000e0 * t321 - 0.2000000000e1 * t323;
      t328 = -t325;
      t331 = 0.1500000000e1 * t220;
      t332 = 0.3750000000e0 * t218;
      t335 = L6 ^ 2;
      t336 = theta1__dot__dot * t335;
      t337 = m5 + m6;
      t338 = 2 * phi1;
      t339 = cos(t338);
      t340 = t339 * t337;
      t348 = -0.2000000000e1 * t320 * m6 * t335 - 0.2000000000e1 * t320 * m5 * t335;
      t349 = sin(t338);
      t353 = t85 * L6 + L5;
      t354 = t353 * m6;
      t355 = t63 * t354;
      t357 = L5 * L8;
      t358 = t246 * t357;
      t359 = 0.2000000000e1 * t358;
      t360 = L8 * L6;
      t361 = t85 * t360;
      t362 = t246 * t361;
      t363 = 0.2000000000e1 * t362;
      t364 = t355 * L9 * t204 - t359 - t363;
      t366 = L5 * theta1__dot__dot;
      t367 = m6 * L9;
      t368 = t367 * t366;
      t369 = L9 * L6;
      t370 = t110 * t369;
      t371 = theta4__dot * t245;
      t372 = t371 * t370;
      t373 = 0.2000000000e1 * t372;
      t374 = theta1__dot__dot * L6;
      t375 = t85 * L9;
      t376 = m6 * t375;
      t377 = t376 * t374;
      t380 = t85 * t369;
      t381 = t264 * t380;
      t382 = theta1__dot * L5;
      t383 = theta6__dot * t382;
      t384 = theta1__dot * L8;
      t385 = theta4__dot * t384;
      t386 = 0.2000000000e1 * t385;
      t393 = m6 * t85 * L8;
      t394 = t393 * t374;
      t395 = 0.2000000000e1 * t394;
      t396 = t70 * t366;
      t397 = 0.2000000000e1 * t396;
      t398 = t110 * t360;
      t399 = t371 * t398;
      t400 = 0.4000000000e1 * t399;
      t403 = L6 * L7;
      t404 = theta1__dot * m5;
      t405 = theta5__dot * t404;
      t406 = t405 * t403;
      t408 = t246 * t403;
      t410 = -0.2000000000e1 * t406 - 0.2000000000e1 * t408;
      t411 = t85 * t410;
      t412 = L5 * L7;
      t414 = 0.2000000000e1 * t246 * t412;
      t416 = 0.2000000000e1 * t405 * t412;
      t421 = -0.1e1 * t368 + t373 - 0.1e1 * t377;
      t423 = 0.1e1 * t381;
      t433 = t371 * t263;
      t435 = t60 * t374;
      t437 = t58 * t374;
      t439 = 0.2000000000e1 * t435 + 0.2000000000e1 * t437;
      t441 = theta4__dot * t404;
      t442 = t441 * t403;
      t444 = t371 * t403;
      t446 = -0.4000000000e1 * t442 - 0.4000000000e1 * t444;
      t448 = t60 * t366;
      t450 = t58 * t366;
      t454 = t264 * t370;
      t455 = 0.1e1 * t454;
      t456 = t367 * t225;
      t457 = 0.5000000000e0 * t456;
      t458 = -t455 - t457;
      t460 = t371 * t380;
      t461 = 0.2000000000e1 * t460;
      t462 = t110 * L9;
      t463 = m6 * t462;
      t464 = t463 * t374;
      t466 = 0.2000000000e1 * theta4__dot * t382;
      t467 = theta6__dot * t384;
      t478 = 0.2000000000e1 * t82 * t366 + 0.2000000000e1 * t80 * t366;
      t480 = L5 * L6;
      t485 = -0.4000000000e1 * t441 * t480 - 0.4000000000e1 * t371 * t480;
      t489 = L5 ^ 2;
      t493 = 0.4000000000e1 * m4;
      t494 = m5 + t493;
      t497 = 0.5000000000e0 * IX5;
      t498 = 0.2500000000e0 * IZ6;
      t499 = 0.1e1 * IX4;
      t502 = t286 * (t215 * t213 + t201 * (t224 - t229 - t233 + t240 - t194) + t211 * t256 + t268 + t275 + t278 + t281 - t283) + t314 * (t215 * t291 + t201 * t256 + t211 * (t295 + t229 + t233 + t297 + t194) + t300 + t303 - t306 + theta1__dot * t311) + t215 * (-t316 + t317) + t223 * (t78 * t71 * t325 + t68 * t54 * t328 - t331 + t332) + t340 * t336 + t349 * t348 + t78 * (t54 * t364 + t71 * (t63 * (t368 - t373 + t377) + t112 * (t381 + m6 * L9 * (t383 - t386)) - t395 - t397 + t400) + t411 - t414 - t416) + t68 * (t54 * (t63 * t421 + t112 * (-t423 + m6 * L9 * (-0.1e1 * t383 + t386)) + t395 + t397 - t400) + t71 * t364 + 0.2000000000e1 * t433 + t85 * t439 + t110 * t446 + 0.2000000000e1 * t448 + 0.2000000000e1 * t450) + t268 + t63 * t458 + t112 * (t461 + t464 + m6 * L9 * (t466 - 0.5000000000e0 * t467)) + t85 * t478 + t110 * t485 + m6 * (0.5000000000e0 * t276 * theta1__dot__dot + t489 * theta1__dot__dot + t236 - t238) + t281 + t489 * theta1__dot__dot * t494 + theta1__dot__dot * (-t497 + t498 - t499);
      t503 = 2 * theta4;
      t504 = sin(t503);
      t506 = 0.1250000000e0 * t321;
      t507 = 0.5000000000e0 * t323;
      t508 = -t506 + t507;
      t511 = t371 * t244;
      t512 = 0.1e1 * t511;
      t514 = 0.1250000000e0 * theta4__dot * t248;
      t515 = t234 * t320;
      t521 = 0.2000000000e1 * t371 * t269;
      t522 = t371 * t272;
      t525 = t54 * (t521 - 0.1e1 * t522);
      t526 = t304 * t320;
      t527 = 0.1e1 * IX5;
      t528 = t308 - t527;
      t530 = theta4__dot * theta1__dot * t528;
      t533 = -t508;
      t538 = m6 * (-t514 - 0.1e1 * t515);
      t541 = -t521 + t522;
      t542 = t71 * t541;
      t547 = -0.5000000000e0 * t218 + 0.2000000000e1 * t220;
      t550 = -t547;
      t553 = 0.3750000000e0 * t321;
      t554 = 0.1500000000e1 * t323;
      t557 = 0.2500000000e0 * t205;
      t558 = -t557 + t208;
      t560 = 0.2500000000e0 * t197;
      t561 = t193 - t560;
      t566 = -0.1e1 * t193 + t560;
      t575 = t349 * t337;
      t577 = t63 * t369;
      t578 = m6 * t110;
      t579 = t204 * t578;
      t580 = t579 * t577;
      t581 = t112 * t243;
      t582 = t246 * t581;
      t583 = t246 * t398;
      t584 = 0.2000000000e1 * t583;
      t585 = t580 + t582 - t584;
      t593 = theta1__dot * L6;
      t599 = t371 * t357;
      t600 = 0.4000000000e1 * t599;
      t602 = m6 * t110 * L8;
      t603 = t602 * t374;
      t604 = 0.2000000000e1 * t603;
      t605 = t371 * t361;
      t606 = 0.4000000000e1 * t605;
      t609 = t246 * t263;
      t625 = t264 * t272;
      t626 = t114 * t258;
      t631 = t371 * t412;
      t633 = t441 * t412;
      t657 = 0.5000000000e0 * IZ6;
      t662 = t286 * (t215 * t201 * t508 + t201 * (-t512 + m6 * (t514 + t515) - t507) + t525 + t526 + t530) + t314 * (t215 * t211 * t533 + t211 * (t511 + t538 + t507) + t542) + t215 * (t68 * t54 * t550 + t78 * t71 * t547 - t553 + t554) + t223 * (t78 * (t54 * t558 + t71 * t561) + t68 * (t54 * t566 + t71 * t558)) - t339 * t348 + t575 * t336 + t78 * (t54 * t585 + t71 * (t63 * (t461 + t464 + m6 * L9 * (t466 - 0.1e1 * t467)) + t112 * (t110 * theta6__dot * t593 + t225) * t367 - t600 - t604 - t606) + t609 + t110 * t410) + t68 * (t54 * (t63 * (-t461 - 0.1e1 * t464 + m6 * L9 * (-t466 + t467)) + t112 * (-0.1e1 * t456 - t455) + t600 + t604 + t606) + t71 * t585 + t625 - 0.1e1 * t626 - t85 * t446 + t110 * t439 + 0.4000000000e1 * t631 + 0.4000000000e1 * t633) + t525 + t63 * (t381 + m6 * L9 * (t383 - 0.1e1 * t385)) + t112 * t421 - t85 * t485 + t110 * t478 + m6 * (-t514 + theta4__dot * theta1__dot * (t276 + 0.2000000000e1 * t489 + t234)) + theta4__dot * theta1__dot * (t308 + t489 * (0.8000000000e1 * m4 + 0.2000000000e1 * m5) + t657 - t527 - 0.2000000000e1 * IX4);
      t663 = cos(t503);
      t665 = IZ6 * theta5__dot;
      t666 = theta4__dot * t665;
      t667 = 0.5000000000e0 * t666;
      t668 = theta4__dot * theta5__dot;
      t669 = t203 * t668;
      t670 = 0.1250000000e0 * t669;
      t671 = -t667 + t670;
      t674 = t196 * theta4__dot__dot;
      t675 = m6 * t674;
      t677 = theta4__dot__dot * IZ6;
      t678 = 0.2500000000e0 * t677;
      t681 = theta4__dot ^ 2;
      t682 = t681 * t203;
      t684 = t681 * IZ6;
      t685 = 0.2500000000e0 * t684;
      t688 = t95 * (0.6250000000e-1 * t675 - t678) + t117 * (-0.6250000000e-1 * t682 + t685);
      t692 = theta4__dot * m6;
      t693 = theta5__dot * t692;
      t694 = t693 * t244;
      t695 = t234 * t668;
      t697 = t196 * t668;
      t698 = 0.1250000000e0 * t697;
      t704 = IZ6 * theta4__dot;
      t705 = theta6__dot * t704;
      t707 = theta4__dot * theta6__dot;
      t708 = t707 * t203;
      t713 = theta4__dot__dot * L8;
      t714 = t227 * t713;
      t716 = theta6__dot * t243;
      t717 = theta4__dot * t112;
      t718 = m6 * t717;
      t719 = t718 * t716;
      t721 = t234 * theta4__dot__dot;
      t731 = t681 * t196;
      t733 = t681 * t234;
      t739 = t223 * t95 * (0.5000000000e0 * t705 - 0.1250000000e0 * t708) + t95 * (0.5000000000e0 * t714 + 0.5000000000e0 * t719 + m6 * (-0.5000000000e0 * t721 - 0.6250000000e-1 * t674) + t678) + t117 * (-0.5000000000e0 * t681 * t226 * t70 + m6 * (0.6250000000e-1 * t731 + 0.5000000000e0 * t733) - t685);
      t741 = t693 * t269;
      t742 = 0.2000000000e1 * t741;
      t743 = t693 * t272;
      t746 = theta4__dot__dot * L7;
      t747 = t70 * t746;
      t749 = t227 * t746;
      t751 = theta6__dot * t692;
      t752 = t751 * t263;
      t754 = -0.1e1 * t747 + 0.5000000000e0 * t749 + 0.5000000000e0 * t752;
      t757 = t692 * theta5__dot * t276;
      t767 = t681 * m6 * t269 - 0.5000000000e0 * t681 * t64 * t262;
      t779 = 0.1e1 * t694;
      t787 = -0.1e1 * t743 + t742;
      t789 = theta4__dot__dot * IX5;
      t791 = t276 * theta4__dot__dot;
      t792 = m6 * t791;
      t794 = m5 * t791;
      t799 = t681 * t304;
      t801 = 0.5000000000e0 * t308;
      t802 = -t497 + t801;
      t808 = theta6__dot * t665;
      t809 = theta5__dot * theta6__dot;
      t810 = t809 * t203;
      t811 = 0.2500000000e0 * t810;
      t812 = t808 - t811;
      t815 = 0.1e1 * t808;
      t821 = 0.1e1 * t705;
      t822 = 0.2500000000e0 * t708;
      t823 = -t821 + t822;
      t825 = t78 * t117;
      t827 = t71 * t823;
      t829 = t196 * theta5__dot__dot;
      t830 = m6 * t829;
      t831 = 0.1250000000e0 * t830;
      t832 = theta5__dot__dot * IZ6;
      t833 = 0.5000000000e0 * t832;
      t838 = theta5__dot ^ 2;
      t840 = 0.1250000000e0 * t681;
      t841 = -0.1250000000e0 * t838 + t840;
      t844 = t838 * IZ6;
      t845 = 0.5000000000e0 * t844;
      t846 = 0.5000000000e0 * t684;
      t847 = m6 * t196 * t841 + t845 - t846;
      t849 = -t831 + t833;
      t860 = 0.1250000000e0 * t675;
      t861 = 0.5000000000e0 * t677;
      t862 = t860 - t861;
      t865 = t71 * t862;
      t871 = theta4__dot__dot * L6;
      t872 = t376 * t871;
      t873 = 0.5000000000e0 * t872;
      t874 = t681 * L6;
      t875 = 0.5000000000e0 * t874;
      t876 = theta6__dot ^ 2;
      t877 = 0.5000000000e0 * t876;
      t878 = 0.5000000000e0 * t838;
      t882 = L9 * (-t875 + L6 * (t877 + t878));
      t884 = theta4__dot__dot * L5;
      t887 = 0.5000000000e0 * theta6__dot__dot * L8;
      t888 = 0.5000000000e0 * t884 - t887;
      t890 = m6 * L9 * t888;
      t893 = theta6__dot__dot * L6;
      t895 = 0.5000000000e0 * t463 * t893;
      t896 = t681 * L8;
      t897 = 0.5000000000e0 * t896;
      t898 = t878 - t877;
      t905 = t393 * t871;
      t906 = 0.1e1 * t905;
      t907 = t681 * t360;
      t908 = t838 * t360;
      t911 = m6 * (t907 - 0.1e1 * t908);
      t912 = t110 * t911;
      t913 = L8 * t884;
      t916 = 0.2500000000e0 * t196 * theta6__dot__dot;
      t918 = m6 * (-0.1e1 * t913 + t916);
      t919 = t63 * (t578 * t882 + t873 + t890) + t112 * (-t895 + m6 * L9 * (L8 * t898 - t897)) - t906 + t912 + t918;
      t921 = L6 * theta5__dot__dot;
      t922 = L9 * t921;
      t923 = t110 * t63;
      t926 = 0.5000000000e0 * m6 * t923 * t922;
      t927 = theta5__dot__dot * L8;
      t929 = 0.5000000000e0 * t367 * t927;
      t930 = theta5__dot * m6;
      t931 = theta6__dot * t930;
      t932 = t931 * t370;
      t933 = t929 + t932;
      t935 = t602 * t921;
      t937 = t926 + t112 * t933 - 0.1e1 * t935 - t811;
      t939 = theta6__dot__dot * L7;
      t941 = 0.5000000000e0 * t227 * t939;
      t942 = t681 * L7;
      t943 = 0.5000000000e0 * t942;
      t947 = t112 * m6;
      t949 = t60 * t871;
      t951 = t58 * t871;
      t953 = -0.1e1 * t949 - 0.1e1 * t951;
      t954 = t85 * t953;
      t955 = t681 * t403;
      t956 = t838 * t403;
      t960 = t681 * m5;
      t961 = t960 * t403;
      t962 = t838 * m5;
      t963 = t962 * t403;
      t965 = m6 * (t955 - 0.1e1 * t956) + t961 - 0.1e1 * t963;
      t966 = t110 * t965;
      t967 = t60 * t884;
      t968 = 0.1e1 * t967;
      t969 = t58 * t884;
      t970 = 0.1e1 * t969;
      t973 = 0.1e1 * t932;
      t974 = -t929 - t973;
      t979 = theta5__dot__dot * L7;
      t981 = 0.5000000000e0 * t114 * t979;
      t982 = t110 * L6;
      t988 = t71 * t262;
      t992 = t9 * L9;
      t995 = t9 * t84;
      t997 = t276 + t234;
      t1001 = 0.5000000000e0 * t665;
      t1006 = t85 * m6;
      t1008 = t463 * t871;
      t1009 = 0.5000000000e0 * t1008;
      t1010 = t681 * L5;
      t1011 = 0.5000000000e0 * t1010;
      t1013 = 0.5000000000e0 * t838 * L5;
      t1015 = 0.5000000000e0 * t876 * L5;
      t1016 = L8 * theta4__dot;
      t1017 = theta6__dot * t1016;
      t1020 = m6 * L9 * (-t1011 + t1013 + t1015 + t1017);
      t1024 = 0.5000000000e0 * t376 * t893;
      t1025 = 0.5000000000e0 * t713;
      t1027 = 0.5000000000e0 * theta6__dot__dot * L5;
      t1028 = -t1025 - t1027;
      t1029 = L9 * t1028;
      t1031 = m6 * t1029 - t1024;
      t1034 = t602 * t871;
      t1035 = t681 * t357;
      t1036 = t838 * t357;
      t1038 = theta4__dot * t196;
      t1040 = 0.2500000000e0 * theta6__dot * t1038;
      t1042 = m6 * (t1035 - 0.1e1 * t1036 - t1040);
      t1043 = t63 * (t1006 * t882 - t1009 + t1020) + t112 * t1031 + t85 * t911 + t1034 + t1042;
      t1046 = 0.4905000000e1 * m6 * t992;
      t1047 = theta5__dot__dot * L5;
      t1052 = t1046 + 0.5000000000e0 * t367 * t1047 + 0.5000000000e0 * t376 * t921;
      t1055 = t112 * t354;
      t1057 = t70 * t1047;
      t1059 = t393 * t921;
      t1063 = 0.9810000000e1 * m6 * t9 * L8;
      t1066 = t751 * t272;
      t1068 = 0.5000000000e0 * t114 * t746;
      t1070 = t337 * L7;
      t1071 = t110 * t1070;
      t1073 = t838 * t412;
      t1075 = t681 * t412;
      t1078 = t962 * t412;
      t1080 = t960 * t412;
      t1084 = -t1052;
      t1088 = L5 * L9;
      t1091 = -0.1e1 * t931 * t380 - 0.1e1 * t931 * t1088;
      t1096 = t337 * theta5__dot__dot;
      t1098 = t85 * t1096 * t403;
      t1099 = t59 + t61;
      t1100 = t9 * t1099;
      t1101 = t1096 * t412;
      t1122 = m6 * theta5__dot * t112;
      t1130 = t92 + (lambda1 + 0.1962000000e2 * m4 + 0.9810000000e1 * m5) * L5;
      jac__2_4 = t504 * t502 + t663 * t662 + t286 * (t215 * (t201 * t95 * t671 + t211 * t688) + t201 * t95 * (t694 + m6 * (-0.1e1 * t695 - t698) + t667) + t211 * t739 + t95 * (t54 * (-t742 + t743) + t71 * t754 - 0.1e1 * t757 + theta4__dot * t311) + t117 * t71 * t767) + t314 * (t215 * (-t211 * t95 * t671 + t201 * t688) + t201 * t739 + t211 * t95 * (-t779 + m6 * (t695 + t698) - t667) + t95 * (t54 * t754 + t71 * t787 + 0.5000000000e0 * t789 - 0.5000000000e0 * t792 - 0.5000000000e0 * t794) + t117 * (t54 * t767 + 0.5000000000e0 * t799 + t681 * t802)) + t215 * (t95 * (t78 * t71 * t812 + t68 * t54 * (-t815 + t811) + t667 - t670) + t825 * t54 * t823 + t117 * (t68 * t827 - t831 + t833)) + t223 * (t95 * (t78 * (t54 * t847 + t71 * t849) + t68 * (-t54 * t849 + t71 * t847)) + t825 * t54 * t862 + t117 * (t68 * t865 + t811 - t815)) + t95 * (t78 * (t54 * t919 + t71 * t937 - t941 + t947 * L9 * (L7 * t898 - t943) + t954 + t966 - t968 - t970) + t68 * (t54 * (t112 * t974 + t811 - t926 + t935) + t71 * t919 - t981 + t337 * t979 * t982) + t54 * t787 - 0.5000000000e0 * t707 * t947 * t988 - t779 - 0.4905000000e1 * t947 * t992 + t110 * t995 + m6 * (t997 * t668 + t698) + theta4__dot * (t1001 + t309)) + t78 * t117 * (t54 * t1043 + t71 * (t63 * t1052 + t1055 * L9 * t809 - 0.1e1 * t1057 - 0.1e1 * t1059 - t1063) + t1066 - t1068 + t85 * t965 + t1071 * t871 + m6 * (-0.1e1 * t1073 + t1075) - 0.1e1 * t1078 + t1080) + t117 * (t68 * (t54 * (t63 * t1084 + t112 * t1091 + t1057 + t1059 + t1063) + t71 * t1043 + t1098 + t1100 + t1101) + t54 * (-0.1e1 * t931 * t263 - 0.1e1 * t227 * t979 + 0.2000000000e1 * t70 * t979) + t71 * (-0.5000000000e0 * t114 * t939 + 0.5000000000e0 * t876 * t64 * t262) - 0.1e1 * t227 * t927 - 0.1e1 * t1122 * t716 + t85 * t995 + t9 * t1130 + m6 * (0.1250000000e0 * t829 + t997 * theta5__dot__dot) + t833 + m5 * t276 * theta5__dot__dot);
      t1140 = -t210;
      t1142 = 0.1e1 * t247;
      t1144 = m6 * (t250 + t252);
      t1148 = t215 * t199 - t194 + t224 - t229 - t233 + t240;
      t1151 = -0.1e1 * t273 + t271;
      t1159 = t215 * t533 + t507 + t511 + t538;
      t1165 = 0.1250000000e0 * t682 - t846;
      t1169 = t705 - t822;
      t1170 = t117 * t1169;
      t1173 = 0.1250000000e0 * t674;
      t1181 = t63 * (t95 * t681 + t204) * m6;
      t1183 = 0.1250000000e0 * t731;
      t1184 = 0.1e1 * t733;
      t1191 = 0.2500000000e0 * t669;
      t1194 = t117 * (-t1191 + t666) - t194 + t198;
      t1196 = 0.2000000000e1 * t694;
      t1199 = 0.2500000000e0 * t697 + 0.2000000000e1 * t695;
      t1200 = m6 * t1199;
      t1201 = 0.1e1 * t666;
      t1204 = t215 * t1194 + t295 + t117 * (-t1196 + t1200 - t1201) + t229 + t233 + t297 + t194;
      t1206 = 0.2000000000e1 * t747;
      t1210 = m6 * t95;
      t1211 = t681 * t1210;
      t1213 = 0.2000000000e1 * t1211 * t269;
      t1218 = -0.2000000000e1 * t743 + 0.4000000000e1 * t741;
      t1220 = t117 * t1218 + t260 + t266 - t301;
      t1227 = 0.1e1 * t308;
      t1228 = -t1227 + IX5;
      t1229 = t681 * t1228;
      t1232 = theta5__dot * t1228;
      t1233 = theta1__dot * t1232;
      t1245 = theta4__dot * t1228;
      t1250 = -t862;
      t1254 = -t95 * t1165 + t117 * t1250 - t206 + t209;
      t1258 = 0.1e1 * t714;
      t1259 = 0.1e1 * t719;
      t1261 = m6 * (t721 + t1173);
      t1264 = t1211 * t243;
      t1266 = t246 * t243;
      t1279 = t1206 - 0.1e1 * t749 - 0.1e1 * t752;
      t1281 = t1211 * t262;
      t1283 = t246 * t262;
      t1289 = 0.2000000000e1 * t757;
      t1292 = -0.2000000000e1 * IX5 + 0.2000000000e1 * t308;
      t1299 = 0.2500000000e0 * t321;
      t1300 = -t1299 + t323;
      t1303 = t54 * t1300;
      t1307 = t246 * t1088;
      t1308 = 0.5000000000e0 * t1307;
      t1309 = t246 * t380;
      t1310 = 0.5000000000e0 * t1309;
      t1311 = -t1308 - t1310;
      t1317 = 0.5000000000e0 * t377;
      t1318 = 0.5000000000e0 * t368;
      t1319 = t372 - t1317 - t1318;
      t1320 = t63 * t1319;
      t1321 = t112 * t369;
      t1322 = t264 * t1321;
      t1324 = t70 * t374;
      t1326 = t85 * (-0.5000000000e0 * t1322 + t1324);
      t1327 = L5 * theta6__dot;
      t1328 = 0.5000000000e0 * t1327;
      t1329 = -t1328 + t1016;
      t1330 = theta1__dot * t1329;
      t1332 = 0.2000000000e1 * t399;
      t1333 = t114 * t1330 + t1320 + t1326 - t1332 + t396;
      t1342 = 0.1e1 * t362;
      t1343 = 0.1e1 * t358;
      t1346 = t337 * theta1__dot__dot;
      t1348 = t85 * t1346 * t403;
      t1351 = -0.2000000000e1 * t444 - 0.2000000000e1 * t442;
      t1352 = t110 * t1351;
      t1358 = 0.2500000000e0 * t218;
      t1359 = -t1358 + t220;
      t1360 = t71 * t1359;
      t1367 = 0.5000000000e0 * t193;
      t1369 = t1367 - 0.1250000000e0 * t197;
      t1370 = t71 * t1369;
      t1379 = 0.5000000000e0 * t582;
      t1381 = 0.5000000000e0 * t580;
      t1384 = 0.5000000000e0 * t464;
      t1385 = L5 * theta4__dot;
      t1386 = L8 * theta6__dot;
      t1387 = 0.5000000000e0 * t1386;
      t1388 = t1385 - t1387;
      t1391 = t367 * theta1__dot * t1388 + t1384 + t460;
      t1393 = 0.2000000000e1 * t605;
      t1394 = 0.5000000000e0 * t454;
      t1395 = t457 + t1394;
      t1398 = 0.1e1 * t603;
      t1399 = t63 * t1391 - t1393 + t112 * t1395 - 0.2000000000e1 * t599 - t1398;
      t1412 = t85 * t1351;
      t1413 = 0.5000000000e0 * t626;
      t1416 = -0.1e1 * t437 - 0.1e1 * t435;
      t1417 = t110 * t1416;
      t1418 = 0.2000000000e1 * t633;
      t1419 = 0.2000000000e1 * t631;
      t1426 = t117 * t812;
      t1441 = t117 * t849;
      t1459 = 0.5000000000e0 * t876 * L6;
      t1460 = t838 * L6;
      t1461 = 0.5000000000e0 * t1460;
      t1462 = t1459 - t875 + t1461;
      t1463 = L9 * t1462;
      t1465 = t578 * t1463 + t873 + t890;
      t1468 = 0.5000000000e0 * t838 * L8;
      t1470 = -0.5000000000e0 * t681 - t877;
      t1480 = -L9 * t1462;
      t1482 = 0.1e1 * t1017;
      t1487 = t95 * (t1006 * t1480 + t1009 + m6 * L9 * (-t1482 + t1011 - t1013 - t1015));
      t1488 = t27 * L9;
      t1490 = 0.4905000000e1 * m6 * t1488;
      t1491 = t1487 - t1490 - t1310 - t1308;
      t1494 = 0.5000000000e0 * t114 * t893;
      t1495 = 0.1e1 * t907;
      t1497 = m6 * (t908 - t1495);
      t1503 = 0.1e1 * t1034;
      t1504 = 0.1e1 * t1035;
      t1509 = t27 * L8;
      t1511 = 0.9810000000e1 * m6 * t1509;
      t1515 = t95 * t1084;
      t1518 = t70 * t921;
      t1523 = t112 * t1088;
      t1528 = t264 * t1523;
      t1530 = t117 * t937 + t63 * (t1515 - t1317 - t1318) + t95 * (t85 * (t1518 - 0.1e1 * t931 * t1321) + t1057 - 0.1e1 * t931 * t1523 + t1063) + t1326 + t396 - 0.5000000000e0 * t1528;
      t1533 = 0.5000000000e0 * t838 * L7;
      t1535 = 0.5000000000e0 * t876 * L7;
      t1536 = t1533 - t1535 - t943;
      t1541 = t95 * t262;
      t1542 = t707 * t64;
      t1545 = 0.1e1 * t955;
      t1548 = 0.1e1 * t961;
      t1551 = t110 * t953;
      t1552 = 0.1e1 * t1075;
      t1555 = 0.1e1 * t1080;
      t1561 = t27 * t1099;
      t1562 = L7 * theta5__dot;
      t1599 = 0.1e1 * t60 * t921;
      t1601 = 0.1e1 * t58 * t921;
      t1608 = t353 * t337;
      jac__2_5 = t286 * (t663 * (t201 * (t215 * t1140 - t1142 + t1144 - t209) + t211 * t1148 + t54 * t1151 + t71 * t267 + t305 + theta1__dot * theta5__dot * t528) + t504 * (t211 * t1159 + t542) + t201 * (t215 * (t95 * t1165 + t117 * t862 + t206 - t209) + t223 * t1170 + t117 * (t714 + t719 + m6 * (-0.1e1 * t721 - t1173) + t861) + t1181 * t243 + t95 * (m6 * (-t1183 - t1184) + t846) + t255 + t209) + t211 * t1204 + t54 * (t117 * (t752 + t749 - t1206) + t1181 * t262 - t1213 - t271) + t71 * t1220 + t117 * (-0.1e1 * t792 - 0.1e1 * t794 + t789) + t95 * (-0.1e1 * t799 + t1229) - t306 + t1233) + t314 * (t663 * (t201 * t1148 + t211 * (t215 * t210 + t209 + t247 + t255) + t268 + t275 - t283 + t278 + t281) + t504 * (t201 * t1159 + t54 * t541 - 0.1e1 * t526 + theta1__dot * t1245) + t201 * t1204 + t211 * (t215 * t1254 + t223 * t117 * t823 + t117 * (-t1258 - t1259 + t1261 - t861) + t63 * (-0.1e1 * t1264 - 0.1e1 * t1266) + t95 * (m6 * (t1183 + t733) - t846) + t1144 - t209) + t54 * t1220 + t71 * (t117 * t1279 + t63 * (-0.1e1 * t1281 - 0.1e1 * t1283) + t1213 + t271) + t117 * (theta5__dot * theta4__dot * t1292 + t1289) - t278 - t281 + t283) + t663 * (t223 * (t68 * t71 * t1300 + t78 * t1303) + t68 * (t54 * (t353 * t204 * t70 + t63 * t1311) + t71 * t1333 + t353 * t1070 * t204) + t78 * (t54 * t1333 + t71 * (-t63 * t1311 - t1342 - t1343) + t1348 + t433 + t1352 + t1346 * t412)) + t504 * (t215 * (t78 * t54 * t1359 + t68 * t1360) + t223 * (t68 * (t54 * t1140 + t1370) + t78 * (t54 * t1369 + t71 * t210)) + t68 * (t54 * (t1379 - 0.1e1 * t583 + t1381) + t71 * t1399 + 0.5000000000e0 * t609 + t110 * (-0.1e1 * t406 - 0.1e1 * t408)) + t78 * (t54 * t1399 + t71 * (-t1379 + t583 - t1381) - 0.5000000000e0 * t625 + t1412 + t1413 + t1417 - t1418 - t1419)) + t215 * (t68 * (t54 * t95 * t1169 + t71 * t1426) + t78 * (t71 * t95 * t823 + t54 * t1426)) + t223 * (t68 * (t54 * (t117 * t847 + t95 * t1250) + t71 * t1441) + t78 * (t54 * t1441 + t71 * (t117 * (-m6 * t196 * t841 - t845 + t846) + t95 * t862))) + t68 * (t54 * (t117 * (t63 * t1465 - t906 + t112 * (-t895 + m6 * L9 * (L8 * t1470 + t1468)) + t912 + t918) + t63 * t1491 + t95 * (t85 * (t1494 + t1497) - t947 * L9 * t1028 - t1503 + m6 * (t1040 - t1504 + t1036)) + t1511 + t358 + t362) + t71 * t1530 + t117 * (t947 * L9 * t1536 - t941 + t954 + t966 - t968 - t970) - 0.1e1 * t1542 * t1541 + t95 * (t85 * (m6 * (t956 - t1545) - t1548 + t963) + t1068 + t1551 + m6 * (t1073 - t1552) + t1078 - t1555) + t85 * t1070 * L6 * t204 + t1561 + t337 * t1562 * t382) + t78 * (t54 * t1530 + t71 * (t117 * (t63 * (-m6 * L9 * t888 + t578 * t1480 - t873) + t905 + t112 * (t895 + m6 * L9 * (-L8 * t1470 - t1468)) + t110 * t1497 + m6 * (-t916 + t913)) + t63 * (t95 * (t1006 * t1463 - t1009 + t1020) + t1490 + t1310 + t1308) + t95 * (t85 * (-t1494 + t911) + t947 * t1029 + t1034 + t1042) - t1511 - t1343 - t1342) + t117 * (t981 + t110 * (-t1599 - t1601)) + t95 * (t1098 + t1100 + t1101) + t1608 * t258);
      t1627 = t231 * theta1__dot__dot * t112;
      t1631 = 0.2500000000e0 * t231 * t63 * t217;
      t1632 = 0.2500000000e0 * t1627 - t1631;
      t1634 = t211 * t243;
      t1635 = t204 * t947;
      t1645 = t54 * t262;
      t1646 = t217 * t64;
      t1648 = 0.2500000000e0 * t1646 * t1645;
      t1651 = t201 * t243;
      t1664 = 0.2500000000e0 * t1646 * t988;
      t1669 = t1318 - 0.1e1 * t372 + t1317;
      t1671 = t367 * t258;
      t1672 = 0.2500000000e0 * t1671;
      t1679 = 0.2500000000e0 * t456;
      t1682 = 0.5000000000e0 * t381;
      t1690 = 0.1e1 * t1016;
      t1691 = t1328 - t1690;
      t1696 = t71 * t78;
      t1698 = m6 * t68;
      t1701 = 0.2500000000e0 * t1386;
      t1725 = t117 * (t1191 - t1201);
      t1732 = 0.5000000000e0 * t708 - 0.2000000000e1 * t705;
      t1733 = t95 * t1732;
      t1735 = 0.5000000000e0 * t810;
      t1736 = 0.2000000000e1 * t808;
      t1737 = -t1735 + t1736;
      t1748 = 0.2500000000e0 * t830;
      t1749 = -t1748 + t832;
      t1763 = t320 * t947;
      t1776 = t78 * t369;
      t1779 = 0.1e1 * t460;
      t1780 = 0.1e1 * t1385;
      t1781 = -t1780 + t1387;
      t1786 = m6 * t262;
      t1792 = t204 * t1698;
      t1800 = 0.5000000000e0 * t1016;
      t1801 = -t1800 + t1328;
      t1806 = m6 * t78;
      t1807 = t204 * t1806;
      t1823 = L9 * t258;
      t1824 = t68 * t63;
      t1825 = m6 * t1824;
      t1828 = t63 * t1669;
      t1839 = 0.2500000000e0 * t838;
      t1845 = t196 * m6 * (-t1839 + 0.2500000000e0 * t681) + t844 - 0.1e1 * t684;
      t1848 = -0.2500000000e0 * t675 + t677;
      t1849 = t95 * t1848;
      t1868 = t117 * t243;
      t1869 = t693 * t1868;
      t1875 = m6 * t117 * L9;
      t1884 = t112 * (0.5000000000e0 * t1875 * t713 + 0.5000000000e0 * t1264 + 0.5000000000e0 * t1266) - 0.5000000000e0 * t1542 * t1868;
      t1886 = t117 * t262;
      t1887 = t693 * t1886;
      t1894 = 0.5000000000e0 * t1283 + 0.5000000000e0 * t1875 * t746 + 0.5000000000e0 * t1281;
      t1898 = t117 * t71;
      t1899 = t1898 * t262;
      t1905 = 0.1e1 * t1869;
      t1917 = t117 * t54 * t262;
      t1925 = t68 * t110;
      t1930 = 0.1e1 * t1786 * t668;
      t1937 = m6 * t95 * L9;
      t1967 = 0.5000000000e0 * t876 * L8;
      t1972 = t63 * (t895 + L9 * m6 * (-t1468 + t897 + t1967));
      t1974 = t95 * t1031;
      t1979 = t117 * t68;
      t1982 = L9 * t91;
      t1983 = t1982 * t217;
      t1984 = 0.5000000000e0 * t1983;
      t1999 = t353 * theta6__dot;
      t2013 = m6 * t63 * t95;
      t2022 = L9 * t746;
      t2034 = t95 * t243;
      t2037 = theta1__dot * L9;
      jac__2_6 = t663 * (t223 * (t286 * t213 + t314 * t291 - t316 + t317) + t215 * (t286 * t201 * t294 + t314 * t211 * t222 + t54 * t68 * t325 + t71 * t78 * t328 + t331 - t332) + t286 * (t201 * t1632 - 0.5000000000e0 * t1635 * t1634 + t112 * (0.2500000000e0 * m6 * t62 * t258 - 0.5000000000e0 * t246 * t988) - t1648) + t314 * (-0.5000000000e0 * t1635 * t1651 - t211 * t1632 + t112 * (-0.2500000000e0 * m6 * t74 * t258 - 0.5000000000e0 * t246 * t1645) + t1664) + t112 * (t54 * (t78 * t1311 + t68 * t1669 + t1672) + t71 * (t68 * t1311 + t78 * t1319) + t1394 + t1679) + t54 * (t68 * t63 * (t367 * t1330 - t1682) - 0.2500000000e0 * t625) + t1696 * t63 * (t367 * theta1__dot * t1691 + t1682) + t320 * t1698 * t272 + t63 * (t460 + t1384 + t367 * theta1__dot * (-t1701 + t1385))) + t223 * (t504 * (t286 * t201 * t533 + t314 * t211 * t508 + t54 * t68 * t547 + t71 * t78 * t550 + t553 - t554) + t286 * (t201 * t1194 + t211 * t1254) + t314 * (t201 * t1254 + t211 * (t1725 + t194 - t198)) + t54 * (t117 * t68 * t1737 + t78 * t1733) + t71 * (-t78 * t117 * t1737 + t68 * t1733) + t1725 + t95 * t1749 + t194 - t198) + t504 * (t215 * (t54 * (t78 * t558 + t68 * t566) + t71 * (t68 * t558 + t78 * t561)) + t286 * (-0.5000000000e0 * t1763 * t1651 - 0.5000000000e0 * t1763 * t1645) + t314 * (0.5000000000e0 * t1763 * t1634 + 0.5000000000e0 * t1763 * t988) + t112 * (t54 * (0.5000000000e0 * t579 * t1776 + t68 * (t367 * theta1__dot * t1781 - t1384 - t1779) - 0.5000000000e0 * t1786 * t320) + t71 * (t78 * t1391 + 0.5000000000e0 * t1792 * t370) + 0.5000000000e0 * t264 * t68 * t262 + t1682 + t367 * theta1__dot * t1801) + t54 * (-0.5000000000e0 * t1807 * t244 + t68 * t63 * t1395) + t71 * (-t78 * t63 * t1395 - 0.5000000000e0 * t1792 * t244) - 0.5000000000e0 * t1807 * t272 + 0.5000000000e0 * t1825 * t1823 + t1828) + t215 * (t286 * (t211 * t1170 + t201 * t222) + t314 * (t201 * t1170 + t211 * t294) + t54 * (t78 * (t117 * t1845 + t1849) + t117 * t68 * (t1748 - 0.1e1 * t832)) + t71 * (t78 * t117 * t1749 + t117 * t68 * t1845 + t68 * t1849) + t95 * t1737 - t219 + t221) + t286 * (t201 * (t112 * (-t1679 + t1869) + t1631) + t211 * t1884 + t112 * (t54 * (-t1672 + t1887) + t71 * t1894) - 0.5000000000e0 * t1542 * t1899 + t1648) + t314 * (t201 * t1884 + t211 * (t112 * (t1679 - t1905) - t1631) + t112 * (t54 * t1894 + t71 * (t1672 - 0.1e1 * t1887)) - 0.5000000000e0 * t1542 * t1917 - t1664) + t112 * (t54 * (t78 * (t117 * t1465 - t1308 - t1310 + t1487 - t1490) + t117 * (-0.5000000000e0 * m6 * t1925 * t922 - t1930) + t68 * (t95 * t1052 + t1317 + t1318) + t1937 * t979 + 0.7500000000e0 * t1671) + t71 * (t78 * (0.5000000000e0 * m6 * t110 * t117 * t922 + t1515 - t1317 - t1318) + t117 * t68 * t1465 + t68 * t1491 - 0.5000000000e0 * t876 * t1210 * t262) + t78 * (-0.5000000000e0 * t1875 * t939 - 0.1e1 * t751 * t1541) - t1905 - t1394 + t1937 * t927 + 0.7500000000e0 * t456) + t54 * (t78 * (t117 * t1972 + t63 * t1974) + t1979 * t63 * t933 + t68 * t63 * (t95 * t1091 - t1682 - t1984) + t63 * (-0.7500000000e0 * t1786 * t217 - 0.1e1 * t931 * t1541)) + t71 * (t78 * (t117 * t63 * t974 + t63 * (t95 * t1999 * theta5__dot * t367 + t1682 + t1984)) + t117 * (t68 * t1972 + 0.5000000000e0 * t1066) + t1824 * t1974 - 0.5000000000e0 * t2013 * L9 * t939) + t78 * (-t117 * t226 * m6 * t1536 - 0.5000000000e0 * t2013 * t2022) + t117 * (0.5000000000e0 * t1825 * L9 * t979 + 0.4905000000e1 * t64 * t992) + t63 * (-0.1e1 * t931 * t2034 - t1384 - 0.7500000000e0 * theta6__dot * t70 * t2037);
      jac__2_7 = -jac__1_8;
      t2043 = 0.2500000000e0 * t704;
      t2044 = theta4__dot * t203;
      t2046 = -t2043 + 0.6250000000e-1 * t2044;
      t2048 = theta4__dot * t64;
      t2049 = t2048 * t243;
      t2050 = 0.5000000000e0 * t2049;
      t2051 = t234 * theta4__dot;
      t2053 = 0.6250000000e-1 * t1038;
      t2054 = -0.5000000000e0 * t2051 - t2053;
      t2055 = m6 * t2054;
      t2058 = t2048 * t262;
      t2059 = 0.5000000000e0 * t2058;
      t2060 = t692 * t269;
      t2066 = -t2046;
      t2069 = -m6 * t2054;
      t2074 = theta4__dot * t304;
      t2075 = 0.5000000000e0 * t2074;
      t2076 = theta4__dot * t802;
      t2079 = theta5__dot * t203;
      t2081 = t1001 - 0.1250000000e0 * t2079;
      t2088 = IZ6 * theta6__dot;
      t2090 = theta6__dot * t203;
      t2091 = 0.2500000000e0 * t2090;
      t2095 = t2088 - t2091;
      t2102 = t335 * theta4__dot;
      t2104 = theta5__dot * t578;
      t2105 = t2104 * t360;
      t2107 = t1122 * t243;
      t2111 = -0.1e1 * t2105 + 0.5000000000e0 * t2107 + 0.5000000000e0 * t2104 * t577;
      t2113 = theta4__dot * t1006;
      t2114 = t2113 * t369;
      t2115 = 0.1e1 * t2114;
      t2121 = 0.2000000000e1 * t2113 * t360;
      t2122 = theta6__dot * t578;
      t2123 = t2122 * t1321;
      t2124 = 0.5000000000e0 * t2123;
      t2126 = 0.2000000000e1 * t692 * t357;
      t2137 = t1122 * t262;
      t2139 = theta5__dot * m5;
      t2140 = t2139 * t403;
      t2142 = t930 * t403;
      t2144 = -0.1e1 * t2140 - 0.1e1 * t2142;
      t2149 = theta6__dot * t64;
      t2152 = theta4__dot * m5;
      t2153 = t2152 * t403;
      t2155 = t692 * t403;
      t2157 = 0.2000000000e1 * t2153 + 0.2000000000e1 * t2155;
      t2159 = t692 * t412;
      t2161 = t2152 * t412;
      t2166 = theta6__dot * t1006 * t369;
      t2167 = 0.5000000000e0 * t2166;
      t2172 = theta4__dot * t578;
      t2178 = 0.2000000000e1 * t692 * t480 + 0.2000000000e1 * t2152 * t480;
      t2180 = 0.5000000000e0 * t234;
      t2181 = 0.5000000000e0 * t276;
      t2182 = t2180 + t489 + t2181;
      t2187 = t489 * t494 - t497 + t498 - t499 + t801;
      t2189 = t314 * (t211 * (t215 * t2046 + t2043 + t2050 + t2055) + t71 * (t2059 - 0.1e1 * t2060)) + t286 * (t201 * (t215 * t2066 - t2043 - t2050 + t2069) + t54 * (-t2059 + t2060) + t2075 + t2076) + t223 * (t54 * t78 * t2081 + t68 * t71 * t2081) + t215 * (t54 * t68 * (-0.1e1 * t2088 + t2091) + t78 * t71 * t2095 + 0.7500000000e0 * t704 - 0.1875000000e0 * t2044) + t340 * t2102 + t54 * (t78 * t2111 + t68 * (t63 * (m6 * L9 * t1781 - t2115) + t2121 - t2124 + t2126) - t2059 + t2060) + t78 * (t71 * (t63 * (m6 * L9 * t1388 + t2114) - t2121 + t2124 - t2126) + 0.5000000000e0 * t2137 + t110 * t2144) + t68 * (t71 * t2111 + 0.5000000000e0 * t2149 * t262 + t85 * t2157 + 0.2000000000e1 * t2159 + 0.2000000000e1 * t2161) + t63 * (m6 * L9 * t1801 + t2167) + t2172 * t1321 + t85 * t2178 + m6 * (theta4__dot * t2182 - t2053) + theta4__dot * t2187;
      t2192 = 0.2500000000e0 * t665;
      t2193 = -0.6250000000e-1 * t2079 + t2192;
      t2195 = theta5__dot * t64;
      t2196 = t2195 * t243;
      t2197 = 0.5000000000e0 * t2196;
      t2198 = theta5__dot * t234;
      t2200 = theta5__dot * t196;
      t2202 = 0.5000000000e0 * t2198 + 0.6250000000e-1 * t2200;
      t2204 = m6 * t2202 + t215 * t2193 - t2192 - t2197;
      t2207 = 0.2500000000e0 * t2088;
      t2208 = 0.6250000000e-1 * t2090 - t2207;
      t2210 = t112 * theta6__dot;
      t2211 = t231 * t2210;
      t2212 = 0.2500000000e0 * t2211;
      t2213 = t223 * t2208 - t2212;
      t2215 = t930 * t269;
      t2216 = t2195 * t262;
      t2217 = 0.5000000000e0 * t2216;
      t2218 = t2215 - t2217;
      t2220 = theta6__dot * t947;
      t2221 = t2220 * t988;
      t2222 = 0.2500000000e0 * t2221;
      t2223 = theta5__dot * t304;
      t2224 = 0.5000000000e0 * t2223;
      t2230 = -t223 * t2208 + t2212;
      t2233 = t2220 * t1645;
      t2234 = 0.2500000000e0 * t2233;
      t2239 = 0.2500000000e0 * t2044;
      t2240 = -0.1e1 * t704 + t2239;
      t2241 = t68 * t2240;
      t2243 = t704 - t2239;
      t2244 = t71 * t2243;
      t2251 = theta5__dot * t1006;
      t2252 = t2251 * t369;
      t2254 = t930 * t1088;
      t2260 = t63 * (-0.5000000000e0 * t2252 - 0.5000000000e0 * t2254) + t353 * L8 * t930;
      t2261 = t78 * t2260;
      t2262 = t2172 * t577;
      t2263 = 0.1e1 * t2262;
      t2269 = 0.2000000000e1 * t2172 * t360;
      t2272 = t2220 * t262;
      t2282 = t1608 * t1562;
      t2285 = t71 * t2260;
      t2287 = 0.1e1 * t718 * t262;
      t2288 = t110 * t2157;
      t2292 = 0.5000000000e0 * t2122 * t577;
      t2305 = -m6 * t2202 - t215 * t2193 + t2192 + t2197;
      t2309 = -0.1e1 * t2215 + t2217;
      t2311 = -t802;
      t2327 = t133 * m2;
      t2328 = 0.2500000000e0 * t2327;
      t2333 = s__dot * t17;
      t2336 = m6 * theta6__dot;
      t2339 = 0.5000000000e0 * t2336 * t1088 + t2167;
      jac__2_8 = t504 * t2189 + t663 * (t314 * (t201 * t2204 + t211 * t2213 + t54 * t2218 + theta5__dot * t802 - t2222 + t2224) + t286 * (t201 * t2230 + t211 * t2204 + t71 * t2218 + t2234) + t223 * (t54 * t2241 + t78 * t2244 + 0.7500000000e0 * t2088 - 0.1875000000e0 * t2090) + t575 * t2102 + t54 * (t2261 + t68 * (-t2263 + t112 * (m6 * L9 * t1691 + t2167) + t2269) + 0.2500000000e0 * t2272) + t78 * (t71 * (t2262 + t112 * (m6 * L9 * t1329 - t2167) - t2269) + t2282) + t68 * (t2285 - t2287 + t2288) + t2292 + t112 * (-t2115 + m6 * L9 * (-t1780 + t1701)) + t110 * t2178) + t314 * (t201 * t2305 + t211 * t2230 + t54 * t2309 + theta5__dot * t2311 + t2222 - t2224) + t286 * (t201 * t2213 + t211 * t2305 + t71 * t2309 - t2234) + t223 * (t2207 - 0.625000000e-1 * t2090) + t19 * (m3 * theta2__dot * (L3 * t135 + t133 + t138 + t139 + t141) + theta2__dot * (-t149 - t150 + t2328)) + t3 * m3 * t2333 + t54 * (t2261 + t68 * t112 * t2339 + 0.7500000000e0 * t2272) + t78 * (-t71 * t112 * t2339 + t2282) + t68 * t2285 - t2292 + 0.7500000000e0 * t2211 + m3 * t2333;
      jac__2_9 = t19 * (m3 * (t133 + L3 * (L4 + t36) + t139 + 0.25e0 * t140 + t138) + 0.25e0 * t2327 - t149 - t150) * theta1__dot;
      t2361 = 0.2500000000e0 * t207;
      t2362 = t196 * t245;
      t2363 = 0.6250000000e-1 * t2362;
      t2364 = t2361 - t2363;
      t2366 = theta1__dot * t64;
      t2367 = t2366 * t243;
      t2368 = 0.5000000000e0 * t2367;
      t2370 = 0.6250000000e-1 * t248;
      t2371 = 0.5000000000e0 * t251 + t2370;
      t2372 = m6 * t2371;
      t2376 = 0.5000000000e0 * t2366 * t262;
      t2377 = t269 * t245;
      t2378 = -t2376 + t2377;
      t2380 = t276 * t245;
      t2381 = 0.5000000000e0 * t2380;
      t2382 = theta1__dot * t802;
      t2385 = -t2364;
      t2388 = -m6 * t2371;
      t2393 = m6 * t71;
      t2394 = theta1__dot * t2393;
      t2399 = 0.1875000000e0 * t2362;
      t2400 = 0.7500000000e0 * t207;
      t2401 = -t2399 + t2400;
      t2403 = t335 * theta1__dot;
      t2405 = t1088 * t245;
      t2407 = theta1__dot * t1006;
      t2408 = t2407 * t369;
      t2410 = -0.1e1 * t2405 - 0.1e1 * t2408;
      t2412 = theta1__dot * L7;
      t2413 = t367 * t2412;
      t2415 = t68 * t2410 - 0.5000000000e0 * t2413;
      t2418 = 0.2000000000e1 * t2407 * t360;
      t2420 = 0.2000000000e1 * t357 * t245;
      t2421 = t2418 + t2420;
      t2427 = t78 * t354;
      t2429 = t243 * t245;
      t2436 = t60 * t593;
      t2438 = t403 * t245;
      t2440 = 0.2000000000e1 * t2436 + 0.2000000000e1 * t2438;
      t2442 = t60 * t382;
      t2443 = 0.2000000000e1 * t2442;
      t2444 = t412 * t245;
      t2445 = 0.2000000000e1 * t2444;
      t2452 = 0.2000000000e1 * t80 * t382 + 0.2000000000e1 * t480 * t245;
      t2454 = theta1__dot * t578;
      t2455 = t2454 * t1321;
      t2460 = t286 * (t201 * (t215 * t2364 - t2361 - t2368 + t2372) + t54 * t2378 + t2381 + t2382) + t314 * (t211 * (t215 * t2385 + t2361 + t2368 + t2388) + 0.5000000000e0 * t2366 * t988 - 0.1e1 * t2394 * t269) + t215 * t2401 + t340 * t2403 + t54 * (t63 * t2415 + t68 * t2421 + t2377) + t63 * (t2427 * L9 * t71 * theta1__dot - 0.5000000000e0 * t2429) - t78 * t71 * t2421 + t68 * (t85 * t2440 + t2443 + t2445) + t85 * t2452 + t2455 + m6 * (theta1__dot * t2182 - t2370) + theta1__dot * t2187;
      t2463 = -t117 * t2081;
      t2465 = 0.1250000000e0 * t2200;
      t2467 = -t2465 - 0.1e1 * t2198;
      t2470 = t117 * (m6 * t2467 + t1001 + t2196);
      t2473 = 0.1250000000e0 * t2044;
      t2474 = 0.5000000000e0 * t704;
      t2475 = t2473 - t2474;
      t2479 = 0.5000000000e0 * t2088;
      t2480 = -0.1250000000e0 * t2090 + t2479;
      t2482 = t223 * t117 * t2480;
      t2484 = 0.5000000000e0 * t2220 * t1868;
      t2485 = 0.1250000000e0 * t1038;
      t2487 = -t2485 - 0.1e1 * t2051;
      t2488 = m6 * t2487;
      t2491 = t215 * t95 * t2475 + t2482 + t2484 + t95 * (t2049 + t2488 + t2474);
      t2493 = 0.2000000000e1 * t2215;
      t2495 = t54 * (t2216 - t2493);
      t2496 = 0.5000000000e0 * t2221;
      t2497 = 0.1e1 * t2223;
      t2501 = theta4__dot * t2393;
      t2509 = t117 * t2081;
      t2511 = 0.1e1 * t2196;
      t2512 = t2465 + t2198;
      t2515 = t117 * (m6 * t2512 - t1001 - t2511);
      t2518 = 0.5000000000e0 * t2233;
      t2529 = 0.1e1 * t2074;
      t2542 = 0.2500000000e0 * t2362;
      t2544 = t2542 - 0.1e1 * t207;
      t2547 = -t2542 + t207;
      t2548 = t71 * t2547;
      t2550 = t54 * t68 * t2544 + t78 * t2548;
      t2553 = t245 * t1925;
      t2557 = 0.2000000000e1 * t2454 * t360;
      t2559 = t231 * t112 * theta1__dot;
      t2560 = 0.1e1 * t2559;
      t2567 = t110 * t78;
      t2568 = t245 * t2567;
      t2574 = theta1__dot * t947;
      t2575 = t2574 * t262;
      t2586 = t78 * t2240;
      t2588 = t71 * t2241;
      t2600 = t2269 - 0.1e1 * t718 * t243;
      t2606 = t71 * t369;
      t2607 = t692 * t1925;
      t2615 = 0.5000000000e0 * t2272;
      t2625 = L9 * (-0.1e1 * t1386 + t1385);
      t2627 = m6 * t2625 + t2114;
      t2630 = theta4__dot * t357;
      t2632 = theta6__dot * t196;
      t2633 = 0.2500000000e0 * t2632;
      t2635 = m6 * (-0.2e1 * t2630 + t2633);
      t2636 = -t2121 + t2635;
      t2640 = theta6__dot * t1806;
      t2643 = t68 * t2627;
      t2649 = 0.2e1 * t2161;
      t2650 = 0.2e1 * t2159;
      jac__2_10 = t504 * t2460 + t286 * (t201 * (t215 * t2463 + t2470) + t211 * t2491 + t117 * (t2495 + t2496 - t2497 - t310 + t307) + t95 * (t2048 * t988 - 0.2000000000e1 * t2501 * t269)) + t314 * (t201 * t2491 + t211 * (t215 * t2509 + t2515) + t117 * (t2518 - 0.1e1 * t2195 * t988 + 0.2000000000e1 * theta5__dot * t2393 * t269) + t95 * (t54 * (t2058 - 0.2000000000e1 * t2060) - t2529 + t1245)) + t215 * (t2509 + t95 * (t54 * t78 * t2095 + t71 * t68 * t2095)) + t663 * (t223 * t2550 + t575 * t2403 + t54 * (-0.1e1 * t2553 * t577 + t68 * (t2557 - t2560)) + t2568 * t63 * t71 * t369 + t78 * t71 * (t2559 - t2557) + t68 * (t110 * t2440 - 0.1e1 * t2575) - 0.1e1 * t2407 * t1321 + t110 * t2452 - 0.1e1 * t2574 * t1088) + t223 * t117 * (t54 * t2586 + t2588) + t117 * (t54 * (t63 * (-0.1e1 * t930 * t262 - 0.1e1 * t2172 * t1776) + t78 * t2600 + t2493) + t63 * (-0.1e1 * t930 * t243 - 0.1e1 * t2607 * t2606) + t78 * (t2288 - t2287) + t71 * (t68 * t2600 - t2615) + m6 * (t997 * theta5__dot + t2465) + t1001 + t309) + t95 * (t54 * (t63 * t78 * t2627 + t78 * t2636) + t63 * (-0.1e1 * t2640 * t262 + t71 * t2643) + t78 * (-t85 * t2157 - t2649 - t2650) + t71 * t68 * t2636);
      t2659 = -0.1250000000e0 * t704 + 0.3125000000e-1 * t2044;
      t2660 = t285 + theta4 + t200 + t214;
      t2661 = sin(t2660);
      t2664 = t997 * theta4__dot + t2485;
      t2665 = m6 * t2664;
      t2666 = theta4__dot * t308;
      t2669 = 0.2500000000e0 * t2380;
      t2672 = 0.2500000000e0 * IX5 - 0.2500000000e0 * t308;
      t2674 = theta1__dot * t2672 - t2669;
      t2675 = theta4 - theta5;
      t2677 = sin(2 * t2675);
      t2679 = 0.6250000000e-1 * theta6__dot;
      t2680 = 0.6250000000e-1 * theta5__dot;
      t2681 = -t2679 - t2680;
      t2685 = -theta4 + phi2 + t214 + theta5;
      t2686 = sin(t2685);
      t2688 = -t2679 + t2680;
      t2692 = -theta4 + phi2 - t214 + theta5;
      t2693 = sin(t2692);
      t2695 = 0.1250000000e0 * theta6__dot;
      t2696 = 0.6250000000e-1 * theta4__dot;
      t2701 = t214 + theta4;
      t2702 = sin(t2701);
      t2703 = t2702 * (m6 * t196 * (-t2695 - t2696) + t2043 + t2479);
      t2706 = 0.2500000000e0 * t251 + 0.3125000000e-1 * t248;
      t2708 = 0.1250000000e0 * t207;
      t2709 = m6 * t2706 - t2708;
      t2710 = phi2 - theta4 + theta5;
      t2712 = sin(2 * t2710);
      t2714 = phi2 + theta4 + theta5;
      t2716 = sin(2 * t2714);
      t2722 = theta4 + phi2 + t214 + theta5;
      t2723 = sin(t2722);
      t2729 = theta4 + phi2 - t214 + theta5;
      t2730 = sin(t2729);
      t2732 = 0.2500000000e0 * t1327;
      t2733 = L5 * theta5__dot;
      t2734 = 0.2500000000e0 * t2733;
      t2735 = L8 * theta5__dot;
      t2736 = 0.2500000000e0 * t2735;
      t2739 = theta4 + phi2 + theta6 + theta5;
      t2740 = cos(t2739);
      t2741 = t2740 * m6;
      t2745 = -theta4 + phi2 - theta6 + theta5;
      t2746 = cos(t2745);
      t2747 = t2746 * m6;
      t2751 = theta4 + phi2 - theta6 + theta5;
      t2752 = cos(t2751);
      t2753 = t2752 * m6;
      t2757 = -theta4 + phi2 + theta6 + theta5;
      t2758 = cos(t2757);
      t2759 = t2758 * m6;
      t2761 = t2661 * t2659 + t117 * (t2665 + t2474 + t2666) + t2677 * t2674 + t2686 * (m6 * t196 * t2681 + t2192 + t2207) + t2693 * (m6 * t196 * t2688 - t2192 + t2207) + t2703 + t2712 * t2709 + t2716 * t2709 + t2723 * (-m6 * t196 * t2681 - t2192 - t2207) + t2730 * (-m6 * t196 * t2688 + t2192 - t2207) + t2741 * L9 * (t2732 + t2734 - t2736) + t2747 * L9 * (t2736 + t2732 - t2734) + t2753 * L9 * (-t2734 - t2736 + t2732) + t2759 * L9 * (t2734 + t2736 + t2732);
      t2762 = L6 * theta5__dot;
      t2763 = 0.2500000000e0 * t2762;
      t2764 = L6 * theta6__dot;
      t2765 = 0.2500000000e0 * t2764;
      t2767 = L9 * (t2763 + t2765);
      t2768 = -theta6 - theta5 + phi1 + theta4 - phi2;
      t2769 = cos(t2768);
      t2773 = L9 * (-t2763 + t2765);
      t2774 = -theta6 + theta5 + phi1 + theta4 + phi2;
      t2775 = cos(t2774);
      t2778 = L8 * t2733;
      t2779 = 0.1250000000e0 * t2632;
      t2782 = sin(t2710);
      t2786 = sin(t2714);
      t2788 = -theta5 + theta4 + theta6;
      t2789 = cos(t2788);
      t2790 = t2789 * t367;
      t2794 = sin(phi2 + phi1 + theta4 + theta5);
      t2795 = t2794 * t70;
      t2797 = -theta5 + theta4 - theta6;
      t2798 = cos(t2797);
      t2799 = t2798 * t367;
      t2802 = phi2 + theta6 + theta5 + phi1 + t503;
      t2803 = cos(t2802);
      t2806 = 0.1250000000e0 * t2803 * t369 * t245;
      t2807 = -phi2 - theta6 - theta5 + phi1;
      t2808 = cos(t2807);
      t2809 = t2808 * t369;
      t2811 = 0.1250000000e0 * t2809 * t245;
      t2813 = sin(-theta4 + phi2);
      t2814 = t2813 * t269;
      t2816 = 0.1e1 * t2814 * t692;
      t2817 = 0.1250000000e0 * L8;
      t2818 = 0.1250000000e0 * L5;
      t2819 = t2817 + t2818;
      t2820 = theta1__dot * t2819;
      t2821 = theta5 + phi2 + theta6 - t503;
      t2822 = cos(t2821);
      t2823 = t2822 * t367;
      t2825 = 0.2500000000e0 * theta6__dot;
      t2826 = 0.2500000000e0 * theta4__dot;
      t2828 = L7 * (t2825 + t2826);
      t2829 = theta4 + phi2 + theta6;
      t2830 = cos(t2829);
      t2831 = t2830 * t367;
      t2833 = t337 * theta5__dot;
      t2835 = sin(phi1 + theta4 + theta5);
      t2838 = theta4 + theta5;
      t2839 = sin(t2838);
      t2842 = t2817 - t2818;
      t2843 = theta1__dot * t2842;
      t2844 = theta5 + phi2 - theta6 - t503;
      t2845 = cos(t2844);
      t2846 = t2845 * t367;
      t2848 = t2769 * m6 * t2767 + t2775 * m6 * t2773 + t2782 * m6 * (t2778 - t2779) + t2786 * m6 * (t2778 + t2779) + 0.2500000000e0 * t2790 * t1562 + t2795 * t2762 + 0.2500000000e0 * t2799 * t1562 + t2806 + t2811 - t2816 + t2823 * t2820 + t2831 * t2828 + t2835 * t2833 * t403 + t2839 * t2833 * t412 + t2846 * t2843;
      t2850 = -t2819;
      t2851 = theta1__dot * t2850;
      t2852 = theta5 + phi2 - theta6 + t503;
      t2853 = cos(t2852);
      t2854 = t2853 * t367;
      t2857 = sin(t285 + phi2 - t503);
      t2860 = 0.5000000000e0 * t2857 * t269 * t245;
      t2861 = phi2 - theta6 + t285 - t503;
      t2862 = cos(t2861);
      t2865 = 0.1250000000e0 * t2862 * t367 * t2412;
      t2866 = phi2 - theta6 + t285 + t503;
      t2867 = cos(t2866);
      t2870 = 0.1250000000e0 * t2867 * t367 * t2412;
      t2872 = sin(t285 + phi2 + t503);
      t2875 = 0.5000000000e0 * t2872 * t269 * t245;
      t2876 = t200 - theta6 + t503 + t285;
      t2877 = cos(t2876);
      t2880 = 0.1250000000e0 * t2877 * t243 * t245;
      t2881 = t200 + theta6 - t503 + t285;
      t2882 = cos(t2881);
      t2885 = 0.1250000000e0 * t2882 * t243 * t245;
      t2886 = t200 + theta6 + t503 + t285;
      t2887 = cos(t2886);
      t2890 = 0.1250000000e0 * t2887 * t243 * t245;
      t2891 = -phi2 - theta6 - theta5 + phi1 + t503;
      t2892 = cos(t2891);
      t2895 = 0.1250000000e0 * t2892 * t369 * t245;
      t2897 = sin(-theta5 - phi2 + phi1 + t503);
      t2900 = 0.5000000000e0 * t2897 * t70 * t593;
      t2902 = sin(theta5 + phi2 + phi1 + t503);
      t2905 = 0.5000000000e0 * t2902 * t70 * t593;
      t2906 = -phi2 + theta6 - theta5 + phi1 + t503;
      t2907 = cos(t2906);
      t2910 = 0.1250000000e0 * t2907 * t369 * t245;
      t2912 = sin(t503 + phi2 + theta5);
      t2915 = 0.5000000000e0 * t2912 * t357 * t245;
      t2917 = sin(-t503 + phi2 + theta5);
      t2920 = 0.5000000000e0 * t2917 * t357 * t245;
      t2921 = t2854 * t2851 + t2860 - t2865 - t2870 + t2875 - t2880 + t2885 + t2890 + t2895 - t2900 + t2905 - t2910 + t2915 + t2920;
      t2922 = phi2 + theta6 + t285 - t503;
      t2923 = cos(t2922);
      t2926 = 0.1250000000e0 * t2923 * t367 * t2412;
      t2927 = phi2 + theta6 + t285 + t503;
      t2928 = cos(t2927);
      t2931 = 0.1250000000e0 * t2928 * t367 * t2412;
      t2932 = t200 - theta6 - t503 + t285;
      t2933 = cos(t2932);
      t2936 = 0.1250000000e0 * t2933 * t243 * t245;
      t2938 = L7 * (t2825 - t2826);
      t2939 = theta4 + phi2 - theta6;
      t2940 = cos(t2939);
      t2941 = t2940 * t367;
      t2946 = -t2842;
      t2947 = theta1__dot * t2946;
      t2948 = theta5 + phi2 + theta6 + t503;
      t2949 = cos(t2948);
      t2950 = t2949 * t367;
      t2952 = -theta4 + phi2 - theta6;
      t2953 = cos(t2952);
      t2954 = t2953 * t367;
      t2956 = -theta4 + phi2 + theta6;
      t2957 = cos(t2956);
      t2958 = t2957 * t367;
      t2960 = theta5 + theta4 - theta6;
      t2961 = cos(t2960);
      t2962 = t2961 * t367;
      t2965 = theta5 + theta4 + theta6;
      t2966 = cos(t2965);
      t2967 = t2966 * t367;
      t2971 = sin(-phi2 + phi1 + theta4 - theta5);
      t2972 = t2971 * t70;
      t2977 = theta4 - theta6;
      t2978 = cos(t2977);
      t2980 = t2978 * m6 * L9 * (-t1800 + t1387);
      t2981 = theta6 - theta5 + phi1 + theta4 - phi2;
      t2982 = cos(t2981);
      t2985 = theta6 + theta5 + phi1 + theta4 + phi2;
      t2986 = cos(t2985);
      t2991 = theta4 + theta6;
      t2992 = cos(t2991);
      t2994 = t2992 * m6 * L9 * (t1800 + t1387);
      t2995 = t2926 + t2931 - t2936 + t2941 * t2938 + t337 * L7 * t78 * t382 + t2950 * t2947 + t2954 * t2828 + t2958 * t2938 - 0.2500000000e0 * t2962 * t1562 - 0.2500000000e0 * t2967 * t1562 - 0.1e1 * t2972 * t2762 + t2980 + t2982 * m6 * t2773 + t2986 * m6 * t2767 + t2994;
      t2999 = phi2 + theta5;
      t3001 = sin(2 * t2999);
      t3004 = -t2708 + 0.3125000000e-1 * t2362;
      t3005 = t503 + t214 + phi2 + theta5;
      t3006 = sin(t3005);
      t3008 = theta5 + phi2 + theta6;
      t3009 = 2 * t3008;
      t3010 = sin(t3009);
      t3014 = -0.5000000000e0 * t2444 - 0.5000000000e0 * t2442;
      t3016 = sin(-theta5 + t503);
      t3020 = 0.6250000000e-1 * t207 - 0.1562500000e-1 * t2362;
      t3021 = 2 * t2751;
      t3022 = sin(t3021);
      t3024 = t2069 - t2043;
      t3026 = sin(t285 - theta4 + t200);
      t3029 = sin(phi1 + theta4 - theta5);
      t3031 = -t3004;
      t3032 = t503 - t214 + phi2 + theta5;
      t3033 = sin(t3032);
      t3039 = theta4 - t214;
      t3040 = sin(t3039);
      t3041 = t3040 * (m6 * t196 * (t2695 - t2696) + t2043 - t2479);
      t3042 = -t503 - t214 + phi2 + theta5;
      t3043 = sin(t3042);
      t3045 = t2139 * t412;
      t3047 = t930 * t412;
      t3050 = sin(t2675);
      t3052 = -t3014;
      t3054 = sin(theta5 + t503);
      t3056 = theta5 + phi2 - theta6;
      t3057 = 2 * t3056;
      t3058 = sin(t3057);
      t3062 = -0.5000000000e0 * t2436 - 0.5000000000e0 * t2438;
      t3064 = sin(-theta5 + phi1);
      t3066 = t3001 * (t2388 + t2361) + t3006 * t3004 + t3010 * t3004 + t3016 * t3014 + t3022 * t3020 + t3026 * t3024 + t3029 * t2144 + t3033 * t3031 + t3041 + t3043 * t3004 + t3050 * (-0.1e1 * t3045 - 0.1e1 * t3047) + t3054 * t3052 + t3058 * t3004 + t3064 * t3062;
      t3069 = -theta1__dot * t2672 + t2669;
      t3071 = sin(2 * t2838);
      t3073 = theta1__dot * t2311;
      t3074 = -t2381 + t3073;
      t3076 = -t3062;
      t3078 = sin(theta5 + phi1);
      t3080 = t2055 + t2043;
      t3082 = sin(theta4 + t200 + t285);
      t3084 = -t503 + phi2 + t214 + theta5;
      t3085 = sin(t3084);
      t3087 = 2 * t2745;
      t3088 = sin(t3087);
      t3091 = sin(theta5 + phi1 + t503);
      t3093 = 2 * t2757;
      t3094 = sin(t3093);
      t3096 = IX5 * theta4__dot;
      t3099 = 0.5000000000e0 * t3096 - t2075 - 0.5000000000e0 * t2666;
      t3101 = sin(-t285 + theta4);
      t3104 = sin(t285 + theta4);
      t3107 = sin(-theta5 + phi1 + t503);
      t3109 = t285 + theta4 + t200 - t214;
      t3110 = sin(t3109);
      t3112 = -t2659;
      t3113 = t285 - theta4 + t200 + t214;
      t3114 = sin(t3113);
      t3116 = t285 - theta4 + t200 - t214;
      t3117 = sin(t3116);
      t3119 = 2 * t2739;
      t3120 = sin(t3119);
      t3122 = t3110 * t2659 + t3088 * t3020 + t3094 * t3020 + t3120 * t3020 + t3085 * t3031 + t3107 * t3062 + t3071 * t3069 + t314 * t3074 + t3078 * t3076 + t3091 * t3076 + t3082 * t3080 + t3101 * t3099 + t3104 * t3099 + t3114 * t3112 + t3117 * t3112;
      t3124 = phi2 + theta6 + t285;
      t3125 = cos(t3124);
      t3126 = t3125 * t367;
      t3128 = 0.2500000000e0 * t3126 * t2412;
      t3129 = sin(t2999);
      t3130 = t3129 * t357;
      t3131 = t3130 * t245;
      t3132 = phi2 - theta6 + t285;
      t3133 = cos(t3132);
      t3134 = t3133 * t367;
      t3136 = 0.2500000000e0 * t3134 * t2412;
      t3137 = cos(t3008);
      t3138 = t3137 * t1088;
      t3140 = 0.2500000000e0 * t3138 * t245;
      t3141 = cos(t3056);
      t3142 = t3141 * t1088;
      t3144 = 0.2500000000e0 * t3142 * t245;
      t3146 = sin(theta4 + phi2);
      t3147 = t3146 * t269;
      t3148 = t3147 * t692;
      t3150 = sin(-theta5 - phi2 + phi1);
      t3151 = t3150 * t70;
      t3153 = 0.5000000000e0 * t3151 * t593;
      t3155 = sin(theta5 + phi2 + phi1);
      t3156 = t3155 * t70;
      t3158 = 0.5000000000e0 * t3156 * t593;
      t3159 = -phi2 + theta6 - theta5 + phi1;
      t3160 = cos(t3159);
      t3161 = t3160 * t369;
      t3163 = 0.1250000000e0 * t3161 * t245;
      t3164 = phi2 + theta6 + theta5 + phi1;
      t3165 = cos(t3164);
      t3166 = t3165 * t369;
      t3168 = 0.1250000000e0 * t3166 * t245;
      t3169 = phi2 - theta6 + theta5 + phi1;
      t3170 = cos(t3169);
      t3171 = t3170 * t369;
      t3173 = 0.1250000000e0 * t3171 * t245;
      t3174 = t285 + t200 - theta6;
      t3175 = cos(t3174);
      t3176 = t3175 * t243;
      t3178 = 0.2500000000e0 * t3176 * t245;
      t3179 = t285 + t200 + theta6;
      t3180 = cos(t3179);
      t3181 = t3180 * t243;
      t3183 = 0.2500000000e0 * t3181 * t245;
      t3185 = sin(t285 + phi2);
      t3186 = t3185 * t269;
      t3187 = t3186 * t245;
      t3189 = -t3128 + t3131 + t3136 + t3140 - t3144 + t3148 - t3153 + t3158 - t3163 + t3168 - t3173 + t3178 - t3183 - 0.1e1 * t3187;
      t3190 = t285 + theta4 + t200 + theta6;
      t3191 = cos(t3190);
      t3192 = t3191 * t243;
      t3194 = 0.2500000000e0 * t3192 * t692;
      t3195 = L7 * theta4__dot;
      t3196 = t285 - theta4 + phi2 + theta6;
      t3197 = cos(t3196);
      t3198 = t3197 * t367;
      t3200 = 0.2500000000e0 * t3198 * t3195;
      t3201 = t285 + theta4 + phi2 + theta6;
      t3202 = cos(t3201);
      t3203 = t3202 * t367;
      t3205 = 0.2500000000e0 * t3203 * t3195;
      t3206 = t285 - theta4 - theta6 + t200;
      t3207 = cos(t3206);
      t3208 = t3207 * t243;
      t3210 = 0.2500000000e0 * t3208 * t692;
      t3211 = t285 - theta4 + phi2 - theta6;
      t3212 = cos(t3211);
      t3213 = t3212 * t367;
      t3215 = 0.2500000000e0 * t3213 * t3195;
      t3216 = t285 + theta4 + phi2 - theta6;
      t3217 = cos(t3216);
      t3218 = t3217 * t367;
      t3220 = 0.2500000000e0 * t3218 * t3195;
      t3222 = sin(t285 + theta4 + phi2);
      t3223 = t3222 * t269;
      t3224 = t3223 * t692;
      t3226 = t285 + theta4 - theta6 + t200;
      t3227 = cos(t3226);
      t3228 = t3227 * t243;
      t3230 = 0.2500000000e0 * t3228 * t692;
      t3231 = t285 - theta4 + theta6 + t200;
      t3232 = cos(t3231);
      t3233 = t3232 * t243;
      t3235 = 0.2500000000e0 * t3233 * t692;
      t3237 = sin(t285 - theta4 + phi2);
      t3238 = t3237 * t269;
      t3239 = t3238 * t692;
      t3240 = phi2 - theta6 + theta5 + phi1 + t503;
      t3241 = cos(t3240);
      t3244 = 0.1250000000e0 * t3241 * t369 * t245;
      t3245 = t503 + theta6 - theta5;
      t3246 = cos(t3245);
      t3249 = 0.1250000000e0 * t3246 * t367 * t2412;
      t3250 = t503 - theta6 + theta5;
      t3251 = cos(t3250);
      t3254 = 0.1250000000e0 * t3251 * t367 * t2412;
      t3255 = t503 - theta6 - theta5;
      t3256 = cos(t3255);
      t3259 = 0.1250000000e0 * t3256 * t367 * t2412;
      t3260 = t503 + theta6 + theta5;
      t3261 = cos(t3260);
      t3264 = 0.1250000000e0 * t3261 * t367 * t2412;
      t3265 = -t3194 + t3200 - t3205 - t3210 - t3215 + t3220 - 0.1e1 * t3224 + t3230 + t3235 + t3239 - t3244 + t3249 - t3254 + t3259 - t3264;
      jac__2_11 = t2761 + t2848 + t2921 + t2995 + t3066 + t3122 + t3189 + t3265;
      t3268 = t201 * t2364;
      t3270 = t211 * t2385;
      t3274 = t201 * t2385;
      t3275 = -t2475;
      t3276 = t117 * t3275;
      t3281 = t211 * t2364;
      t3284 = 0.2500000000e0 * t2079;
      t3285 = t665 - t3284;
      t3286 = t95 * t3285;
      t3293 = 0.2500000000e0 * t2574 * t1651;
      t3294 = 0.2500000000e0 * t2574 * t1645 + t3293;
      t3299 = 0.2500000000e0 * t2574 * t1634;
      t3300 = -0.2500000000e0 * t2574 * t988 - t3299;
      t3302 = 0.5000000000e0 * t2405;
      t3303 = 0.5000000000e0 * t2408;
      t3304 = t3302 + t3303;
      t3306 = 0.2500000000e0 * t2413;
      t3309 = -t3304;
      t3312 = 0.2500000000e0 * t2429;
      t3315 = t2454 * t577;
      t3316 = 0.5000000000e0 * t3315;
      t3319 = t112 * t211;
      t3322 = 0.5000000000e0 * t692 * t3319 * t1868;
      t3323 = m6 * t117;
      t3324 = theta4__dot * t3323;
      t3330 = 0.5000000000e0 * t3324 * t988 - 0.2500000000e0 * theta1__dot * t55 * t262;
      t3335 = t95 * t2243;
      t3337 = 0.1e1 * t665;
      t3338 = -t3337 + t3284;
      t3350 = t112 * t201;
      t3353 = 0.5000000000e0 * t692 * t3350 * t1868;
      t3358 = 0.5000000000e0 * t3324 * t1645 + 0.2500000000e0 * t2394 * t262;
      t3362 = t54 * t369;
      t3367 = -0.5000000000e0 * t2553 * t3362 + 0.5000000000e0 * t2568 * t2606;
      t3369 = t54 * t243;
      t3372 = 0.5000000000e0 * t245 * t1824 * t3369;
      t3373 = t71 * t243;
      t3374 = t78 * t63;
      t3377 = 0.5000000000e0 * t245 * t3374 * t3373;
      t3380 = 0.5000000000e0 * theta1__dot * t1698 * t272;
      t3386 = theta5__dot * L9;
      t3389 = t117 * t369;
      t3390 = t2104 * t3389;
      t3394 = 0.7500000000e0 * t2413;
      t3395 = theta5__dot * t1210;
      t3396 = t3395 * t262;
      t3401 = -0.1e1 * t2254 - 0.1e1 * t2252;
      t3405 = theta6__dot * t1698;
      t3412 = t3395 * t243;
      t3415 = 0.7500000000e0 * t2429;
      t3418 = 0.1e1 * t2166;
      t3419 = 0.1e1 * t1327;
      t3429 = t95 * (t63 * (-t3418 + L9 * m6 * (-t1690 - t3419)) + t2239) + t2336 * t923 * t3389;
      t3431 = t117 * t196;
      t3432 = theta5__dot * t1698;
      jac__2_12 = t223 * (t663 * (t286 * t3268 + t314 * t3270 - t2399 + t2400) + t286 * (t211 * t3276 + t3274) + t314 * (t201 * t3276 + t3281) + t3286 + t2361 - 0.625000000e-1 * t2362) + t663 * (t286 * t3294 + t314 * t3300 + t112 * (t54 * (t68 * t3304 + t3306) + t71 * t78 * t3309 + t3312) + t3316) + t286 * (t112 * t3330 - t3293 + t3322) + t215 * (t504 * t2550 + t54 * (t68 * t117 * t3338 + t78 * t3335) + t71 * (t78 * t117 * t3285 + t68 * t3335)) + t314 * (t112 * t3358 + t3299 + t3353) + t504 * (t112 * t3367 + t63 * t3304 + t3372 - t3377 + t3380) + t112 * (t54 * (-0.1e1 * t2640 * t1868 + t68 * (t95 * t354 * t3386 + t3303 + t3302 - 0.1e1 * t3390) + t3394 + t3396) + t71 * (t78 * (t95 * t3401 - t3302 - t3303 + t3390) - 0.1e1 * t3405 * t1868 - 0.5000000000e0 * t3324 * t262) + t3412 - 0.1e1 * t2640 * t1886 + t3415) + t54 * (t78 * t3429 + 0.2500000000e0 * t3432 * t3431) + t71 * (-0.2500000000e0 * theta5__dot * t1806 * t3431 + t68 * t3429 - 0.1e1 * t2149 * t1541) - t3316 - 0.1e1 * t692 * t3374 * t1541;
      jac__3_1 = t21 + t28 + t29 + m3 * (theta2__dot__dot * (-t36 - t37 - t97) - 0.2e1 * theta2__dot * s__dot);
      jac__3_2 = t9 * t25 * (t99 + L3 * (t12 + 0.4905e1 * m2) + (0.981e1 * s + 0.4905e1 * L4) * m3);
      jac__3_3 = t3 * t1 * (m3 * (-0.1e1 * t133 + L3 * (-t45 - t97) - t141 - 0.1e1 * t139 - 0.1e1 * t138) + IX2 + IX3 - t2328) + t10 * t27 * t190 + t25 * (-0.1e1 * lambda2 * L3 - 0.1e1 * lambda2 * L4 - 0.1e1 * lambda2 * s);
      jac__3_7 = -jac__1_9;
      jac__3_8 = -jac__2_9;
      jac__3_9 = -t38 * s__dot * m3;
      t3497 = 0.981e1 * t80 + 0.981e1 * t82;
      jac__4_2 = t9 * (t117 * (t68 * (0.981e1 * t60 + 0.981e1 * t58 + 0.981e1 * t56 - 0.4905e1 * t65) + t78 * (-0.981e1 * t72 + 0.4905e1 * t75) + t85 * t3497 + 0.981e1 * t91 + (lambda1 + 0.981e1 * m5 + 0.1962e2 * m4) * L5) + t95 * (t110 * t3497 - 0.4905e1 * t114));
      t3511 = IZ6 * t1;
      t3512 = 0.2500000000e0 * t3511;
      t3513 = m6 * t1;
      t3514 = t196 * t3513;
      t3516 = -t3512 + 0.6250000000e-1 * t3514;
      t3520 = 0.5000000000e0 * t231 * t63 * t1;
      t3521 = 0.6250000000e-1 * t196;
      t3522 = -t2180 - t3521;
      t3523 = t1 * t3522;
      t3524 = m6 * t3523;
      t3527 = t1 * t64;
      t3529 = 0.5000000000e0 * t3527 * t262;
      t3530 = t269 * t3513;
      t3533 = t54 * (t3529 - 0.1e1 * t3530);
      t3535 = 0.5000000000e0 * t276 * t3513;
      t3536 = t1 * t2311;
      t3539 = -t3516;
      t3540 = t215 * t3539;
      t3541 = -t3522;
      t3542 = t1 * t3541;
      t3543 = m6 * t3542;
      t3546 = -t3529 + t3530;
      t3547 = t71 * t3546;
      t3550 = 0.1875000000e0 * t3514;
      t3551 = 0.7500000000e0 * t3511;
      t3552 = t3550 - t3551;
      t3554 = t335 * t1;
      t3563 = t1 * t1006;
      t3564 = t3563 * t360;
      t3565 = 0.2000000000e1 * t3564;
      t3566 = t357 * t3513;
      t3567 = 0.2000000000e1 * t3566;
      t3570 = t403 * t3513;
      t3572 = t1 * L6;
      t3573 = t60 * t3572;
      t3575 = -0.2000000000e1 * t3570 - 0.2000000000e1 * t3573;
      t3577 = t1 * L5;
      t3578 = t60 * t3577;
      t3580 = t412 * t3513;
      t3584 = t1088 * t3513;
      t3586 = t3563 * t369;
      t3597 = -0.2000000000e1 * t80 * t3577 - 0.2000000000e1 * t480 * t3513;
      t3599 = t1 * t578;
      t3600 = t3599 * t1321;
      t3603 = -t2181 + t3521 - 0.1e1 * t489 - t2180;
      t3609 = -t801 + t489 * (-t493 - 0.1e1 * m5) + t497 + IX4 - t498;
      t3611 = t286 * (t201 * (t215 * t3516 + t3512 + t3520 + t3524) + t3533 - t3535 + t3536) + t314 * (t211 * (t3540 - t3520 + t3543 - t3512) + t3547) + t215 * t3552 + t339 * (-0.1e1 * m5 * t3554 - 0.1e1 * t335 * t3513) + t68 * (t54 * (t355 * L9 * t1 - t3565 - t3567) + t85 * t3575 - 0.2000000000e1 * t3578 - 0.2000000000e1 * t3580) + t3533 + t71 * t78 * (t63 * (-0.1e1 * t3584 - 0.1e1 * t3586) + t3565 + t3567) + t3520 + t85 * t3597 - 0.1e1 * t3600 + m6 * t1 * t3603 + t1 * t3609;
      t3613 = t95 * t210;
      t3627 = t215 * t95 * t289 + t223 * t95 * t294 + t95 * (t229 + t233 + t297 + t194);
      t3648 = 0.1e1 * t220;
      t3649 = t1358 - t3648;
      t3650 = t117 * t3649;
      t3651 = t68 * t71;
      t3653 = t54 * t78;
      t3657 = 0.2500000000e0 * t3514;
      t3659 = t3657 - 0.1e1 * t3511;
      t3662 = -t3657 + t3511;
      t3665 = t68 * t54 * t3659 + t71 * t78 * t3662;
      t3669 = t231 * t112 * t1;
      t3671 = t3599 * t360;
      t3672 = 0.2000000000e1 * t3671;
      t3673 = t3599 * t577;
      t3679 = t1 * t947;
      t3680 = t3679 * t262;
      t3695 = 0.1e1 * t208;
      t3696 = t557 - t3695;
      t3697 = t117 * t3696;
      t3699 = -t1369;
      t3700 = t117 * t3699;
      t3705 = t117 * t558;
      t3709 = t1309 - t1490 + t1307;
      t3713 = t1318 + t1317;
      t3714 = t63 * t3713;
      t3718 = 0.1e1 * t396;
      t3719 = t3714 + t85 * (-0.1e1 * t1324 + t1322) - t3718 + t1528;
      t3728 = -0.1e1 * t1309 + t1490 - 0.1e1 * t1307;
      t3730 = t63 * t3728 - t1511 + t359 + t363;
      t3734 = t85 * t1416;
      t3735 = 0.1e1 * t448;
      t3736 = 0.1e1 * t450;
      t3742 = 0.1e1 * t276;
      t3743 = 0.1e1 * t234;
      t3746 = -t2465 + theta5__dot * (-t3742 - t3743);
      t3750 = -t1227 - 0.500000000e0 * IZ6;
      t3751 = theta5__dot * t3750;
      t3767 = 0.5000000000e0 * t1627;
      t3769 = t117 * (-0.5000000000e0 * t463 * L6 * theta1__dot__dot * t63 + t110 * (t1324 - 0.1e1 * t1322) - t3767 + t1358);
      t3771 = -t410;
      t3781 = t1071 * t374;
      jac__4_4 = t663 * t3611 + t286 * (t201 * (t215 * t3613 + t95 * (m6 * theta1__dot * t2467 + t209 + t247)) + t211 * t3627 + t95 * (t300 + t303 - t306 + t1233)) + t314 * (t201 * t3627 + t211 * (t215 * t95 * t1140 + t95 * (m6 * theta1__dot * t2512 - t1142 - t209)) + t95 * (t71 * t1151 + t54 * t302 - t278 - t281 + t283)) + t215 * (t3651 * t3650 + t3653 * t3650 + t3613) + t504 * (t223 * t3665 + t575 * t3554 + t68 * (t54 * (-0.1e1 * t3669 + t3672 - 0.1e1 * t3673) - t110 * t3575 - 0.1e1 * t3680) + t71 * t78 * (t3669 - t3672 + t3673) - 0.1e1 * t3563 * t1321 - t110 * t3597 - 0.1e1 * t3679 * t1088) + t223 * (t68 * (t54 * t3697 + t71 * t3700) + t3653 * t3700 + t1696 * t3705) + t95 * (t68 * (t54 * (t63 * t3709 + t1511 - t359 - t363) + t71 * t3719 + t411 + t1561 - t414 - t416) + t54 * (t78 * t3719 - t271 + t273) + t71 * (t78 * t3730 + t266) + t78 * (t3734 - t3735 - t3736) + t247 + t85 * t27 * t84 + t27 * t1130 + m6 * theta1__dot * t3746 + theta1__dot * t3751) + t68 * (t54 * t117 * (-0.1e1 * t580 - 0.1e1 * t582 + t584) + t71 * t3769 + t117 * (t110 * t3771 - 0.1e1 * t609)) + t3653 * t3769 + t1696 * t117 * t585 + t78 * t117 * (t3781 - t1413) + t117 * (t110 * t27 * t109 + L5 * lambda2 + 0.4905000000e1 * t947 * t1488);
      t3795 = 0.6250000000e-1 * t1 * t196;
      t3810 = t504 * (t3540 - t3520 + m6 * (0.5000000000e0 * t1 * t234 + t3795) - t3512) + t215 * (t3705 + t861 - t860) + t223 * t823 + t117 * (-0.2000000000e1 * t247 + m6 * (0.2500000000e0 * t249 + 0.2000000000e1 * t252) - t3695) - t1258 - t1259 + t1261 - t861;
      t3812 = t117 * t1369;
      t3813 = t3812 - t1201 + t1191;
      t3816 = 0.1e1 * t228;
      t3817 = 0.1e1 * t232;
      t3818 = 0.1250000000e0 * t237;
      t3827 = t54 * t3546;
      t3828 = t1 * t802;
      t3833 = 0.4000000000e1 * t270 - 0.2000000000e1 * t273;
      t3836 = 0.2000000000e1 * t261;
      t3838 = -0.1e1 * t259 + t3836 - 0.1e1 * t265;
      t3853 = t117 * t1359;
      t3881 = -0.5000000000e0 * t3584 - 0.5000000000e0 * t3586;
      t3882 = t63 * t3881;
      t3885 = t353 * t1 * t70 + t3882;
      t3887 = t1 * L7;
      t3890 = t78 * (t1608 * t3887 + t54 * t3885);
      t3892 = t68 * t71 * t3885;
      t3907 = 0.1250000000e0 * t3514 - 0.5000000000e0 * t3511;
      t3912 = t78 * t54 * t3907 + t68 * t71 * t3907;
      t3913 = t663 * t3912;
      t3915 = t838 * t203;
      t3917 = t95 * t3696 - t845 + 0.1250000000e0 * t3915;
      t3933 = 0.5000000000e0 * t3673;
      t3934 = t3671 - 0.5000000000e0 * t3669 - t3933;
      t3943 = t663 * (t78 * (t54 * t3934 - 0.5000000000e0 * t3680 + t1071 * t3572) + t68 * t71 * t3934);
      t3948 = -t423 - 0.1e1 * t1983;
      t3955 = -t27 * t1099;
      t3958 = t95 * t369;
      t3961 = -t1461 - t1459;
      t3966 = 0.1e1 * t872;
      t3970 = m6 * L9 * (t887 - 0.1e1 * t884);
      t3973 = t246 * t2034;
      t3975 = t751 * t380;
      t3977 = theta6__dot * t1385;
      t3982 = t895 - 0.1e1 * t3973 - 0.1e1 * t3975 + m6 * L9 * (-0.1e1 * t3977 - t1468 + t1967);
      t3995 = t63 * (t110 * (-0.1e1 * t246 * t3958 + m6 * L9 * t3961) - t3966 + t3970) + t112 * t3982 + t110 * (t838 * m6 * t360 + 0.2000000000e1 * t246 * t95 * t360) + 0.2000000000e1 * t905 + m6 * (-t916 + 0.2000000000e1 * t913);
      t4001 = -0.5000000000e0 * t367 * t921 - 0.5000000000e0 * t1937 * t374;
      t4014 = 0.5000000000e0 * t1937 * t225;
      t4019 = (theta1__dot__dot * t95 + theta5__dot__dot) * m6;
      t4022 = t95 * t196;
      t4024 = 0.2500000000e0 * t264 * t4022;
      t4026 = 0.2000000000e1 * t693 * t361;
      t4031 = 0.2500000000e0 * theta6__dot * t2200 - 0.2000000000e1 * t668 * t357;
      t4035 = t246 * t1541;
      t4040 = -0.1e1 * t4035 + m6 * L9 * (t1535 - t1533);
      t4057 = 0.1e1 * t394;
      t4067 = 0.1e1 * t693 * t380;
      t4069 = 0.1e1 * t693 * t1088;
      t4074 = t95 * theta1__dot + theta5__dot;
      t4093 = 0.5000000000e0 * t367 * t979;
      t4095 = 0.5000000000e0 * t1937 * t258;
      t4096 = t4093 + t4095;
      t4103 = theta5__dot * t2152;
      jac__4_5 = t314 * (t201 * t3810 + t211 * (t215 * t3813 + t223 * t3650 + t117 * (-t3816 - t3817 + m6 * (t235 + t3818) - t1367) + t1196 - m6 * t1199 + t666) + t504 * (t3827 + t3535 + t3828) + t117 * (t54 * t3833 + t71 * t3838 + 0.2000000000e1 * t305 + theta1__dot * theta5__dot * t1292) + t54 * t1279 - t71 * t1218 + t794 + t792 - 0.1e1 * t789) + t286 * (t201 * (t215 * (t3700 + t666 - t1191) + t223 * t3853 + t117 * (t228 + t232 + m6 * (-0.1e1 * t235 - t3818) + t1367) - t1196 + t1200 - t1201) + t211 * t3810 + t504 * t3547 + t117 * (t54 * (t259 - t3836 + t265) + t71 * t3833 + t282 - 0.1e1 * t277 - 0.1e1 * t280) + t54 * t1218 + t71 * t1279 + t1289 + theta5__dot * (0.2000000000e1 * t2666 - 0.2000000000e1 * t3096)) + t504 * (t3890 + t3892) + t215 * (t78 * t71 * (t95 * t3649 + t811 - t815) + t68 * t54 * (t95 * t1359 + t808 - t811)) + t223 * (t3913 + t78 * (t54 * t3917 + t71 * (t95 * t3699 + t831 - t833)) + t68 * (t54 * (t95 * t1369 - t831 + t833) + t71 * t3917)) + t3943 + t78 * (t117 * (t54 * t3730 + t71 * (t112 * t3948 + t354 * t225 - t63 * t3713) + t85 * t3771 + t3955 + t414 + t416) + t54 * t3995 + t71 * (t63 * (t353 * t668 * t367 + t110 * t4001) + t112 * (t110 * (-0.1e1 * t264 * t3958 - 0.1e1 * t931 * t369) - t4014 - t929) + t110 * t4019 * t360 + t4024 - t4026 + m6 * t4031) + t941 + t112 * t4040 + t110 * (t1070 * t1460 + t95 * t3771) + t85 * (0.2000000000e1 * t949 + 0.2000000000e1 * t951) + 0.2e1 * t967 + 0.2e1 * t969) + t117 * t68 * (t54 * (t112 * t1999 * theta1__dot * t367 + t3714 - t3718 - t4057) + t71 * t3730 + t3734 - t3735 - t3736) + t68 * (t54 * (t63 * (-t110 * t4001 - t4067 - t4069) + t112 * (t110 * t4074 * m6 * L9 * t2764 + t4014 + t929) + t110 * (-0.1e1 * m6 * t95 * L8 * t374 - 0.1e1 * t1518) - t4024 + t4026 - m6 * t4031) + t71 * t3995 + t112 * t4096 + t110 * (t95 * t1416 - t1599 - t1601) + t85 * (0.2000000000e1 * t693 * t403 + 0.2000000000e1 * t4103 * t403) + 0.2e1 * t693 * t412 + 0.2e1 * t4103 * t412);
      t4129 = t95 * t550 + t1735 - t1736;
      t4152 = -0.5000000000e0 * t205 + 0.2000000000e1 * t208;
      t4154 = 0.2500000000e0 * t3915;
      t4157 = t95 * t561;
      t4158 = t4157 + t832 - t1748;
      t4163 = -t4152;
      t4164 = t95 * t4163;
      t4165 = 0.1e1 * t844;
      t4174 = 0.2500000000e0 * t3679 * t504 * t243;
      t4175 = t246 * t1868;
      t4177 = 0.5000000000e0 * t367 * t713;
      t4181 = 0.5000000000e0 * t2048 * t716;
      t4192 = t112 * (0.5000000000e0 * t1875 * t225 - 0.1e1 * t231 * t668) - 0.5000000000e0 * t1646 * t1868;
      t4195 = t3513 * t112 * t504;
      t4198 = t246 * t1886;
      t4200 = 0.5000000000e0 * t367 * t746;
      t4205 = -t1930 + 0.5000000000e0 * t1875 * t258;
      t4237 = t367 * t3887;
      t4243 = t243 * t3513;
      t4249 = t3513 * t1925;
      t4250 = t4249 * t3362;
      t4252 = t3513 * t2567;
      t4253 = t4252 * t2606;
      t4257 = t3513 * t1824;
      t4260 = t3513 * t3374;
      t4263 = t1 * t1698;
      t4269 = t579 * t3958;
      t4286 = t117 * t3713 - t4067 + 0.5000000000e0 * m6 * t110 * t95 * L9 * t374 - t4069 + 0.5000000000e0 * t463 * t921;
      t4314 = t117 * t3948 + t95 * t458 - t929 - t973;
      t4340 = 0.4905000000e1 * t1210 * t1488;
      jac__4_6 = t223 * (t286 * (t201 * (t504 * t3539 + t3705 - t860 + t861) + t211 * t3813) + t314 * (t201 * t3813 + t211 * (t504 * t3516 + t3697 + t860 - t861)) - t504 * t3552 + t54 * t78 * t4129 + t71 * t68 * t4129 + t3705 + t860 - t861) + t215 * (t286 * (t201 * t1169 + t211 * t3853) + t314 * (t201 * t3853 + t211 * t823) + t663 * (t71 * t78 * t3659 + t54 * t68 * t3662) + t54 * (t68 * (t95 * t4152 - t4154 + t844) + t78 * t4158) + t71 * (t68 * t4158 + t78 * (t4164 - t4165 + t4154)) - t821 + t822) + t286 * (t201 * (t4174 + t112 * (t4175 + t4177) - t4181) + t211 * t4192 + 0.2500000000e0 * t4195 * t1645 + t112 * (t54 * (t4198 + t4200) + t71 * t4205) - 0.5000000000e0 * t1542 * t1645 - 0.5000000000e0 * t1646 * t1899) + t314 * (t201 * t4192 + t211 * (-t4174 + t112 * (-0.1e1 * t4175 - t4177) + t4181) - 0.2500000000e0 * t4195 * t988 + t112 * (t54 * t4205 + t71 * (-0.1e1 * t4198 - t4200)) + 0.5000000000e0 * t1542 * t988 - 0.5000000000e0 * t1646 * t1917) + t504 * (t112 * (t54 * (-t68 * t3881 + 0.2500000000e0 * t4237) + t71 * t78 * t3881 + 0.2500000000e0 * t4243) + t3933) + t663 * (t112 * (0.5000000000e0 * t4250 - 0.5000000000e0 * t4253) - 0.5000000000e0 * t4257 * t3369 + 0.5000000000e0 * t4260 * t3373 - 0.5000000000e0 * t4263 * t272 + t3882) + t112 * (t54 * (t68 * (t117 * t3709 + t4269 - t462 * m6 * t3961 + t872 + L9 * m6 * (t884 - t887)) + t78 * t4286 + t4198 + t4200) + t71 * (t68 * t4286 + t78 * (t117 * t3728 - 0.1e1 * t4269 + t462 * m6 * t3961 - t3966 + t3970)) - 0.5000000000e0 * m6 * t68 * L9 * t939 + t4175 - 0.1e1 * t751 * t370 - t1024 + L9 * m6 * (-t1027 + t1025)) + t54 * (t68 * t63 * t3982 + t63 * (t78 * t4314 - 0.5000000000e0 * t1786 * t707)) + t71 * (t68 * t63 * t4314 + t63 * (t78 * (t3973 - t895 + t3975 + L9 * m6 * (t3977 + t1468 - t1967)) - 0.5000000000e0 * t264 * t1886)) + t68 * t63 * t4040 + t63 * (-t78 * t4096 + t4340 - 0.1e1 * t1008 + 0.5000000000e0 * t876 * t1006 * t369 + L9 * m6 * (-0.5000000000e0 * t1017 + t1015));
      t4353 = m6 * theta1__dot * t3522;
      t4358 = t54 * (t2376 - 0.1e1 * t2377);
      t4363 = m6 * theta1__dot * t3541;
      t4375 = -0.1e1 * t335 * t245 - 0.1e1 * m5 * t2403;
      t4380 = -t2440;
      t4389 = -t2452;
      t4394 = t286 * (t215 * t3274 + t201 * (t2368 + t4353 + t2361) + t4358 - t2381 + t3073) + t314 * (t215 * t3281 + t211 * (-t2368 + t4363 - t2361) + t71 * t2378) - t215 * t2401 + t339 * t4375 + t68 * (t54 * (t355 * t2037 - t2418 - t2420) + t85 * t4380 - t2443 - t2445) + t4358 + t71 * t78 * (t63 * t2410 + t2418 + t2420) + t2368 - 0.1e1 * t2455 + t85 * t4389 + m6 * theta1__dot * t3603 + theta1__dot * t3609;
      t4396 = t215 * t201;
      t4399 = t2482 + t2484;
      t4405 = t215 * t211;
      t4420 = t71 * t78 * t2544 + t68 * t54 * t2547;
      t4436 = t95 * t2095;
      t4443 = t95 * t3338;
      t4449 = 0.2000000000e1 * t357 * t930;
      t4451 = 0.2000000000e1 * t2251 * t360;
      t4454 = L9 * t2210;
      t4459 = -0.2000000000e1 * t2142 - 0.2000000000e1 * t2140;
      t4477 = t930 * t923 * t3958;
      t4478 = 0.2000000000e1 * t2105;
      t4484 = t95 * (t2123 - t2091);
      t4493 = 0.1e1 * t2107;
      jac__4_8 = t504 * t4394 + t286 * (t4396 * t2463 + t201 * t2470 + t211 * t4399 + t117 * (t2495 + t2496 - t2497 + t1232)) + t314 * (t4405 * t2509 + t201 * t4399 + t211 * t2515 + t117 * (t2518 + t71 * (t2493 - 0.1e1 * t2216))) + t663 * (t223 * t4420 + t349 * t4375 + t68 * (t54 * (t3315 - t2557 + t2559) + t2575 + t110 * t4380) + t71 * t78 * (-0.1e1 * t3315 - t2560 + t2557) + t1055 * t2037 + t110 * t4389) + t215 * (t3651 * t4436 + t3653 * t4436 + t2463) + t223 * (t68 * t54 * t3286 + t1696 * t4443) + t117 * (t68 * (t54 * (t355 * t3386 - t4449 - t4451) + t71 * t354 * t4454 + t85 * t4459 - 0.2000000000e1 * t3045 - 0.2000000000e1 * t3047) + t54 * (t2427 * t4454 + t2216 - t2493) + t71 * (t78 * (t63 * t3401 + t4449 + t4451) + t2615) + t2196 + m6 * t3746 + t3751) + t68 * (t54 * (t4477 + t95 * (t2107 - t4478)) + t71 * t4484 + t95 * (t110 * t4459 + t2137)) + t3653 * t4484 + t71 * t78 * (-0.1e1 * t4477 + t95 * (-t4493 + t4478));
      t4502 = t3058 * t196;
      t4505 = t3010 * t196;
      t4508 = t314 * t276;
      t4526 = 0.1250000000e0 * t223 * t196 * t2336 + 0.6250000000e-1 * t4502 * t2336 - 0.6250000000e-1 * t4505 * t2336 + t4508 * t2139 - 0.6250000000e-1 * t4505 * t930 + t4508 * t930 + t3001 * t234 * t930 - 0.6250000000e-1 * t4502 * t930 + 0.1250000000e0 * t3001 * t196 * t930 - t3161 * t930 / 4 + t3166 * t930 / 4 - t3171 * t930 / 4;
      t4533 = L7 * theta6__dot;
      t4536 = t78 * theta5__dot;
      t4558 = -t3176 * t930 / 2 + t3181 * t930 / 2 + 0.2000000000e1 * t3186 * t930 + 0.2500000000e0 * t3134 * t4533 + 0.2e1 * m5 * t412 * t4536 + 0.2e1 * L7 * t91 * t4536 + 0.2500000000e0 * t3126 * t4533 + t3138 * t2336 / 2 + t3142 * t2336 / 2 - t3134 * t1562 / 2 + t3126 * t1562 / 2 + 0.2000000000e1 * t3130 * t930 + 0.1000000000e1 * t3078 * t60 * t2762;
      t4588 = -0.1000000000e1 * t3064 * t60 * t2762 + 0.1000000000e1 * t3078 * t403 * t930 - 0.1000000000e1 * t3064 * t403 * t930 + t3138 * t930 / 2 - t3142 * t930 / 2 + 0.2500000000e0 * t3181 * t2336 - 0.5000000000e0 * t3001 * t665 - 0.5000000000e0 * t223 * t2088 - 0.2500000000e0 * t3058 * t2088 + 0.2500000000e0 * t3010 * t2088 - t314 * t307 + 0.2500000000e0 * t3058 * t665 + 0.2500000000e0 * t3010 * t665;
      t4593 = cos(phi2 - theta6);
      t4598 = cos(phi2 + theta6);
      t4603 = cos(-theta6 + phi1);
      t4608 = cos(theta6 + phi1);
      t4626 = 0.5000000000e0 * t2211 + t3171 * t2336 / 4 + 0.2500000000e0 * t4593 * t367 * t4533 + 0.2500000000e0 * t4598 * t367 * t4533 - t4603 * t369 * t2336 / 2 + t4608 * t369 * t2336 / 2 + t2809 * t2336 / 4 + t3161 * t2336 / 4 + t3166 * t2336 / 4 + 0.2500000000e0 * t3176 * t2336 + t2809 * t930 / 4 - 0.1000000000e1 * t3151 * t2762 + 0.1000000000e1 * t3156 * t2762;
      jac__4_10 = t4526 + t4558 + t4588 + t4626;
      t4628 = t4363 - t2361;
      t4631 = t2649 + t2650;
      t4633 = 0.1250000000e0 * t196;
      t4640 = 0.1e1 * theta5__dot;
      t4641 = theta4__dot - t4640;
      t4644 = 0.1e1 * t2139;
      t4655 = -0.1e1 * t2442 - 0.1e1 * t2444;
      t4658 = -0.1e1 * theta4__dot - t4640;
      t4667 = t4353 + t2361;
      t4673 = 0.1250000000e0 * theta5__dot;
      t4677 = 0.5000000000e0 * theta6__dot;
      t4678 = 0.5000000000e0 * theta5__dot;
      t4682 = -t214 + phi2 + theta5;
      t4683 = sin(t4682);
      t4691 = phi2 + t214 + theta5;
      t4692 = sin(t4691);
      t4696 = t2485 + t2051;
      t4701 = t3026 * t4628 + t3058 * t2066 + t78 * t4631 + t117 * (m6 * theta1__dot * (-t3743 - t3742 - t4633) + theta1__dot * t3750) + t3078 * (t58 * L6 * t4641 + L7 * L6 * (-t4644 + t2152)) + t314 * (-0.1e1 * t3096 + t2666 + t2074) + t2839 * t4655 + t3064 * (t58 * L6 * t4658 + L7 * L6 * (-t4644 - 0.1e1 * t2152)) + t3082 * t4667 + t3117 * t3031 + t2686 * t2364 + t2693 * t2385 + t3010 * t2066 + t4683 * (m6 * t196 * (t4673 - t2695) + IZ6 * (t4677 - t4678)) + t4692 * (m6 * t196 * (-t4673 - t2695) + IZ6 * (t4678 + t4677)) + t2723 * t2364 + t2730 * t2385 + t3001 * (m6 * t4696 - t2474) + t2702 * t2385;
      t4708 = -0.1e1 * t2436 - 0.1e1 * t2438;
      t4714 = 0.5000000000e0 * t1385;
      t4715 = 0.5000000000e0 * t2735;
      t4718 = t3141 * m6;
      t4722 = t3137 * m6;
      t4727 = 0.2500000000e0 * theta5__dot;
      t4733 = 0.5000000000e0 * t3176 * t692;
      t4735 = 0.5000000000e0 * t3181 * t692;
      t4737 = 0.2000000000e1 * t3186 * t692;
      t4739 = 0.5000000000e0 * t3126 * t3195;
      t4741 = 0.5000000000e0 * t3134 * t3195;
      t4743 = 0.2500000000e0 * t3233 * t245;
      t4745 = 0.2500000000e0 * t3192 * t245;
      t4746 = t3040 * t2385 + t3050 * t4655 + t3104 * t3074 + t3101 * t3074 + t3029 * t4708 + t3110 * t3004 + t2661 * t3004 + t3114 * t3031 + t2835 * t4708 + t4718 * L9 * (-t4714 + t4715) + t4722 * L9 * (t4714 + t4715) + t3150 * t82 * L8 * t4658 + t3170 * t367 * L6 * (-t2826 - t2825 + t4727) - t4733 + t4735 + t4737 + t4739 - t4741 + t4743 - t4745;
      t4748 = t3238 * t245;
      t4750 = 0.2500000000e0 * t3198 * t2412;
      t4752 = 0.2500000000e0 * t3203 * t2412;
      t4755 = 0.5000000000e0 * t2978 * t243 * t245;
      t4758 = 0.5000000000e0 * t2992 * t243 * t245;
      t4760 = t2786 * t357 * t245;
      t4763 = t2782 * t357 * t245;
      t4765 = 0.2500000000e0 * t3208 * t245;
      t4767 = 0.2500000000e0 * t3228 * t245;
      t4768 = t2795 * t593;
      t4770 = t2972 * t593;
      t4773 = 0.2500000000e0 * t2790 * t2412;
      t4775 = 0.2500000000e0 * t2967 * t2412;
      t4777 = 0.2500000000e0 * t3213 * t2412;
      t4779 = 0.2500000000e0 * t3218 * t2412;
      t4780 = t3223 * t245;
      t4783 = 0.2500000000e0 * t2954 * t2412;
      t4785 = 0.2500000000e0 * t2941 * t2412;
      t4787 = 0.2500000000e0 * t2958 * t2412;
      t4788 = t4748 + t4750 - t4752 + t4755 - t4758 - 0.1e1 * t4760 + t4763 - t4765 + t4767 - 0.1e1 * t4768 - 0.1e1 * t4770 + t4773 + t4775 - t4777 + t4779 - 0.1e1 * t4780 - t4783 + t4785 + t4787;
      t4790 = 0.2500000000e0 * t2831 * t2412;
      t4791 = t3147 * t245;
      t4793 = t2814 * t245;
      t4794 = t2982 * t369;
      t4796 = 0.2500000000e0 * t4794 * t245;
      t4797 = t2775 * t369;
      t4799 = 0.2500000000e0 * t4797 * t245;
      t4800 = t2769 * t369;
      t4802 = 0.2500000000e0 * t4800 * t245;
      t4803 = t2986 * t369;
      t4805 = 0.2500000000e0 * t4803 * t245;
      t4807 = 0.2500000000e0 * t2799 * t2412;
      t4809 = 0.2500000000e0 * t2962 * t2412;
      t4810 = -theta6 + theta5;
      t4811 = cos(t4810);
      t4812 = t4811 * t367;
      t4815 = theta6 + theta5;
      t4816 = cos(t4815);
      t4817 = t4816 * t367;
      t4820 = 0.2500000000e0 * L8;
      t4821 = 0.2500000000e0 * L5;
      t4822 = t4820 + t4821;
      t4823 = L9 * t4822;
      t4824 = t2752 * t245;
      t4830 = t4820 - t4821;
      t4831 = L9 * t4830;
      t4832 = t2740 * t245;
      t4837 = t2758 * t245;
      t4843 = t2746 * t245;
      t4850 = -t2633 + 0.2000000000e1 * t2630;
      t4853 = -t4790 - 0.1e1 * t4791 + t4793 - t4796 + t4799 + t4802 - t4805 + t4807 + t4809 + 0.5000000000e0 * t4812 * t1562 + 0.5000000000e0 * t4817 * t1562 + t4824 * t4823 + t2808 * t367 * L6 * (t2826 + t2825 + t4727) + t4832 * t4831 + t3155 * t82 * L8 * t4641 + t4837 * t4823 + t3165 * t367 * L6 * (t2826 - t2825 - t4727) + t4843 * t4831 + t3160 * t367 * L6 * (-t2826 + t2825 - t4727) + t3129 * m6 * t4850;
      jac__4_11 = t4701 + t4746 + t4788 + t4853;
      t4858 = -0.1250000000e0 * t2362 + 0.5000000000e0 * t207;
      t4859 = t117 * t4858;
      t4870 = 0.5000000000e0 * t718 * t1651;
      t4873 = 0.5000000000e0 * t245 * t3319 * t1868;
      t4877 = theta1__dot * t3323;
      t4880 = 0.5000000000e0 * theta4__dot * t55 * t262 + 0.5000000000e0 * t4877 * t988;
      t4885 = t95 * t2547 - t3284 + t665;
      t4894 = 0.5000000000e0 * t245 * t3350 * t1868;
      t4896 = 0.5000000000e0 * t718 * t1634;
      t4901 = -0.5000000000e0 * t2501 * t262 + 0.5000000000e0 * t4877 * t1645;
      t4908 = t117 * t353 * theta1__dot + t4074 * t982;
      t4912 = 0.5000000000e0 * t367 * t3195;
      t4917 = -t1780 + t1386;
      t4936 = 0.2500000000e0 * t245 * t4022;
      t4937 = -t3284 - t4936;
      jac__4_12 = t223 * (t286 * (t201 * t3275 + t211 * t4859) + t314 * (t201 * t4859 + t211 * t2475) + t2473 - t2474) + t286 * (t112 * t4880 + t4870 + t4873) + t215 * (t54 * t78 * t4885 + t71 * t68 * t4885) + t314 * (t112 * t4901 + t4894 - t4896) + t112 * (t54 * (t78 * t4908 * t367 + t2643 + t4912) + t71 * (t68 * t4908 * t367 + t78 * (L9 * m6 * t4917 - t2115) + 0.5000000000e0 * t4877 * t262) - 0.1e1 * t3405 * t262 - t3418 + L9 * m6 * (-t3419 + t1800)) + t54 * (t2336 * t1925 * t577 + t78 * t4937) + t71 * (t68 * t4937 - 0.1e1 * t2336 * t2567 * t577) - t2263;
      t4948 = cos(-theta6 + theta5 - theta4 - theta1 + phi2);
      t4950 = 0.6131250000e0 * t4948 * t367;
      t4952 = cos(-theta6 + theta5 - theta4 + theta1 + phi2);
      t4954 = 0.6131250000e0 * t4952 * t367;
      t4956 = cos(-theta6 + theta5 + theta4 - theta1 + phi2);
      t4958 = 0.6131250000e0 * t4956 * t367;
      t4960 = cos(theta6 + theta5 - theta4 - theta1 + phi2);
      t4962 = 0.6131250000e0 * t4960 * t367;
      t4964 = cos(-theta1 + phi2 - theta6 + theta5);
      t4966 = 0.1226250000e1 * t4964 * t367;
      t4968 = sin(-theta1 + phi2 - theta4 + theta5);
      t4973 = -0.2452500000e1 * t58 - 0.2452500000e1 * t60;
      t4975 = sin(-theta5 + theta1 - theta4);
      t4978 = cos(-theta6 + theta5 + theta4 + theta1 + phi2);
      t4980 = 0.6131250000e0 * t4978 * t367;
      t4982 = cos(theta6 + theta5 - theta4 + theta1 + phi2);
      t4984 = 0.6131250000e0 * t4982 * t367;
      t4986 = cos(theta6 + theta5 + theta4 - theta1 + phi2);
      t4988 = 0.6131250000e0 * t4986 * t367;
      t4990 = cos(-theta1 + phi2 + theta6 + theta5);
      t4992 = 0.1226250000e1 * t4990 * t367;
      t4994 = cos(theta1 + phi2 - theta6 + theta5);
      t4996 = 0.1226250000e1 * t4994 * t367;
      t4997 = -t4950 - t4954 - t4958 + t4962 + t4966 + 0.2452500000e1 * t4968 * t70 + t4975 * t4973 - t4980 + t4984 + t4988 - t4992 - t4996;
      t4999 = sin(-theta1 + phi2 + theta4 + theta5);
      t5003 = sin(theta1 + phi2 - theta4 + theta5);
      t5007 = sin(-theta5 + theta1 + theta4);
      t5009 = -t4973;
      t5011 = sin(theta5 + theta1 - theta4);
      t5014 = cos(theta6 + theta5 + theta4 + theta1 + phi2);
      t5016 = 0.6131250000e0 * t5014 * t367;
      t5018 = sin(theta5 - theta1 + phi2);
      t5023 = 0.4905000000e1 * t58 + 0.4905000000e1 * t60;
      t5025 = sin(theta1 - theta5);
      t5028 = cos(theta1 + phi2 + theta6 + theta5);
      t5030 = 0.1226250000e1 * t5028 * t367;
      t5032 = sin(theta1 + phi2 + theta4 + theta5);
      t5036 = sin(theta5 + theta1 + theta4);
      t5039 = sin(theta5 + theta1 + phi2);
      t5043 = sin(theta1 + theta5);
      t5045 = 0.2452500000e1 * t4999 * t70 + 0.2452500000e1 * t5003 * t70 + t5007 * t4973 + t5011 * t5009 + t5016 - 0.4905000000e1 * t5018 * t70 + t5025 * t5023 + t5030 + 0.2452500000e1 * t5032 * t70 + t5036 * t5009 + 0.4905000000e1 * t5039 * t70 + t5043 * t5023;
      jac__5_2 = t4997 + t5045;
      t5046 = t211 * t3539;
      t5048 = -t3520 + t3543 - t3512;
      t5050 = t211 * t5048 + t215 * t5046 + t3547;
      t5052 = t201 * t3539;
      t5094 = -0.1e1 * t323 + t1299;
      t5103 = t245 * L9 * t4917 - t1384 - t1779;
      t5114 = t245 * t2625 + t1384 + t460;
      t5118 = -m6 * theta1__dot * t4850;
      t5124 = t308 + t657;
      t5125 = theta4__dot * t5124;
      t5131 = (t717 * t2037 + t366) * t70;
      t5136 = 0.4905000000e1 * t64 * t1488 - t1511;
      t5142 = L7 * (t112 * t320 * t367 + t337 * t366);
      jac__5_4 = t504 * (t286 * t5050 + t314 * (t201 * t5048 + t215 * t5052 + t3535 + t3827 + t3828) + t3892 + t3890) + t286 * (t4396 * t95 * t508 + t201 * t95 * (m6 * theta1__dot * t4696 - t507 - t512) + t95 * (t525 + t526 + t530)) + t314 * (t4405 * t95 * t533 + t211 * t95 * (m6 * theta1__dot * t2487 + t507 + t511) + t95 * t542) + t215 * (t95 * (t68 * t54 * t3649 + t78 * t1360 - t506 + t507) + t3812) + t223 * (t3913 + t95 * (t68 * t54 * t3699 + t78 * t1370) + t1979 * t1303 + t117 * (t78 * t71 * t5094 + t1358 - t3648)) + t3943 + t95 * (t68 * (t54 * (m6 * theta1__dot * t4850 + t63 * t5103 + t1393 - t3767 + t603) + t625 - t85 * t1351 + t3781 - t1413 + t1418 + t1419) + t78 * t71 * (t63 * t5114 - t1393 - t1398 + t3767 + t5118) + t525 - t512 + m6 * theta1__dot * t2664 + theta1__dot * t5125) + t68 * t117 * (t54 * (t1320 + t394 - t1332 + t5131) + t71 * t5136 + t1348 + t1352 + t5142) + t117 * (t78 * (t54 * t5136 + t71 * (t1828 - t3718 - t4057 - 0.1e1 * t371 * t581 + t1332) + t3955) + t54 * t3838 - t3816 - t3817 + m6 * (t997 * theta1__dot__dot + t3818) + t280 + t1367);
      t5159 = t201 * t3516;
      t5165 = -t3795 + t1183;
      t5169 = t117 * t5094;
      t5170 = t211 * t5169;
      t5173 = t681 * t243;
      t5175 = 0.5000000000e0 * t1 * t243;
      t5183 = t320 * t64;
      t5193 = 0.2000000000e1 * t5183 * t1868 + t117 * (m6 * theta1__dot * (-0.2000000000e1 * t2051 - 0.2500000000e0 * t1038) + t323);
      t5195 = t681 * t262;
      t5197 = 0.5000000000e0 * t1 * t262;
      t5201 = t1 * t269;
      t5203 = 0.2000000000e1 * t681 * t269;
      t5213 = -0.4000000000e1 * t371 * t117 * t269 + 0.2000000000e1 * t5183 * t1886;
      t5224 = t201 * t5169;
      t5260 = 0.2500000000e0 * t3584 + 0.2500000000e0 * t3586;
      t5262 = 0.5000000000e0 * t3564;
      t5263 = 0.5000000000e0 * t3566;
      t5266 = 0.5000000000e0 * t3573;
      t5268 = -t5266 - 0.5000000000e0 * t3570;
      t5270 = 0.5000000000e0 * t3578;
      t5274 = -t5260;
      t5298 = t95 * t1300 + t3812;
      t5310 = 0.5000000000e0 * t3671 - 0.2500000000e0 * t3669 - 0.2500000000e0 * t3673;
      t5326 = 0.5000000000e0 * t681 * t369 + 0.2500000000e0 * t1 * t369;
      t5330 = 0.2500000000e0 * t1 * t1088;
      t5338 = 0.9810000000e1 * t1210 * t1509;
      t5340 = 0.5000000000e0 * t1 * t360;
      t5346 = 0.5000000000e0 * t231 * t112 * theta4__dot__dot;
      t5348 = 0.5000000000e0 * t1 * t357;
      t5354 = t95 * t1319;
      t5355 = t117 * t5114 - t1046 + t5354;
      t5361 = t63 * t5355 + t117 * (-t1393 - t1398 + t3767 + t5118) + t95 * (t394 - t1332 + t5131) + t1063;
      jac__5_5 = t286 * (t663 * (t215 * t5159 + t201 * (t3520 + t3524 + t3512) + t3533 - t3535 + t3536) + t215 * (t201 * (m6 * t5165 + t3512 - t846) + t5170) + t201 * (t63 * m6 * (t5173 - t5175) + m6 * (t3542 - t1184 - t1183) - t3512 + t846) + t211 * t5193 + t54 * (t63 * m6 * (t5195 - t5197) + m6 * (t5201 - t5203)) + t71 * t5213 + m6 * (-0.1e1 * t276 * t681 + 0.5000000000e0 * t1 * t276) + t3828 + t1229) + t314 * (t663 * t5050 + t215 * (t5224 + t211 * (-m6 * t5165 - t3512 + t846)) + t201 * t5193 + t211 * (t63 * m6 * (-0.1e1 * t5173 + t5175) + m6 * (t3523 + t1183 + t733) - t846 + t3512) + t54 * t5213 + t71 * (t63 * m6 * (-0.1e1 * t5195 + t5197) + m6 * (t5203 - 0.1e1 * t5201)) + t117 * (-0.2000000000e1 * t526 - theta1__dot * theta4__dot * t1292)) + t663 * (t68 * (t54 * (t63 * t5260 - t5262 - t5263) + t85 * t5268 - t5270 - 0.5000000000e0 * t3580) + t78 * t71 * (t63 * t5274 + t5262 + t5263)) + t215 * (t68 * (t54 * t1169 + t71 * t3853) + t78 * (t54 * t3853 + t827)) + t223 * (t504 * (t68 * t54 * t3516 + t78 * t71 * t3539) + t68 * (t54 * t1250 + t71 * t5298) + t78 * (t54 * t5298 + t865)) + t504 * (t68 * (t54 * t5310 - t110 * t5268 - 0.2500000000e0 * t3680) - t78 * t71 * t5310) + t68 * (t54 * (t63 * (-t4340 + t85 * m6 * t5326 + t1009 + m6 * (t5330 + L9 * (-t1482 + t1011))) + t5338 + t85 * m6 * (-t1495 - t5340) - t1503 + t5346 + m6 * (-t5348 - t1504 + t1040)) + t71 * t5361 - 0.1e1 * t1066 + t95 * t1561 + t85 * (m6 * (-0.5000000000e0 * t1 * t403 - t1545) - t1548 - t5266) + t1551 + t1068 + m6 * (-0.5000000000e0 * L7 * t3577 - t1552) - t5270 - t1555) + t78 * (t54 * t5361 + t71 * (t63 * (t4340 - t85 * m6 * t5326 - t1009 + m6 * (-t5330 + L9 * (t1017 - t1011))) - t5338 + t85 * m6 * (t5340 + t907) + t1034 - t5346 + m6 * (t1035 + t5348 - t1040)) - 0.1e1 * t1646 * t1886 + t117 * (t1412 + t1417 + t1413 - t1418 - t1419) + t95 * (t1348 + t1352 + t5142) + t1100);
      t5403 = 0.6250000000e-1 * t1;
      t5404 = t5403 - t840;
      t5407 = t196 * m6 * t5404 - t3512 + t846;
      t5408 = t211 * t5407;
      t5439 = t95 * t328;
      t5457 = t1 * L8;
      t5460 = m6 * (t897 - 0.2500000000e0 * t5457);
      t5463 = t320 * t3323;
      t5464 = t5463 * t1645;
      t5468 = m6 * (t943 - 0.2500000000e0 * t3887);
      t5486 = t5463 * t988;
      t5493 = t68 * t5260;
      t5518 = t875 + 0.2500000000e0 * t3572;
      t5519 = m6 * t5518;
      t5520 = t375 * t5519;
      t5521 = 0.2500000000e0 * t3577;
      t5525 = -t4340 + t5520 + t1009 + L9 * m6 * (t1011 - t1482 + t5521);
      t5527 = t371 * t1886;
      t5549 = t5183 * t2034;
      t5550 = L9 * t225;
      t5551 = t63 * t117;
      t5552 = m6 * t5551;
      t5554 = 0.5000000000e0 * t5552 * t5550;
      t5557 = L9 * t713;
      t5558 = m6 * t3374;
      jac__5_6 = t223 * (t286 * (t663 * t5046 + t5224 + t5408) + t314 * (t211 * t117 * t1300 + t201 * t5407 + t663 * t5052) + t54 * (t68 * t117 * t547 + t78 * t1732) + t71 * (t78 * t117 * t550 + t68 * t1732) + t5169 + t4157 + t832 - t1748) + t215 * (t504 * t3912 + t54 * (t68 * (t117 * t566 + t95 * t325) + t78 * t1848) + t71 * (t68 * t1848 + t78 * (t117 * t561 + t5439)) + t95 * t547 + t1736 - t1735) + t286 * (t663 * (0.2500000000e0 * t3679 * t988 + 0.2500000000e0 * t3679 * t1634) - 0.1e1 * t1763 * t201 * t117 * t243 + t211 * t113 * t5460 + t112 * (-0.1e1 * t5464 + t74 * t5468)) + t314 * (t663 * (0.2500000000e0 * t3679 * t1645 + 0.2500000000e0 * t3679 * t1651) + t201 * t113 * t5460 + t1763 * t211 * t117 * t243 + t112 * (t62 * t5468 + t5486)) + t663 * t112 * (t54 * t78 * t5260 + t71 * t5493) + t504 * (t112 * (-0.2500000000e0 * t4252 * t3362 - 0.2500000000e0 * t4249 * t2606) + 0.2500000000e0 * t1 * t1806 * t272 + 0.2500000000e0 * t4260 * t3369 + 0.2500000000e0 * t4257 * t3373) + t112 * (t54 * (t68 * (t117 * t5103 + t95 * t1669 + t1046) + t78 * t5525 - 0.1e1 * t5527 + t4019 * t262) + t71 * (t68 * t5525 + t78 * t5355 - 0.5000000000e0 * t876 * L9 * t58) + t217 * t1698 * t1886 - 0.1e1 * t751 * t78 * t262 - 0.1e1 * t371 * t1868 + t4019 * t243) + t54 * (t68 * (t5549 + t5554) - 0.5000000000e0 * t5558 * t5557 - 0.1e1 * t931 * t272 - 0.1e1 * t1646 * t1541) + t71 * (-0.5000000000e0 * t1825 * t5557 + t78 * (-0.1e1 * t5549 - t5554) - t941) + t68 * (0.5000000000e0 * t5552 * t1823 + t5183 * t1541) - 0.1e1 * t1646 * t2034 - 0.1e1 * t2195 * t716 - 0.5000000000e0 * t5558 * t2022;
      t5585 = t2696 + t2679;
      t5592 = -m6 * t2706 + t2708;
      t5599 = -t3020;
      t5611 = t2703 + t2723 * (m6 * t196 * t5585 - t2043 - t2207) + t2712 * t5592 + t3006 * t3031 + t117 * (t2665 + t5125) + t3078 * t3062 + t3033 * t3004 + t3022 * t5599 + t3082 * t3024 + t3088 * t5599 + t3058 * t3031 + t3091 * t3062 + t3085 * t3004 + t2693 * (-m6 * t196 * t5585 + t2043 + t2207);
      t5617 = -t2696 + t2679;
      t5623 = t3016 * t3052 + t3110 * t3112 + t2677 * t3069 + t2661 * t3112 + t3107 * t3076 + t2730 * (m6 * t196 * t5617 + t2043 - t2207) + t3094 * t5599 - t2806 - t2811 - t2816 - t2860 + t2865 + t2870 - t2875 + t2880;
      t5632 = -t2885 - t2890 - t2895 + t2900 - t2905 + t2910 - t2915 - t2920 - t2926 - t2931 + t2936 + t2782 * m6 * (-0.1e1 * t2630 + t2779) + t2786 * m6 * (-t2779 + t2630) + t2980;
      t5633 = theta4__dot * L6;
      t5637 = t3029 * t1070;
      t5647 = 0.2500000000e0 * t3195;
      t5648 = 0.2500000000e0 * t4533;
      t5650 = L9 * (-t5647 + t5648);
      t5657 = -t4822;
      t5660 = L9 * (theta4__dot * t5657 + t1701);
      t5663 = t2994 + t2972 * t5633 + t2854 * t2820 + t2846 * t2947 + t5637 * t5633 + 0.2500000000e0 * t4803 * t692 - 0.2500000000e0 * t4800 * t692 - 0.2500000000e0 * t4797 * t692 + 0.2500000000e0 * t4794 * t692 + t3041 + t2957 * m6 * t5650 + t2940 * m6 * t5650 + t2961 * m6 * t5650 + t2759 * t5660 + t2753 * t5660;
      t5666 = -t5647 - t5648;
      t5667 = L9 * t5666;
      t5671 = -L9 * t5666;
      t5677 = t2966 * m6 * t5667 + t2830 * m6 * t5671 + t2789 * m6 * t5667 + t3128 - 0.1e1 * t3131 - t3136 - t3140 + t3144 + t3148 + t3153 - t3158 + t3163 - t3168 + t3173;
      t5680 = t2381 + t2382;
      t5687 = t2075 + t2076;
      t5693 = -t3178 + t3183 + t3187 + t3001 * (t2372 - t2361) + t314 * t5680 + t3071 * t2674 + t78 * t4655 + t3054 * t3014 + t3064 * t3076 + t3026 * t3080 + t3101 * t5687 + t3104 * t5687 + t3043 * t3031 + t3010 * t3031 + t3120 * t5599;
      t5703 = -t4830;
      t5706 = L9 * (theta4__dot * t5703 - t1701);
      t5713 = t3117 * t2659 + t3114 * t2659 + t2716 * t5592 + t2686 * (-m6 * t196 * t5617 - t2043 + t2207) + t2747 * t5706 + t2741 * t5706 + t2953 * m6 * t5671 + t2798 * m6 * t5650 + t3194 - t3200 + t3205 + t3210 + t3215 - t3220;
      t5717 = t3050 * t1070;
      t5719 = t2835 * t1070;
      t5721 = t2839 * t1070;
      t5724 = t3224 - t3230 - t3235 - 0.1e1 * t3239 + t3244 - t3249 + t3254 - t3259 + t3264 + t2795 * t5633 + t2823 * t2851 + t5717 * t1385 + t5719 * t5633 + t5721 * t1385 + t2950 * t2843;
      jac__5_8 = t5611 + t5623 + t5632 + t5663 + t5677 + t5693 + t5713 + t5724;
      t5729 = t4733 - t4735 - t4737 - t4739 + t4741 - t4743 + t4745 - 0.1e1 * t4748 - t4750 + t4752 - t4755 + t4758 + t4760 - 0.1e1 * t4763 + t4765 - t4767 + t4768 + t4770 - t4773;
      t5735 = -t4775 + t4777 - t4779 + t4780 + t4783 - t4785 - t4787 + t4790 + t4791 - 0.1e1 * t4793 + t4796 - t4799 - t4802 + t4805 - t4807 - t4809 + t3129 * t2635 + t3110 * t3031 + t2661 * t3031 + t3082 * t4628;
      t5756 = L9 * t5703;
      t5765 = L9 * t5657;
      t5772 = t3058 * t2046 + t3010 * t2046 + t2686 * t2385 + t117 * (m6 * theta1__dot * (t234 + t276 + t4633) + theta1__dot * t5124) - t78 * t4631 + t3001 * (t2488 + t2474) - 0.5000000000e0 * t4811 * t4533 * t367 + 0.5000000000e0 * t4816 * t4533 * t367 + t4843 * t5756 + t5637 * t593 + t3064 * t1070 * t5633 + t5717 * t382 + t4832 * t5756 + t5719 * t593 + t5721 * t382 + t4837 * t5765 + t4824 * t5765 - 0.2500000000e0 * t3166 * t692 - 0.2500000000e0 * t2809 * t692;
      t5780 = -t4714 + t1387;
      t5805 = 0.2500000000e0 * t3171 * t692 + 0.2500000000e0 * t3161 * t692 + t3151 * t5633 - 0.1e1 * t3156 * t5633 + t4722 * L9 * t5780 - t4718 * L9 * t5780 + t2693 * t2364 + t3078 * (-0.1e1 * t2153 - 0.1e1 * t2155) + t314 * (-t2529 - 0.1e1 * t2666 + t3096) + t3026 * t4667 + t3117 * t3004 + t3114 * t3004 + t2730 * t2364 + t2723 * t2385 + t4692 * t2480 + t4683 * t2480 + t3040 * t2364 + t2702 * t2364 + t3101 * t5680 + t3104 * t5680;
      jac__5_10 = t5729 + t5735 + t5772 + t5805;
      jac__5_11 = (t223 * (IZ6 - 0.25e0 * t203) + (t54 * L7 + L8) * m6 * t113) * theta6__dot;
      t5825 = t2367 - t2542;
      t5829 = t2239 - 0.1e1 * t2049;
      t5832 = t4074 * t367;
      t5836 = t2366 * t1886;
      t5841 = -0.1e1 * t2367 + t2542;
      t5844 = theta4__dot * t1806;
      t5845 = t5844 * t272;
      jac__5_12 = t215 * (t54 * (t68 * t117 * t2544 + t78 * t2243) + t68 * t2244 + t825 * t2548) + t223 * t4885 + t54 * (t5832 * t112 * L7 + t68 * t117 * t5825 + t78 * t5829) + t68 * (t71 * t5829 + t5836) + t825 * t71 * t5841 - 0.1e1 * t5845 - 0.1e1 * t2149 * t988 + t5832 * L8 * t112;
      t5856 = cos(theta6 + theta1 + theta4);
      t5862 = cos(theta6 + theta1 - theta4);
      t5864 = cos(-theta6 + theta1 + theta4);
      t5866 = cos(-theta4 + theta1 - theta6);
      t5867 = 0.5e0 * t5014 + 0.5e0 * t4956 + 0.5e0 * t4982 + 0.5e0 * t4978 - t5856 + 0.5e0 * t4960 + 0.5e0 * t4948 + 0.5e0 * t4986 + 0.5e0 * t4952 + t5862 - t4990 - t4964 + t5028 + t4994 + t5864 - t5866;
      jac__6_2 = 0.122625e1 * t5867 * t367;
      t5869 = L7 * t204;
      t5870 = sin(t2788);
      t5873 = 0.2500000000e0 * t5870 * t367 * t5869;
      t5874 = sin(t2965);
      t5877 = 0.2500000000e0 * t5874 * t367 * t5869;
      t5880 = -0.6250000000e-1 * t3511 + 0.1562500000e-1 * t3514;
      t5881 = cos(t3119);
      t5882 = t5881 * t5880;
      t5885 = 0.3125000000e-1 * t321 - 0.1250000000e0 * t323;
      t5886 = cos(t3116);
      t5888 = cos(t3039);
      t5890 = cos(t2701);
      t5892 = -t5885;
      t5893 = cos(t3113);
      t5900 = t203 * theta1__dot * (t2696 - t2680) + theta1__dot * (t2192 - t2043);
      t5901 = cos(t2722);
      t5902 = t5901 * t5900;
      t5905 = -0.3750000000e0 * t3511 + 0.9375000000e-1 * t3514;
      t5907 = cos(2 * t2991);
      t5909 = cos(t3005);
      t5911 = sin(t2797);
      t5914 = 0.2500000000e0 * t5911 * t367 * t5869;
      t5915 = sin(t2960);
      t5918 = 0.2500000000e0 * t5915 * t367 * t5869;
      t5919 = sin(t2977);
      t5923 = -t5873 - t5877 + t5882 + t5886 * t5885 + t5888 * t1140 + t5890 * t210 + t5893 * t5892 + t5902 + t5907 * t5905 + t5909 * t3539 + t5914 + t5918 + 0.5000000000e0 * t5919 * t243 * t246;
      t5924 = sin(t2991);
      t5928 = sin(t3206);
      t5930 = t5928 * t243 * t371;
      t5932 = sin(t3231);
      t5934 = t5932 * t243 * t371;
      t5936 = L7 * t320;
      t5937 = sin(t3196);
      t5939 = t5937 * t367 * t5936;
      t5941 = sin(t3211);
      t5943 = t5941 * t367 * t5936;
      t5945 = sin(t2985);
      t5948 = 0.2500000000e0 * t5945 * t369 * t371;
      t5949 = sin(t3226);
      t5951 = t5949 * t243 * t371;
      t5953 = sin(t3190);
      t5955 = t5953 * t243 * t371;
      t5957 = sin(t2774);
      t5960 = 0.2500000000e0 * t5957 * t369 * t371;
      t5961 = sin(t2768);
      t5964 = 0.2500000000e0 * t5961 * t369 * t371;
      t5965 = sin(t2981);
      t5968 = 0.2500000000e0 * t5965 * t369 * t371;
      t5969 = sin(t3201);
      t5971 = t5969 * t367 * t5936;
      t5973 = sin(t3216);
      t5975 = t5973 * t367 * t5936;
      t5977 = 0.5000000000e0 * t5924 * t243 * t246 - 0.1250000000e0 * t5930 - 0.1250000000e0 * t5934 - 0.1250000000e0 * t5939 - 0.1250000000e0 * t5943 - t5948 - 0.1250000000e0 * t5951 - 0.1250000000e0 * t5955 - t5960 + t5964 + t5968 - 0.1250000000e0 * t5971 - 0.1250000000e0 * t5975;
      t5979 = sin(t2881);
      t5982 = 0.6250000000e-1 * t5979 * t243 * t3513;
      t5983 = sin(t2861);
      t5986 = 0.6250000000e-1 * t5983 * t367 * t3887;
      t5988 = sin(phi2 + theta6 - t503);
      t5992 = 0.1250000000e0 * theta4__dot;
      t5993 = t4673 - t5992;
      t5995 = cos(t2710);
      t5996 = t5995 * t203;
      t5998 = 0.2500000000e0 * t1562;
      t5999 = 0.1250000000e0 * t3195;
      t6001 = theta1__dot * (-t5998 - t5999);
      t6002 = sin(t2956);
      t6007 = cos(t2714);
      t6009 = t6007 * t203 * theta1__dot * (t4673 + t5992);
      t6011 = theta1__dot * (t5998 - t5999);
      t6012 = sin(t2829);
      t6016 = sin(t2852);
      t6017 = t6016 * t367;
      t6019 = 0.2500000000e0 * t1385;
      t6020 = t2736 - t6019;
      t6021 = theta1__dot * t6020;
      t6022 = sin(t2751);
      t6024 = t6022 * t367 * t6021;
      t6025 = 0.1250000000e0 * t366;
      t6026 = 0.1250000000e0 * t225;
      t6027 = t6025 + t6026;
      t6028 = m6 * t6027;
      t6030 = t2740 * L9 * t6028;
      t6033 = t2746 * L9;
      t6037 = 0.1250000000e0 * t2786 * t196 * t195;
      t6040 = 0.1250000000e0 * t2782 * t196 * t195;
      t6041 = -t5982 - t5986 - 0.6250000000e-1 * t5988 * t367 * t3887 + t5996 * theta1__dot * t5993 + t6002 * t367 * t6001 + t6009 + t6012 * t367 * t6011 + t6017 * t1 * t2819 + t6024 + t6030 - t6033 * m6 * t6027 + t6037 + t6040;
      t6042 = t6025 - t6026;
      t6043 = m6 * t6042;
      t6045 = t2752 * L9 * t6043;
      t6048 = t2758 * L9;
      t6058 = t6045 - t6048 * m6 * t6042 + t4950 - t4954 - t4958 + t4962 + t4980 - t4984 - t4988 + t5016 - 0.1226250000e1 * t5862 * t367 - 0.1226250000e1 * t5856 * t367 + 0.1226250000e1 * t5866 * t367 + 0.1226250000e1 * t5864 * t367;
      t6061 = cos(t2729);
      t6062 = t6061 * t5900;
      t6063 = cos(t2660);
      t6065 = cos(t3109);
      t6067 = cos(t3087);
      t6069 = -t5880;
      t6070 = cos(t3021);
      t6071 = t6070 * t6069;
      t6072 = -t2680 - t2696;
      t6075 = t2192 + t2043;
      t6077 = t203 * theta1__dot * t6072 + theta1__dot * t6075;
      t6078 = cos(t2692);
      t6080 = cos(t3093);
      t6082 = cos(t3084);
      t6084 = cos(t3042);
      t6086 = cos(t2685);
      t6088 = cos(t3032);
      t6092 = cos(2 * t2977);
      t6097 = t6062 + t6063 * t5892 + t6065 * t5885 + t6067 * t5880 + t6071 + t6078 * t6077 + t6080 * t6069 + t6082 * t3539 + t6084 * t3539 + t6086 * t6077 + t6088 * t3539 - t6092 * t5905 - 0.1250000000e0 * t2953 * t262 * t195;
      t6099 = sin(-t503 + phi2 - theta6);
      t6104 = 0.1250000000e0 * t4797 * t195;
      t6106 = 0.1250000000e0 * t4803 * t195;
      t6108 = 0.1250000000e0 * t4794 * t195;
      t6111 = 0.1250000000e0 * t2966 * t262 * t195;
      t6114 = 0.1250000000e0 * t2961 * t262 * t195;
      t6117 = 0.1250000000e0 * t2789 * t262 * t195;
      t6120 = 0.1250000000e0 * t2798 * t262 * t195;
      t6122 = 0.1250000000e0 * t4800 * t195;
      t6133 = sin(-theta6 + phi1 + t503);
      t6137 = -0.6250000000e-1 * t6099 * t367 * t3887 + t6104 + t6106 - t6108 + t6111 - t6114 - t6117 + t6120 - t6122 + 0.1250000000e0 * t2830 * t262 * t195 - 0.1250000000e0 * t2957 * t262 * t195 + 0.1250000000e0 * t2940 * t262 * t195 + 0.2500000000e0 * t6133 * t369 * t3513;
      t6140 = sin(theta6 + phi1 + t503);
      t6144 = sin(t3255);
      t6146 = t6144 * t367 * t3887;
      t6148 = sin(t3245);
      t6150 = t6148 * t367 * t3887;
      t6152 = sin(t2922);
      t6155 = 0.6250000000e-1 * t6152 * t367 * t3887;
      t6156 = sin(t3250);
      t6158 = t6156 * t367 * t3887;
      t6160 = sin(t3260);
      t6162 = t6160 * t367 * t3887;
      t6164 = sin(t2906);
      t6166 = t6164 * t369 * t3513;
      t6168 = sin(t3240);
      t6170 = t6168 * t369 * t3513;
      t6172 = sin(t2891);
      t6174 = t6172 * t369 * t3513;
      t6176 = sin(t2927);
      t6179 = 0.6250000000e-1 * t6176 * t367 * t3887;
      t6180 = sin(t2866);
      t6183 = 0.6250000000e-1 * t6180 * t367 * t3887;
      t6184 = sin(t2802);
      t6186 = t6184 * t369 * t3513;
      t6188 = sin(t2876);
      t6191 = 0.6250000000e-1 * t6188 * t243 * t3513;
      t6192 = -0.2500000000e0 * t6140 * t369 * t3513 + 0.1250000000e0 * t6146 - 0.1250000000e0 * t6150 - t6155 + 0.1250000000e0 * t6158 - 0.1250000000e0 * t6162 + 0.1250000000e0 * t6166 + 0.1250000000e0 * t6170 + 0.1250000000e0 * t6174 + t6179 + t6183 + 0.1250000000e0 * t6186 + t6191;
      t6193 = sin(t2886);
      t6196 = 0.6250000000e-1 * t6193 * t243 * t3513;
      t6198 = sin(t503 + phi2 + theta6);
      t6203 = sin(t503 + phi2 - theta6);
      t6210 = sin(-theta6 + t503);
      t6213 = sin(t2939);
      t6216 = sin(t2952);
      t6222 = sin(theta6 + t503);
      t6225 = -t2736 - t6019;
      t6226 = theta1__dot * t6225;
      t6227 = sin(t2757);
      t6228 = t6227 * t367;
      t6231 = sin(t2821);
      t6232 = t6231 * t367;
      t6235 = sin(t2948);
      t6236 = t6235 * t367;
      t6238 = sin(t2739);
      t6240 = t6238 * t367 * t6226;
      t6241 = sin(t2745);
      t6242 = t6241 * t367;
      t6245 = sin(t2844);
      t6246 = t6245 * t367;
      t6248 = sin(t2932);
      t6251 = 0.6250000000e-1 * t6248 * t243 * t3513;
      t6252 = t6196 + 0.6250000000e-1 * t6198 * t367 * t3887 + 0.6250000000e-1 * t6203 * t367 * t3887 + t6210 * t367 * t1 * (t2817 + t4821) + t6213 * t367 * t6011 + t6216 * t367 * t6001 + t6222 * t367 * t1 * (t2817 - t4821) + t6228 * t6226 + t6232 * t1 * t2850 + t6236 * t1 * t2946 + t6240 + t6242 * t6021 + t6246 * t1 * t2842 - t6251;
      jac__6_4 = t5923 + t5977 + t6041 + t6058 + t6097 + t6137 + t6192 + t6252;
      t6257 = -0.3125000000e-1 * t1 + 0.6250000000e-1 * t681;
      t6260 = 0.1250000000e0 * t3511;
      t6262 = cos(t3009);
      t6264 = cos(t4682);
      t6266 = cos(t4691);
      t6273 = -t203 * theta1__dot * t6072 - theta1__dot * t6075;
      t6278 = 0.6250000000e-1 * t321 - 0.2500000000e0 * t323;
      t6280 = -t6278;
      t6283 = 0.3125000000e-1 * t3514 - t6260;
      t6286 = t5873 - t5877 + t5882 + t5902 + t6262 * (t196 * m6 * t6257 + t6260 - t685) + t6264 * t671 + t6266 * t671 + t6078 * t6273 + t6086 * t6273 + t6065 * t6278 + t6063 * t6280 + t6084 * t6283 + t5886 * t6280;
      t6295 = t6080 * t5880 + t6067 * t6069 - t5914 + t5918 + 0.2500000000e0 * t5930 + 0.2500000000e0 * t5934 + 0.2500000000e0 * t5939 + 0.2500000000e0 * t5943 - t5948 - 0.2500000000e0 * t5951 - 0.2500000000e0 * t5955 - t5960 - t5964 - t5968;
      t6299 = 0.6250000000e-1 * L8;
      t6300 = 0.6250000000e-1 * L5;
      t6302 = t1 * (t6299 + t6300);
      t6305 = t1 * (-t6299 + t6300);
      t6309 = -0.2500000000e0 * t5971 - 0.2500000000e0 * t5975 + t5982 + t5986 + t6009 + t6024 + t6030 + t6037 - t6040 + t6045 + t6232 * t6302 + t6236 * t6305 + t6246 * t6305 + t6017 * t6302;
      t6319 = theta4__dot__dot * m6;
      t6338 = cos(t2999);
      t6342 = -t6242 * theta1__dot * t6020 - t5996 * theta1__dot * t5993 - t6228 * theta1__dot * t6225 - 0.2500000000e0 * t3137 * t243 * t6319 + 0.2500000000e0 * t3141 * t243 * t6319 - 0.2500000000e0 * t4817 * t746 + 0.2500000000e0 * t4812 * t746 - 0.1250000000e0 * t3171 * t6319 + 0.1250000000e0 * t3161 * t6319 - 0.1250000000e0 * t3166 * t6319 + 0.1250000000e0 * t2809 * t6319 - 0.2500000000e0 * t6338 * t203 * t668 - t4950 + t4954;
      t6345 = -t6283;
      t6347 = t6088 * t6345 - t4958 - t4962 + t4966 + t4980 + t4984 - t4988 + t4992 + t4996 + t5016 + t5030 + t6062 + t6071;
      t6353 = t5909 * t6345 + t6082 * t6283 + t5893 * t6278 + t6104 + t6106 + t6108 + t6111 - t6114 + t6117 - t6120 + t6122 - 0.6250000000e-1 * t6146 + 0.6250000000e-1 * t6150 + t6155;
      t6365 = cos(t3057);
      t6369 = 0.6250000000e-1 * t3572 + 0.1250000000e0 * t874;
      t6370 = m6 * t6369;
      t6371 = sin(t3169);
      t6374 = 0.6250000000e-1 * t6158 - 0.6250000000e-1 * t6162 - 0.6250000000e-1 * t6166 + 0.6250000000e-1 * t6170 - 0.6250000000e-1 * t6174 + t6179 + t6183 + 0.6250000000e-1 * t6186 + t6191 + t6196 + t6240 + t6251 + t6365 * (-t196 * m6 * t6257 - t6260 + t685) + t6371 * L9 * t6370;
      t6375 = 0.1250000000e0 * t3577;
      t6376 = 0.2500000000e0 * t1010;
      t6378 = 0.5000000000e0 * L8 * t668;
      t6381 = sin(t3056);
      t6386 = sin(t3008);
      t6390 = 0.2500000000e0 * t896;
      t6391 = -0.1250000000e0 * t5457 + t6390;
      t6392 = m6 * t6391;
      t6393 = sin(t3179);
      t6397 = -m6 * t6369;
      t6398 = sin(t3159);
      t6402 = sin(t3174);
      t6405 = sin(t2807);
      t6409 = sin(t3164);
      t6413 = 0.2500000000e0 * t942;
      t6414 = -0.1250000000e0 * t3887 + t6413;
      t6415 = m6 * t6414;
      t6416 = sin(t3132);
      t6419 = sin(t3124);
      t6425 = L7 * t668;
      t6426 = sin(t4810);
      t6430 = sin(t4815);
      t6434 = t6381 * L9 * m6 * (t6375 + t6376 - t6378) + t6386 * L9 * m6 * (t6375 + t6376 + t6378) + t6393 * L9 * t6392 + t6398 * L9 * t6397 + t6033 * t6028 + t6402 * L9 * t6392 + t6405 * L9 * t6397 + t6048 * t6043 + t6409 * L9 * t6370 + t6416 * L9 * t6415 + t6419 * L9 * t6415 - 0.2500000000e0 * t3129 * t196 * t6319 - 0.5000000000e0 * t6426 * t367 * t6425 + 0.5000000000e0 * t6430 * t367 * t6425;
      jac__6_5 = t6286 + t6295 + t6309 + t6342 + t6347 + t6353 + t6374 + t6434;
      t6455 = m6 * t201;
      t6463 = m6 * t211;
      t6484 = t5551 * t243;
      t6514 = t5439 - 0.5000000000e0 * t669 + 0.2000000000e1 * t666;
      t6542 = t5521 + t1011;
      t6550 = t117 * (t1982 * t320 + t1384 + t460) + t5354 - t1046;
      t6576 = t1635 * t1868;
      t6582 = m6 * t112 * t117;
      t6585 = t693 * t581 - 0.5000000000e0 * t6582 * t5550;
      jac__6_6 = t215 * (t663 * (t286 * t5159 + t314 * t5046 + t3550 - t3551) + t286 * (t201 * (-t196 * m6 * t5404 + t3512 - t846) + t5170) + t314 * (t5224 + t5408) + t4164 + t196 * m6 * (t5403 + t1839 - t840) - t3512 - t4165 + t846) + t663 * (t286 * (0.1250000000e0 * t1 * t6455 * t244 + 0.1250000000e0 * t3527 * t1645) + t314 * (-0.1250000000e0 * t1 * t6463 * t244 - 0.1250000000e0 * t3527 * t988) + t63 * (t54 * (t5493 + 0.1250000000e0 * t4237) + t71 * t78 * t5274 + 0.1250000000e0 * t4243) - 0.2500000000e0 * t3600) + t286 * (t201 * t226 * t6392 + 0.5000000000e0 * t320 * t6463 * t6484 + t63 * (t62 * t6415 + 0.5000000000e0 * t5486)) + t314 * (0.5000000000e0 * t320 * t6455 * t6484 - t211 * t226 * m6 * t6391 + t63 * (0.5000000000e0 * t5464 - t74 * m6 * t6414)) + t223 * (t504 * t3665 + t54 * (t68 * t117 * t4163 + t78 * t6514) + t71 * (t78 * t117 * t4152 + t68 * t6514)) + t504 * (t63 * (-0.2500000000e0 * t4250 + 0.2500000000e0 * t4253) - 0.2500000000e0 * t3513 * t68 * t112 * t3369 + 0.2500000000e0 * t3513 * t112 * t78 * t3373 - 0.2500000000e0 * t4263 * t263 + t112 * t5274) + t63 * (t54 * (t68 * (L9 * m6 * t6542 + t1009 - t4340 + t5520) + t78 * t6550 + t4035 + L9 * m6 * (t6413 + t1533 + 0.3750000000e0 * t3887)) + t71 * (t68 * t6550 + t78 * (-L9 * m6 * t6542 - t375 * m6 * t5518 - t1009 + t4340) - t4095 - t4093 + 0.5000000000e0 * t5527) + t3973 + L9 * m6 * (t1468 + t6390 + 0.3750000000e0 * t5457)) + t54 * (t68 * (-t5346 - 0.1e1 * t6576) + t78 * t6585) + t71 * (t68 * t6585 + t78 * (t5346 + t6576)) + t68 * (-0.1e1 * t1635 * t1886 - t1068) + t78 * (t114 * t6425 - 0.5000000000e0 * t6582 * t1823) + 0.4905000000e1 * t6582 * t1488 + t112 * (-t873 + t462 * t5519 - 0.5000000000e0 * t1088 * t6319);
      t6614 = t117 * t2475;
      t6627 = t68 * t3309;
      t6630 = t78 * t3304;
      t6643 = t95 * t2240;
      t6663 = -0.1e1 * t1088 * t692 - t2115;
      t6672 = t68 * t6663;
      jac__6_8 = t223 * (t663 * (t286 * t3274 + t314 * t3281 + t2399 - t2400) + t286 * (t211 * t6614 + t3268) + t314 * (t201 * t6614 + t3270) + t4443 + t2363 - t2361) + t663 * (-t286 * t3294 - t314 * t3300 + t112 * (t54 * (t6627 - t3306) + t71 * t6630 - t3312) - t3316) + t286 * (-t112 * t3330 + t3293 - t3322) + t215 * (t504 * t4420 + t54 * (t117 * t68 * t3285 + t78 * t6643) + t1898 * t78 * t3338 + t3651 * t6643) + t314 * (-t112 * t3358 - t3299 - t3353) + t504 * (-t112 * t3367 + t63 * t3309 - t3372 + t3377 - t3380) + t112 * (t54 * (t117 * t78 * t6663 + t6627 - t3394 - 0.1e1 * t692 * t2567 * t3958 - 0.1e1 * t3396) + t117 * t71 * (t6672 - t4912) + t71 * (-0.1e1 * t2607 * t3958 + t6630) - 0.1e1 * t3412 - t3415) + t54 * (t117 * t68 * (-t2511 + t3284) + 0.2500000000e0 * t5844 * t4022) + t117 * (t71 * t78 * (t2196 - t3284) - 0.1e1 * t3432 * t272) + 0.2500000000e0 * theta4__dot * t1698 * t95 * t71 * t196 + t3316;
      t6704 = -t117 * t4858;
      t6719 = t95 * t2544 + t3284 - t3337;
      t6748 = -t3284 + t2196 + t4936;
      jac__6_10 = t223 * (t286 * (t201 * t2475 + t211 * t6704) + t314 * (t201 * t6704 + t211 * t3275) - t2473 + t2474) + t286 * (-t112 * t4880 - t4870 - t4873) + t215 * (t54 * t78 * t6719 + t71 * t68 * t6719) + t314 * (-t112 * t4901 - t4894 + t4896) + t112 * (t54 * (t117 * t78 * t2410 - 0.1e1 * t2568 * t3958 + t6672 - t4912) + t71 * (t117 * t2415 + t78 * t353 * theta4__dot * t367 - 0.1e1 * t2553 * t3958) - 0.5000000000e0 * t243 * t692) + t54 * t78 * t6748 + t71 * t68 * t6748 + (L6 * t110 * theta4__dot + t78 * t1562) * m6 * t226;
      t6770 = t2049 - t2239;
      jac__6_11 = t215 * (t54 * (t68 * t117 * t2547 + t2586) + t2588 + t825 * t71 * t2544) + t223 * t6719 + t54 * (t68 * t117 * t5841 + t78 * t6770 - 0.1e1 * t2574 * t1541 - 0.1e1 * t2137) + t68 * (-0.1e1 * t5836 + t71 * t6770) + t825 * t71 * t5825 - t4493 + t5845 - 0.1e1 * t2574 * t2034;
      
      % store on output
      jac__Hx = zeros(6,12);
      jac__Hx(1,1) = jac__1_1;
      jac__Hx(1,2) = jac__1_2;
      jac__Hx(1,3) = jac__1_3;
      jac__Hx(1,8) = jac__1_8;
      jac__Hx(1,9) = jac__1_9;
      jac__Hx(2,1) = jac__2_1;
      jac__Hx(2,2) = jac__2_2;
      jac__Hx(2,3) = jac__2_3;
      jac__Hx(2,4) = jac__2_4;
      jac__Hx(2,5) = jac__2_5;
      jac__Hx(2,6) = jac__2_6;
      jac__Hx(2,7) = jac__2_7;
      jac__Hx(2,8) = jac__2_8;
      jac__Hx(2,9) = jac__2_9;
      jac__Hx(2,10) = jac__2_10;
      jac__Hx(2,11) = jac__2_11;
      jac__Hx(2,12) = jac__2_12;
      jac__Hx(3,1) = jac__3_1;
      jac__Hx(3,2) = jac__3_2;
      jac__Hx(3,3) = jac__3_3;
      jac__Hx(3,7) = jac__3_7;
      jac__Hx(3,8) = jac__3_8;
      jac__Hx(3,9) = jac__3_9;
      jac__Hx(4,2) = jac__4_2;
      jac__Hx(4,4) = jac__4_4;
      jac__Hx(4,5) = jac__4_5;
      jac__Hx(4,6) = jac__4_6;
      jac__Hx(4,8) = jac__4_8;
      jac__Hx(4,10) = jac__4_10;
      jac__Hx(4,11) = jac__4_11;
      jac__Hx(4,12) = jac__4_12;
      jac__Hx(5,2) = jac__5_2;
      jac__Hx(5,4) = jac__5_4;
      jac__Hx(5,5) = jac__5_5;
      jac__Hx(5,6) = jac__5_6;
      jac__Hx(5,8) = jac__5_8;
      jac__Hx(5,10) = jac__5_10;
      jac__Hx(5,11) = jac__5_11;
      jac__Hx(5,12) = jac__5_12;
      jac__Hx(6,2) = jac__6_2;
      jac__Hx(6,4) = jac__6_4;
      jac__Hx(6,5) = jac__6_5;
      jac__Hx(6,6) = jac__6_6;
      jac__Hx(6,8) = jac__6_8;
      jac__Hx(6,10) = jac__6_10;
      jac__Hx(6,11) = jac__6_11;
    end

      
    function jac__Wx = Wx( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      c1 = self.c1;
      c2 = self.c2;
      c3 = self.c3;
      c4 = self.c4;
      c5 = self.c5;
      c6 = self.c6;
      prism = self.prism;

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta2 = vars__(3);
      theta4 = vars__(4);
      theta5 = vars__(5);
      theta6 = vars__(6);
      s__dot = vars__(7);
      theta1__dot = vars__(8);
      theta2__dot = vars__(9);
      theta4__dot = vars__(10);
      theta5__dot = vars__(11);
      theta6__dot = vars__(12);
      % evaluate function
      t1 = theta1__dot ^ 2;
      t2 = theta2__dot ^ 2;
      t4 = cos(theta2);
      t6 = sin(theta2);
      t9 = sin(theta1);
      t11 = cos(theta1);
      t12 = t11 * theta1__dot;
      jac__1_1 = t9 * (t4 * (-t1 - t2) - t6 * theta2__dot__dot) - 2 * t6 * theta2__dot * t12 + theta1__dot__dot * t4 * t11;
      t18 = -s - L3 - L4;
      t20 = t2 * t18;
      t25 = -t18;
      t27 = -2 * theta2__dot * s__dot - t25 * theta2__dot__dot;
      t29 = theta4__dot ^ 2;
      t30 = t1 + t29;
      t31 = cos(theta4);
      t33 = sin(theta4);
      t34 = theta4__dot__dot * t33;
      t42 = -theta1__dot * s__dot - t25 * theta1__dot__dot / 2;
      t45 = t6 * t25;
      t47 = theta1__dot * theta4__dot;
      jac__1_2 = t11 * (t4 * (t1 * t18 + t20 + s__dot__dot) + t6 * t27 + L5 * (t31 * t30 + t34)) + 2 * t9 * (t4 * t42 + t45 * theta1__dot * theta2__dot - L5 * (t33 * t47 - theta1__dot__dot * t31 / 2));
      t60 = -t27;
      t67 = t25 * theta2__dot;
      jac__1_3 = t9 * (t6 * (t25 * t1 + t2 * t25 - s__dot__dot) - t60 * t4) - 2 * (t67 * theta1__dot * t4 - t6 * t42) * t11;
      jac__1_4 = (t33 * (t11 * theta1__dot__dot - t9 * t30) + (2 * t11 * t47 + t9 * theta4__dot__dot) * t31) * L5;
      jac__1_7 = -2 * t6 * theta2__dot * t9 + 2 * t4 * t12;
      t87 = t4 * s__dot;
      t88 = t6 * t67;
      t90 = L5 * t33 * theta4__dot;
      jac__1_8 = t11 * (2 * t87 - 2 * t88 + 2 * t90) - 2 * (-L5 * t31 + t4 * t25) * t9 * theta1__dot;
      jac__1_9 = t9 * (-2 * t6 * s__dot - 2 * t4 * t67) - 2 * t45 * t12;
      jac__1_10 = 2 * (theta1__dot * t33 * t11 + theta4__dot * t31 * t9) * L5;
      jac__2_1 = -t6 * t2 + theta2__dot__dot * t4;
      jac__2_3 = t4 * (t20 + s__dot__dot) - t6 * t60;
      jac__2_4 = (t29 * t31 + t34) * L5;
      jac__2_7 = 2 * t4 * theta2__dot;
      jac__2_9 = 2 * t87 - 2 * t88;
      jac__2_10 = 2 * t90;
      
      % store on output
      jac__Wx = zeros(2,12);
      jac__Wx(1,1) = jac__1_1;
      jac__Wx(1,2) = jac__1_2;
      jac__Wx(1,3) = jac__1_3;
      jac__Wx(1,4) = jac__1_4;
      jac__Wx(1,7) = jac__1_7;
      jac__Wx(1,8) = jac__1_8;
      jac__Wx(1,9) = jac__1_9;
      jac__Wx(1,10) = jac__1_10;
      jac__Wx(2,1) = jac__2_1;
      jac__Wx(2,3) = jac__2_3;
      jac__Wx(2,4) = jac__2_4;
      jac__Wx(2,7) = jac__2_7;
      jac__Wx(2,9) = jac__2_9;
      jac__Wx(2,10) = jac__2_10;
    end

    

    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res__ode = f( self, t, vars__ )
      pos      = vars__(1:self.npos);
      vel      = vars__(self.npos+1:self.nvel+self.npos);
      g        = self.gravity;
      Phi_P    = self.DPhiDp( t, pos );
      mass     = self.Mass( t, pos );
      M        = [ mass, Phi_P.'; Phi_P, zeros(2,2) ];
      rhs      = [ self.gfun( t, vars__ ); self.B( t, vars__ )];
      sol      = M\rhs;
      res__ode = [ vel; sol(1:self.npos)];
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function jac__jode = DfDx( self, t, vars__ )
      L1=self.L1;
      L2=self.L2;
      L3=self.L3;
      L4=self.L4;
      L5=self.L5;
      L6=self.L6;
      L7=self.L7;
      L8=self.L8;
      L9=self.L9;
      L10=self.L10;
      phi1 = self.phi1; 
      phi2 = self.phi2;
      m1 = self.m1;
      m2 = self.m2;
      m3 = self.m3;
      m4 = self.m4;
      m5 = self.m5;
      m6 = self.m6;
      IZ1 = self.IZ1;
      IX2 = self.IX2;
      IX3 = self.IX3;
      IX4 = self.IX4;
      IX5 = self.IX5;
      IZ6 = self.IZ6;

      c1 = self.c1;
      c2 = self.c2;
      c3 = self.c3;
      c4 = self.c4;
      c5 = self.c5;
      c6 = self.c6;
      prism = self.prism;
      
      g        = self.gravity;
      npos     = self.neq/2;
      pos      = vars__(1:npos);
      vel      = vars__(npos+1:end);
      g        = self.gravity;
      Phi_P    = self.DPhiDp( t, pos );
      mass     = self.Mass( t, pos );
      M        = [ mass, Phi_P.'; Phi_P, zeros(1,1) ];
      rhs      = [ self.gfun( t, vars__ ); self.B( t, vars__ )];
      sol      = M\rhs;
      vars_dot = sol(1:4);
      lambda   = sol(4:6);

      %
      %  / M      Phi_P^T \     d   / v_dot  \      d    / H(t,p,v,v_dot,lambda) \
      %  |                |  ------ |         | = ------ |                       |
      %  \ Phi_P    0     /  d{p,v} \ lambda /    d{p,v} \ W(t,p,v,v_dot)        /
      %
      hx=self.Hx( t, vars__ );
      wx=self.Wx( t, vars__ );

      sol = M\[hx; wx];

      jac__jode = [eye(npos), zeros(npos,npos);sol(1:npos,:)];
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res = DfDt( self, t, vars___)
      res = zeros(8,1);
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res = exact( self, t0, x0, t )
      res = []; % no exact solution
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    % interface function
    function res__H = h( self, t, vars__ )
      res__H = [ self.Phi( t, vars__ ); self.A( t, vars__ ) ];
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    % interface function
    function jac__JH = DhDx( self, t, vars__ )
      jac__JH = [ self.DPhiDp( t, vars__ ), zeros(2,6); ...
                  self.DADp( t, vars__ ),  self.DPhiDp( t, vars__ ) ];
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function res = DhDt( self, t, vars__ )
      jac__DhDt = zeros(6,1);
    end
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %function plot( self, vars__ )
      % extract states
    %  x1 = vars__(1);
    %   y1 = vars__(2);
    %   x2 = vars__(3);
    %   y2 = vars__(4);

    %   hold off;
    %   drawAxes( 2, 0.25, 3, 0, 0 );
    %   hold on;

    %   xm  = x1/2;
    %   ym  = y1/2;
    %   dx  = self.L1*x1/hypot(x1,y1);
    %   dy  = self.L1*y1/hypot(x1,y1);
    %   xx0 = xm - dx/2;
    %   yy0 = ym - dy/2;
    %   xx1 = xm + dx/2;
    %   yy1 = ym + dy/2;

    %   plot( [xx0,xx1], [yy0,yy1], 'LineWidth',4,'Color','red');
    %   fillCircle( 'red', xx0, yy0, 0.05 );
    %   fillCircle( 'red', xx1, yy1, 0.05 );

    %   xm  = (x1+x2)/2;
    %   ym  = (y1+y2)/2;
    %   dx  = self.L1*(x2-x1)/hypot(x2-x1,y2-y1);
    %   dy  = self.L1*(y2-y1)/hypot(x2-x1,y2-y1);
    %   xx0 = xm - dx/2;
    %   yy0 = ym - dy/2;
    %   xx1 = xm + dx/2;
    %   yy1 = ym + dy/2;

    %   plot( [xx0,xx1], [yy0,yy1], 'LineWidth',4,'Color','red');
    %   fillCircle( 'red', xx0, yy0, 0.05 );
    %   fillCircle( 'red', xx1, yy1, 0.05 );

    %   fillCircle( 'black', 0, 0, 0.05 );
    %   axis equal;
    %   axis([-1.1 1.1 -1.1 1.1]*(self.L1+self.L2));
    % end
  end
end
